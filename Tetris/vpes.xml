<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<static.StaticResult>
  <summary>
    <prjName>test_CS</prjName>
    <toolName>static.StaticResult</toolName>
    <toolVersion/>
    <numberOfCodeViolation>619</numberOfCodeViolation>
    <numberOfRteViolation>0</numberOfRteViolation>
  </summary>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <crc32>adb804e4</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <crc32>4de84d34</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\Properties\AssemblyInfo.cs</fileName>
    <crc32>554db6a4</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <crc32>8f84c8ff</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Properties\AssemblyInfo.cs</fileName>
    <crc32>fa583c9</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <crc32>3d651287</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <crc32>ffb6fe46</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <crc32>f2e40bc7</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <crc32>f6df5897</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Properties\AssemblyInfo.cs</fileName>
    <crc32>f0c88d2e</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.Designer.cs</fileName>
    <crc32>c5b6595a</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <crc32>d14fbb24</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <crc32>d731dfc</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\AssemblyInfo.cs</fileName>
    <crc32>3700b3a2</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\Resources.Designer.cs</fileName>
    <crc32>a46dd2e7</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <crc32>d756d487</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <crc32>d36229e3</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Program.cs</fileName>
    <crc32>1f539ca8</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMode.cs</fileName>
    <crc32>6af809c9</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <crc32>ba56e1a0</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\Settings.Designer.cs</fileName>
    <crc32>46f9f72d</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <source>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Interfaces\IDrawing.cs</fileName>
    <crc32>26fd482f</crc32>
    <isExcluded>false</isExcluded>
  </source>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA1008</rule>
    <ruleTitle><![CDATA[Enums should have zero value]]></ruleTitle>
    <ruleDesc><![CDATA[<p>An enum should generally have a zero value. If the enum is not decorated with the Flags attribute, it should have a member with a value of zero that represents the empty state. Optionally, this value is named 'None'. For a Flags-attributed enum, a zero-valued member is optional and, if it exists, should always be named 'None'. This value should indicate that no values have been set in the enum. Using a zero-valued member for other purposes is contrary to the use of the Flags attribute in that the bitwise AND and OR operators are useless with the member.</p><a href=http://msdn.microsoft.com/en-us/library/ms182149.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA1013</rule>
    <ruleTitle><![CDATA[Overload operator equals on overloading add and subtract]]></ruleTitle>
    <ruleDesc><![CDATA[<p>When overloading the addition and subtraction operators, make sure that the equality operator (==) is defined in a consistent manner.</p><a href=http://msdn.microsoft.com/en-us/library/ms182164.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA1308</rule>
    <ruleTitle><![CDATA[Normalize strings to uppercase]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Strings should be normalized to upper-case.</p><a href=http://msdn.microsoft.com/en-us/library/bb386042.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA1806</rule>
    <ruleTitle><![CDATA[Do not ignore method results]]></ruleTitle>
    <ruleDesc><![CDATA[<p>The result of methods that return new instances of strings should be assigned to a variable and subsequently used. If the result of a method that creates a new object, such as String.ToLower(), is not assigned to a variable, the call is wasted.</p><a href=http://msdn.microsoft.com/en-us/library/ms182273.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA1816</rule>
    <ruleTitle><![CDATA[Call GC.SuppressFinalize correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Call GC.SuppressFinalize to suppress finalization of your instance once Dispose has been called. Objects that implement IDisposable should call SuppressFinalize from the IDisposable.Dispose method to prevent the garbage collector from calling Object.Finalize on an object that does not require it.</p><a href=http://msdn.microsoft.com/en-us/library/ms182269.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA1819</rule>
    <ruleTitle><![CDATA[Properties should not return arrays]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</p><a href=http://msdn.microsoft.com/en-us/library/0fss9skc.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA1820</rule>
    <ruleTitle><![CDATA[Test for empty strings using string length]]></ruleTitle>
    <ruleDesc><![CDATA[<p>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</p><a href=http://msdn.microsoft.com/en-us/library/ms182279.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA1903</rule>
    <ruleTitle><![CDATA[Use only API from targeted framework]]></ruleTitle>
    <ruleDesc><![CDATA[<p></p><a href=http://msdn.microsoft.com/en-us/library/cc667408(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2004</rule>
    <ruleTitle><![CDATA[Remove calls to GC.KeepAlive]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If converting to SafeHandle usage, remove all calls to GC.KeepAlive(object). Classes relying on SafeHandle do not require calls to GC.KeepAlive, and unnecessary calls can make code harder to maintain.</p><a href=http://msdn.microsoft.com/en-us/library/ms182293.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2006</rule>
    <ruleTitle><![CDATA[Use SafeHandle to encapsulate native resources]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Use of IntPtr in managed code may indicate a potential security and reliability problem. All uses of IntPtr must be reviewed to determine whether use of a SafeHandle (or similar technology) is required in its place. Problems will occur if the IntPtr represents some native resource (memory, file handle, socket etc.) that managed code is considered to own. I.e. managed code is expected to in some way release the resource and failure to do so would cause resource leakage. In such scenarios security or reliability problems will also exist if multithreaded access is allowed to the IntPtr and a means of releasing the resource represented by the IntPtr. These problems involve recycling of the IntPtr value on resource release while simultaneous use of the resource is being made on another thread, leading to race conditions where one thread can read or write data associated with the wrong resource. For example, if your type stores an OS handle as an IntPtr and allows users to call both Close and any other method using that handle simultaneously (without some kind of synchronization), your code has a handle recycling problem, which causes data corruption and often a security vulnerability. SafeHandle (and its sibling class CriticalHandle) provide a mechanism for encapsulating a native handle to a resource so that such threading problems can be avoided (along with other issues such as the need to carefully control the lifetime of managed objects that contain a copy of the native handle over calls to native methods; ie, you can often remove calls to GC.KeepAlive). There are performance overheads implicit in using SafeHandle (and, to a lesser degree, CriticalHandle) which can often be mitigated through careful design.</p><a href=http://msdn.microsoft.com/en-us/library/ms182294.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2102</rule>
    <ruleTitle><![CDATA[Catch non-CLSCompliant exceptions in general handlers]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Exception handlers which are truly intended to catch all exceptions should handle non-CLSCompliant exceptions if there is a possibility one can be raised. If possible, catch handlers should only catch specific exceptions or exception base types. In circumstances where a handler is required to catch all exceptions (e.g., when a try block wraps arbitrary plug-in code), the handler should also include a generic catch handler (in C#, catch{ ... }) to handle non-CLSCompliant exceptions. It is possible to raise non-CLSCompliant exceptions by modifying and recompiling IL.</p><a href=http://msdn.microsoft.com/en-us/library/bb264489.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2104</rule>
    <ruleTitle><![CDATA[Do not declare read only mutable reference types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>A read-only declaration for a mutable reference type does not prevent the field's instance data from being modified. For example, a read-only StringBuilder field declaration does not make sense, since the data encapsulated by the StringBuilder can be modified using the read-only reference.</p><a href=http://msdn.microsoft.com/en-us/library/ms182302.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2105</rule>
    <ruleTitle><![CDATA[Array fields should not be read only]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Read-only fields that reference arrays might not give the intended effect. Setting a field which references an array to read-only prevents the value of the field from being changed. Note that elements in the array can be changed. You can ignore this violation if protecting the contents of the array is not a concern.</p><a href=http://msdn.microsoft.com/en-us/library/ms182299.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2106</rule>
    <ruleTitle><![CDATA[Secure asserts]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Asserting a security permission without performing any security checks can leave an exploitable security weakness in your code. A security stack walk stops when a security permission is asserted. If you assert a permission without performing any checks on the caller, the caller might be able to indirectly execute code using your permissions. Asserts without security checks are only permissible when you are certain that the assert cannot be used in a harmful fashion, namely, if the code you call is harmless, or users have no way to pass arbitrary information to code that you call.</p><a href=http://msdn.microsoft.com/en-us/library/ms182314.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2115</rule>
    <ruleTitle><![CDATA[Call GC.KeepAlive when using native resources]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If a method uses an IntPtr or UIntPtr field in a class with a finalizer and does not call GC.KeepAlive, a race condition might be introduced.</p><a href=http://msdn.microsoft.com/en-us/library/ms182300.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2119</rule>
    <ruleTitle><![CDATA[Seal methods that satisfy private interfaces]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Externally visible types that implement non-public interfaces should not be extensible. Types that extend public types with non-public interfaces can override interface members. This can compromise object behavior or create a security vulnerability.</p><a href=http://msdn.microsoft.com/en-us/library/ms182313.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2120</rule>
    <ruleTitle><![CDATA[Secure serialization constructors]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Serializable types that have a constructor protected by a security demand must apply the same security demands to the serialization constructor. Apply the demand using declarative security.</p><a href=http://msdn.microsoft.com/en-us/library/ms182317.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2121</rule>
    <ruleTitle><![CDATA[Static constructors should be private]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Non-private static constructors can cause unexpected behaviors, particularly when executed multiple times. This violation can occur if a type declares static data but has not explicitly  declared a static constructor. In this case, some compilers will generate an externally visible static constructor.</p><a href=http://msdn.microsoft.com/en-us/library/ms182320.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2130</rule>
    <ruleTitle><![CDATA[Security critical constants should be transparent]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Compilers inline accesses to constants, and as such transparency enforcement is not done for them since there is no runtime access to the field.  These fields should be security transparent so that code reviewers do not assume that transparent code cannot access the constant.</p><a href=http://msdn.microsoft.com/en-us/library/dd997446(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2205</rule>
    <ruleTitle><![CDATA[Use managed equivalents of Win32 API]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Use managed equivalents to Win32 API whenever possible.</p><a href=http://msdn.microsoft.com/en-us/library/ms182365.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2221</rule>
    <ruleTitle><![CDATA[Finalizers should be protected]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Finalize methods should be declared as protected.</p><a href=http://msdn.microsoft.com/en-us/library/ms182340.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2222</rule>
    <ruleTitle><![CDATA[Do not decrease inherited member visibility]]></ruleTitle>
    <ruleDesc><![CDATA[<p>It is incorrect to override a public method from an inherited class with a private implementation, unless the type is sealed or the method is marked final. It is considered bad form to hide a method signature halfway down an inheritance tree.</p><a href=http://msdn.microsoft.com/en-us/library/ms182332.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2223</rule>
    <ruleTitle><![CDATA[Members should differ by more than return type]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Methods in the same type that differ only by return type can be difficult for developers and tools to properly recognize. When extending a type, be sure not to define new methods that differ from base type methods only by type.</p><a href=http://msdn.microsoft.com/en-us/library/ms182352.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2224</rule>
    <ruleTitle><![CDATA[Override Equals on overloading operator equals]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Types that redefine the equality operator should redefine Equals as well to ensure that these members return the same results. This helps ensure that types that rely on Equals (such as ArrayList and Hashtable) behave in a manner that is expected and consistent with the equality operator.</p><a href=http://msdn.microsoft.com/en-us/library/ms182357.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2226</rule>
    <ruleTitle><![CDATA[Operators should have symmetrical overloads]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Overload operators that have related meanings so that their behavior is consistent. For example, when overloading the equality operator, you should also overload the inequality operator to ensure they return opposite results for the same input values.</p><a href=http://msdn.microsoft.com/en-us/library/ms182356.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2227</rule>
    <ruleTitle><![CDATA[Collection properties should be read only]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</p><a href=http://msdn.microsoft.com/en-us/library/ms182327.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2231</rule>
    <ruleTitle><![CDATA[Overload operator equals on overriding ValueType.Equals]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Value types that redefine System.ValueType.Equals should redefine the equality operator as well to ensure that these members return the same results. This helps ensure that types that rely on Equals (such as ArrayList and Hashtable) behave in a manner that is expected and consistent with the equality operator.</p><a href=http://msdn.microsoft.com/en-us/library/ms182359.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Correctness Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on logic errors and common mistakes made in the usage of framework APIs. Include this rule set to expand on the list of warnings reported by the minimum recommended rules.]]></ruleSetDesc>
    <rule>CA2239</rule>
    <ruleTitle><![CDATA[Provide deserialization methods for optional fields]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If a type contains fields attributed as OptionalField, then it should implement the corresponding special deserialization methods.</p><a href=http://msdn.microsoft.com/en-us/library/ms182362.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1000</rule>
    <ruleTitle><![CDATA[Do not declare static members on generic types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>The syntax for calling static members on generic types is complex as the type parameter has to be specified for each call.</p><a href=http://msdn.microsoft.com/en-us/library/ms182139.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1002</rule>
    <ruleTitle><![CDATA[Do not expose generic lists]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Do not expose List<T> in object models. Use Collection<T>, ReadOnlyCollection<T> or KeyedCollection<K,V> instead. List<T> is meant to be used from implementation, not in object model API. List<T> is optimized for performance at the cost of long term versioning. For example, if you return List<T> to the client code, you will not ever be able to receive notifications when client code modifies the collection.</p><a href=http://msdn.microsoft.com/en-us/library/ms182142.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1003</rule>
    <ruleTitle><![CDATA[Use generic event handler instances]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Do not declare new delegates to be used as event handlers when targeting a version of the .NET Framework that supports generics. Use an instance EventHandler<T> instead.</p><a href=http://msdn.microsoft.com/en-us/library/ms182178.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1004</rule>
    <ruleTitle><![CDATA[Generic methods should provide type parameter]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Methods where the type parameter cannot be inferred from the parameters and therefore has to be defined in the method call are too difficult to understand. Methods with a formal parameter typed as the generic method type parameter support inference. Methods with no formal parameter typed as the generic method type parameter don't support inference.</p><a href=http://msdn.microsoft.com/en-us/library/ms182150.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1005</rule>
    <ruleTitle><![CDATA[Avoid excessive parameters on generic types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Avoid generic types with more than two type parameters as users have difficulties understanding what type parameters represent in types with long type parameter lists.</p><a href=http://msdn.microsoft.com/en-us/library/ms182129.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1006</rule>
    <ruleTitle><![CDATA[Do not nest generic types in member signatures]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</p><a href=http://msdn.microsoft.com/en-us/library/ms182144.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1007</rule>
    <ruleTitle><![CDATA[Use generics where appropriate]]></ruleTitle>
    <ruleDesc><![CDATA[<p>References passed to ref parameters must be the exact type of the parameter. Using generics enable the method for general use.</p><a href=http://msdn.microsoft.com/en-us/library/ms182179.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1008</rule>
    <ruleTitle><![CDATA[Enums should have zero value]]></ruleTitle>
    <ruleDesc><![CDATA[<p>An enum should generally have a zero value. If the enum is not decorated with the Flags attribute, it should have a member with a value of zero that represents the empty state. Optionally, this value is named 'None'. For a Flags-attributed enum, a zero-valued member is optional and, if it exists, should always be named 'None'. This value should indicate that no values have been set in the enum. Using a zero-valued member for other purposes is contrary to the use of the Flags attribute in that the bitwise AND and OR operators are useless with the member.</p><a href=http://msdn.microsoft.com/en-us/library/ms182149.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1010</rule>
    <ruleTitle><![CDATA[Collections should implement generic interface]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Non-generic strongly typed collections should implement one of the generic collection interfaces. This will allow better integration of the collection with generic API.</p><a href=http://msdn.microsoft.com/en-us/library/ms182132.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1011</rule>
    <ruleTitle><![CDATA[Consider passing base types as parameters]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Using base types as parameters to methods improves re-use of these methods if you only use methods & properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</p><a href=http://msdn.microsoft.com/en-us/library/3hk32yyz.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1012</rule>
    <ruleTitle><![CDATA[Abstract types should not have constructors]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Public constructors for abstract types do not make sense because you cannot create instances of abstract types.</p><a href=http://msdn.microsoft.com/en-us/library/ms182126.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1013</rule>
    <ruleTitle><![CDATA[Overload operator equals on overloading add and subtract]]></ruleTitle>
    <ruleDesc><![CDATA[<p>When overloading the addition and subtraction operators, make sure that the equality operator (==) is defined in a consistent manner.</p><a href=http://msdn.microsoft.com/en-us/library/ms182164.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1014</rule>
    <ruleTitle><![CDATA[Mark assemblies with CLSCompliantAttribute]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</p><a href=http://msdn.microsoft.com/en-us/library/ms182156.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1017</rule>
    <ruleTitle><![CDATA[Mark assemblies with ComVisibleAttribute]]></ruleTitle>
    <ruleDesc><![CDATA[<p>The System.Runtime.InteropServices.ComVisible attribute indicates whether COM clients can use the library. Good design dictates that developers explicitly indicate COM visibility. The default value for this attribute is 'true'. However, the best design is to mark the assembly ComVisible false, and then mark types, interfaces, and individual members as ComVisible true, as appropriate.</p><a href=http://msdn.microsoft.com/en-us/library/ms182157.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Other</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1018</rule>
    <ruleTitle><![CDATA[Mark attributes with AttributeUsageAttribute]]></ruleTitle>
    <ruleDesc><![CDATA[<p>The AttributeUsage attribute specifies the targets that are valid for the attribute (see System.AttributeTargets), whether an attribute can appear on a target more than once, and whether the attribute is inheritable.</p><a href=http://msdn.microsoft.com/en-us/library/ms182158.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Other</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1019</rule>
    <ruleTitle><![CDATA[Define accessors for attribute arguments]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Provide accessors for both named and positional arguments. Each positional argument on an attribute should declare a read-only property with the same name (but different casing). Each named argument should provide a read/write property with the same name (but different casing).</p><a href=http://msdn.microsoft.com/en-us/library/ms182136.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1023</rule>
    <ruleTitle><![CDATA[Indexers should not be multidimensional]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Indexers (indexed properties) should use a single value (either an integer or string types) for indexing values. Multidimensional indexers can significantly reduce the usability of the library. For example, public object this [int index1, int index2] is a non-intuitive indexer.</p><a href=http://msdn.microsoft.com/en-us/library/ms182152.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1024</rule>
    <ruleTitle><![CDATA[Use properties where appropriate]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</p><a href=http://msdn.microsoft.com/en-us/library/ms182181.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1025</rule>
    <ruleTitle><![CDATA[Replace repetitive arguments with params array]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Several instances of same-type arguments can be better implemented as a parameter array argument. Generally, if a member declares three or more arguments of the same type, consider using a parameter array.</p><a href=http://msdn.microsoft.com/en-us/library/ms182167.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1026</rule>
    <ruleTitle><![CDATA[Default parameters should not be used]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</p><a href=http://msdn.microsoft.com/en-us/library/ms182135.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1027</rule>
    <ruleTitle><![CDATA[Mark enums with FlagsAttribute]]></ruleTitle>
    <ruleDesc><![CDATA[<p>The enumeration appears to be made up of combinable flags. If this true, apply the Flags attribute to the enumeration.</p><a href=http://msdn.microsoft.com/en-us/library/ms182159.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1028</rule>
    <ruleTitle><![CDATA[Enum storage should be Int32]]></ruleTitle>
    <ruleDesc><![CDATA[<p>There is little or no benefit to using a type smaller than Int32. You might require a type that is larger than Int32 if: 1) the enumeration values are flags and there are or will be many (&amp;gt;32) values, or 2) the type needs to be different from Int32 for backward compatibility. Avoid using an underlying type that is not integral.</p><a href=http://msdn.microsoft.com/en-us/library/ms182147.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1030</rule>
    <ruleTitle><![CDATA[Use events where appropriate]]></ruleTitle>
    <ruleDesc><![CDATA[<p>A method name suggestive of event functionality was encountered.</p><a href=http://msdn.microsoft.com/en-us/library/ms182177.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1031</rule>
    <ruleTitle><![CDATA[Do not catch general exception types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</p><a href=http://msdn.microsoft.com/en-us/library/ms182137.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1032</rule>
    <ruleTitle><![CDATA[Implement standard exception constructors]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</p><a href=http://msdn.microsoft.com/en-us/library/ms182151.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1034</rule>
    <ruleTitle><![CDATA[Nested types should not be visible]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Do not use public, protected or protected internal (Protected Friend) nested types as a way of grouping types. Use namespaces for this purpose. There are very limited scenarios where nested types are the best design. Also, nested type member accessibility is not clearly understood by all audiences. Enumerators are exempt from this rule.</p><a href=http://msdn.microsoft.com/en-us/library/ms182162.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1035</rule>
    <ruleTitle><![CDATA[ICollection implementations have strongly typed members]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Types that implement ICollection should also provide a version of CopyTo with the first parameter set to a strong type, namely a type other than an array of objects or System.Array. Implement the interface member explicitly and make the strongly typed version public. It is safe to ignore violations of this rule when you are implementing a new object-based collection, such as a binary tree, where types based on your collection will determine what the strong type is. These types should expose strongly typed members.</p><a href=http://msdn.microsoft.com/en-us/library/49stb304.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1036</rule>
    <ruleTitle><![CDATA[Override methods on comparable types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Types that implement IComparable should redefine Equals and comparison operators to keep the meanings of less than, greater than, and equals consistent throughout the type.</p><a href=http://msdn.microsoft.com/en-us/library/ms182163.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1038</rule>
    <ruleTitle><![CDATA[Enumerators should be strongly typed]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Types that implement IEnumerator should also provide a version of the Current property that returns a type other than Object. Implement the interface member explicitly and make the strongly typed version public.</p><a href=http://msdn.microsoft.com/en-us/library/ms182148.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1039</rule>
    <ruleTitle><![CDATA[Lists are strongly typed]]></ruleTitle>
    <ruleDesc><![CDATA[<p>IList implementations should also provide versions of the IList members that are strongly typed, namely they should specify types other than Object for method and property parameter and return types. Implement the interface members explicitly and make the strongly typed versions public. It is safe to ignore violations of this rule when you are implementing a new object-based collection, such as a linked list, where types based on your collection will determine what the strong type is. These types should expose strongly typed members.</p><a href=http://msdn.microsoft.com/en-us/library/ms182154.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1041</rule>
    <ruleTitle><![CDATA[Provide ObsoleteAttribute message]]></ruleTitle>
    <ruleDesc><![CDATA[<p>The ObsoleteAttribute.Message property provides the text message displayed when an obsolete type or member is compiled. This message should provide information on the replacement for the obsolete element.</p><a href=http://msdn.microsoft.com/en-us/library/ms182166.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1043</rule>
    <ruleTitle><![CDATA[Use integral or string argument for indexers]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Indexers (indexed properties) should use either integer or string types for indexing values. These types are easy to use and commonly used for indexing data structures; using other types can significantly reduce the usability of the library. For example, public char this [int index] is the C# signature for the String type's indexer.</p><a href=http://msdn.microsoft.com/en-us/library/ms182180.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1044</rule>
    <ruleTitle><![CDATA[Properties should not be write only]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Write-only properties usually indicate a flawed design.</p><a href=http://msdn.microsoft.com/en-us/library/ms182165.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1046</rule>
    <ruleTitle><![CDATA[Do not overload operator equals on reference types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Most reference types, including those that override System.Object.Equals, do not override the equality operator  (==). Most languages provide a default implementation of this operator.</p><a href=http://msdn.microsoft.com/en-us/library/ms182145.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1047</rule>
    <ruleTitle><![CDATA[Do not declare protected members in sealed types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Sealed types cannot be extended, and protected members are only useful if you can extend the declaring type. Sealed types should not declare protected members.</p><a href=http://msdn.microsoft.com/en-us/library/ms182138.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1048</rule>
    <ruleTitle><![CDATA[Do not declare virtual members in sealed types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Sealed types cannot be extended, and virtual members are only useful if you can extend the declaring type.</p><a href=http://msdn.microsoft.com/en-us/library/ms182140.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1050</rule>
    <ruleTitle><![CDATA[Declare types in namespaces]]></ruleTitle>
    <ruleDesc><![CDATA[<p>A type should be defined inside a namespace to avoid duplication.</p><a href=http://msdn.microsoft.com/en-us/library/ms182134.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1051</rule>
    <ruleTitle><![CDATA[Do not declare visible instance fields]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</p><a href=http://msdn.microsoft.com/en-us/library/ms182141.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1052</rule>
    <ruleTitle><![CDATA[Static holder types should be sealed]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Static holder types do not provide functionality that derived instances can extend. Inheriting from such a type indicates a flawed design.</p><a href=http://msdn.microsoft.com/en-us/library/ms182168.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1053</rule>
    <ruleTitle><![CDATA[Static holder types should not have constructors]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</p><a href=http://msdn.microsoft.com/en-us/library/ms182169.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1054</rule>
    <ruleTitle><![CDATA[URI parameters should not be strings]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If a parameter name contains "uri" or "url" or "urn", and it's typed as string, the parameter type should be changed to System.Uri, unless there is an overload method where the same parameter is typed as System.Uri.</p><a href=http://msdn.microsoft.com/en-us/library/ms182174.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1055</rule>
    <ruleTitle><![CDATA[URI return values should not be strings]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If a function name contains "uri" or "url" or "urn" and the return type is string, the return type should be changed to System.Uri.</p><a href=http://msdn.microsoft.com/en-us/library/ms182176.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1056</rule>
    <ruleTitle><![CDATA[URI properties should not be strings]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If a property name contains "uri" or "url" or "urn" and it's typed as string, it should be changed to System.Uri.</p><a href=http://msdn.microsoft.com/en-us/library/ms182175.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1057</rule>
    <ruleTitle><![CDATA[String URI overloads call System.Uri overloads]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If a method overloads another method by replacing a System.Uri parameter with a string, then the string overload should simply build a Uri object from the string, and pass the result to the string overload.</p><a href=http://msdn.microsoft.com/en-us/library/ms182170.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1058</rule>
    <ruleTitle><![CDATA[Types should not extend certain base types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>It is best not to extend some base types or to prefer extending better alternatives to those base types.</p><a href=http://msdn.microsoft.com/en-us/library/ms182171.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1059</rule>
    <ruleTitle><![CDATA[Members should not expose certain concrete types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Members should not expose certain concrete types.</p><a href=http://msdn.microsoft.com/en-us/library/ms182160.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1064</rule>
    <ruleTitle><![CDATA[Exceptions should be public]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Exception classes should either be public, or have a non-generic public ancestor.</p><a href=http://msdn.microsoft.com/en-us/library/bb264484.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1500</rule>
    <ruleTitle><![CDATA[Variable names should not match field names]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Instance field and variable names should not be identical within the same scope.</p><a href=http://msdn.microsoft.com/en-us/library/ms182216.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1502</rule>
    <ruleTitle><![CDATA[Avoid excessive complexity]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</p><a href=http://msdn.microsoft.com/en-us/library/ms182212.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1708</rule>
    <ruleTitle><![CDATA[Identifiers should differ by more than case]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Do not use names that require case sensitivity for uniqueness. Components must be fully usable from both case-sensitive and case-insensitive languages. Since case-insensitive languages cannot distinguish between two names within the same context that differ only by case, components must avoid this situation.</p><a href=http://msdn.microsoft.com/en-us/library/ms182242.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1716</rule>
    <ruleTitle><![CDATA[Identifiers should not match keywords]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</p><a href=http://msdn.microsoft.com/en-us/library/ms182248.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1801</rule>
    <ruleTitle><![CDATA[Review unused parameters]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</p><a href=http://msdn.microsoft.com/en-us/library/ms182268.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1804</rule>
    <ruleTitle><![CDATA[Remove unused locals]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Remove locals that are not used or are only assigned to in method implementations.</p><a href=http://msdn.microsoft.com/en-us/library/ms182278.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1809</rule>
    <ruleTitle><![CDATA[Avoid excessive locals]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Method implementations should not contain more than 64 local variables. In order for the run-time to enregister local variables most efficiently, there should be 64 or fewer of them. Enregistering based on flow analysis will not occur for locals in excess of 64, which may result in slower performance.</p><a href=http://msdn.microsoft.com/en-us/library/ms182263.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1810</rule>
    <ruleTitle><![CDATA[Initialize reference type static fields inline]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</p><a href=http://msdn.microsoft.com/en-us/library/ms182275.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1811</rule>
    <ruleTitle><![CDATA[Avoid uncalled private code]]></ruleTitle>
    <ruleDesc><![CDATA[<p>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</p><a href=http://msdn.microsoft.com/en-us/library/ms182264.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1812</rule>
    <ruleTitle><![CDATA[Avoid uninstantiated internal classes]]></ruleTitle>
    <ruleDesc><![CDATA[<p>An internal class was detected that is apparently never instantiated. This rule does not attempt to detect late-bound creation and will generate false positives if instances of a type are only created in this way (for example, by means of Activator.CreateInstance or by passing the type as an argument to a TypeConverter constructor).</p><a href=http://msdn.microsoft.com/en-us/library/ms182265.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1813</rule>
    <ruleTitle><![CDATA[Avoid unsealed attributes]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Seal attribute types for improved performance. Sealing attribute types speeds up performance during reflection on custom attributes.</p><a href=http://msdn.microsoft.com/en-us/library/ms182267.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Multidimensional arrays can have a negative impact on performance. Use a jagged array if possible.</p><a href=http://msdn.microsoft.com/en-us/library/ms182277.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1815</rule>
    <ruleTitle><![CDATA[Override equals and operator equals on value types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>The default System.ValueType implementation might not perform as well as a custom implementation.</p><a href=http://msdn.microsoft.com/en-us/library/ms182276.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1819</rule>
    <ruleTitle><![CDATA[Properties should not return arrays]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</p><a href=http://msdn.microsoft.com/en-us/library/0fss9skc.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1820</rule>
    <ruleTitle><![CDATA[Test for empty strings using string length]]></ruleTitle>
    <ruleDesc><![CDATA[<p>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</p><a href=http://msdn.microsoft.com/en-us/library/ms182279.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1821</rule>
    <ruleTitle><![CDATA[Remove empty finalizers]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Finalizers should be avoided where possible, to avoid the additional performance overhead involved in tracking object lifetime.</p><a href=http://msdn.microsoft.com/en-us/library/bb264476.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1822</rule>
    <ruleTitle><![CDATA[Mark members as static]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</p><a href=http://msdn.microsoft.com/en-us/library/ms245046.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA1823</rule>
    <ruleTitle><![CDATA[Avoid unused private fields]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</p><a href=http://msdn.microsoft.com/en-us/library/ms245042.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2201</rule>
    <ruleTitle><![CDATA[Do not raise reserved exception types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</p><a href=http://msdn.microsoft.com/en-us/library/ms182338.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2205</rule>
    <ruleTitle><![CDATA[Use managed equivalents of Win32 API]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Use managed equivalents to Win32 API whenever possible.</p><a href=http://msdn.microsoft.com/en-us/library/ms182365.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2208</rule>
    <ruleTitle><![CDATA[Instantiate argument exceptions correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<p>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</p><a href=http://msdn.microsoft.com/en-us/library/ms182347.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2211</rule>
    <ruleTitle><![CDATA[Non-constant fields should not be visible]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</p><a href=http://msdn.microsoft.com/en-us/library/ms182353.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2217</rule>
    <ruleTitle><![CDATA[Do not mark enums with FlagsAttribute]]></ruleTitle>
    <ruleDesc><![CDATA[<p>The enumeration does not appear to contain a consistent set values that can be combined using  the OR (|) and AND (&amp;amp;) operators. Using the Flags attribute on an enumeration suggests that the enumeration values are meant to be combined using the AND and OR operators. Typically, a flags enumeration uses values that are either powers of two, or combine other values that are powers of two.</p><a href=http://msdn.microsoft.com/en-us/library/ms182335.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2219</rule>
    <ruleTitle><![CDATA[Do not raise exceptions in exception clauses]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Raising exceptions in exception clauses greatly increases the difficulty of debugging. Exceptions raised in finally and fault clauses will hide any exceptions raised in the corresponding try block. If an exception is raised in a filter, it is ignored and treated as if the filter had returned false.</p><a href=http://msdn.microsoft.com/en-us/library/bb386041.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2221</rule>
    <ruleTitle><![CDATA[Finalizers should be protected]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Finalize methods should be declared as protected.</p><a href=http://msdn.microsoft.com/en-us/library/ms182340.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2222</rule>
    <ruleTitle><![CDATA[Do not decrease inherited member visibility]]></ruleTitle>
    <ruleDesc><![CDATA[<p>It is incorrect to override a public method from an inherited class with a private implementation, unless the type is sealed or the method is marked final. It is considered bad form to hide a method signature halfway down an inheritance tree.</p><a href=http://msdn.microsoft.com/en-us/library/ms182332.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2223</rule>
    <ruleTitle><![CDATA[Members should differ by more than return type]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Methods in the same type that differ only by return type can be difficult for developers and tools to properly recognize. When extending a type, be sure not to define new methods that differ from base type methods only by type.</p><a href=http://msdn.microsoft.com/en-us/library/ms182352.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2224</rule>
    <ruleTitle><![CDATA[Override Equals on overloading operator equals]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Types that redefine the equality operator should redefine Equals as well to ensure that these members return the same results. This helps ensure that types that rely on Equals (such as ArrayList and Hashtable) behave in a manner that is expected and consistent with the equality operator.</p><a href=http://msdn.microsoft.com/en-us/library/ms182357.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2225</rule>
    <ruleTitle><![CDATA[Operator overloads have named alternates]]></ruleTitle>
    <ruleDesc><![CDATA[<p>When redefining operators, implement named methods to provide access to the operator functionality from languages that do not support operator overloading. For example, the functionality of the '+' operator should also be accessible using an 'Add' method.</p><a href=http://msdn.microsoft.com/en-us/library/ms182355.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2226</rule>
    <ruleTitle><![CDATA[Operators should have symmetrical overloads]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Overload operators that have related meanings so that their behavior is consistent. For example, when overloading the equality operator, you should also overload the inequality operator to ensure they return opposite results for the same input values.</p><a href=http://msdn.microsoft.com/en-us/library/ms182356.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2227</rule>
    <ruleTitle><![CDATA[Collection properties should be read only]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</p><a href=http://msdn.microsoft.com/en-us/library/ms182327.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2230</rule>
    <ruleTitle><![CDATA[Use params for variable arguments]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Do not use the varargs calling convention to accept a variable number of arguments. In the managed world, the 'params' and 'ParamArray' keywords provide this functionality..</p><a href=http://msdn.microsoft.com/en-us/library/ms182366.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2231</rule>
    <ruleTitle><![CDATA[Overload operator equals on overriding ValueType.Equals]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Value types that redefine System.ValueType.Equals should redefine the equality operator as well to ensure that these members return the same results. This helps ensure that types that rely on Equals (such as ArrayList and Hashtable) behave in a manner that is expected and consistent with the equality operator.</p><a href=http://msdn.microsoft.com/en-us/library/ms182359.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2234</rule>
    <ruleTitle><![CDATA[Pass System.Uri objects instead of strings]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If there are two overloads one taking System.Uri and one taking System.String, library code should never call the string-based overload.</p><a href=http://msdn.microsoft.com/en-us/library/ms182360.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Basic Design Guideline Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on enforcing best practices to make your code easy to understand and use. Include this rule set if your project includes library code or if you want to enforce best practices for easily maintainable code.]]></ruleSetDesc>
    <rule>CA2239</rule>
    <ruleTitle><![CDATA[Provide deserialization methods for optional fields]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If a type contains fields attributed as OptionalField, then it should implement the corresponding special deserialization methods.</p><a href=http://msdn.microsoft.com/en-us/library/ms182362.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Globalization Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on problems that prevent data in your application from displaying correctly when used in different languages, locales, and cultures. Include this rule set if your application is localized and/or globalized.]]></ruleSetDesc>
    <rule>CA1300</rule>
    <ruleTitle><![CDATA[Specify MessageBoxOptions]]></ruleTitle>
    <ruleDesc><![CDATA[<p>In order to run correctly on right-to-left systems, all calls to MessageBox.Show should use the overload that specifies MessageBoxOptions as an argument. Programs should detect whether they are running on a right-to-left system at run-time and pass the appropriate MessageBoxOptions value in order to display correctly.</p><a href=http://msdn.microsoft.com/en-us/library/ms182191.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Globalization Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on problems that prevent data in your application from displaying correctly when used in different languages, locales, and cultures. Include this rule set if your application is localized and/or globalized.]]></ruleSetDesc>
    <rule>CA1301</rule>
    <ruleTitle><![CDATA[Avoid duplicate accelerators]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Controls should have unique accelerators for all items and sub-controls.</p><a href=http://msdn.microsoft.com/en-us/library/ms182185.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Globalization Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on problems that prevent data in your application from displaying correctly when used in different languages, locales, and cultures. Include this rule set if your application is localized and/or globalized.]]></ruleSetDesc>
    <rule>CA1302</rule>
    <ruleTitle><![CDATA[Do not hardcode locale specific strings]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Do not use string literals for system items that have locale-specific designations. Special system locations should be retrieved using provided API such as GetFolderPath. See the System.Environment.SpecialFolder enumeration for more information.</p><a href=http://msdn.microsoft.com/en-us/library/ms182186.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Globalization Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on problems that prevent data in your application from displaying correctly when used in different languages, locales, and cultures. Include this rule set if your application is localized and/or globalized.]]></ruleSetDesc>
    <rule>CA1304</rule>
    <ruleTitle><![CDATA[Specify CultureInfo]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</p><a href=http://msdn.microsoft.com/en-us/library/ms182189.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Globalization Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on problems that prevent data in your application from displaying correctly when used in different languages, locales, and cultures. Include this rule set if your application is localized and/or globalized.]]></ruleSetDesc>
    <rule>CA1305</rule>
    <ruleTitle><![CDATA[Specify IFormatProvider]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</p><a href=http://msdn.microsoft.com/en-us/library/ms182190.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Globalization Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on problems that prevent data in your application from displaying correctly when used in different languages, locales, and cultures. Include this rule set if your application is localized and/or globalized.]]></ruleSetDesc>
    <rule>CA1306</rule>
    <ruleTitle><![CDATA[Set locale for data types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>In most cases, Locale should be explicitly set to CultureInfo.InvariantCulture on DataSet and DataTable instances. Upon creation of a DataSet or DataTable instance, the Locale is set to the current culture. In most cases, the Locale should be set to CultureInfo.InvariantCulture to guarantee proper sorting behavior in all cultures.</p><a href=http://msdn.microsoft.com/en-us/library/ms182188.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Globalization Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on problems that prevent data in your application from displaying correctly when used in different languages, locales, and cultures. Include this rule set if your application is localized and/or globalized.]]></ruleSetDesc>
    <rule>CA1307</rule>
    <ruleTitle><![CDATA[Specify StringComparison]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</p><a href=http://msdn.microsoft.com/en-us/library/bb386080.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Globalization Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on problems that prevent data in your application from displaying correctly when used in different languages, locales, and cultures. Include this rule set if your application is localized and/or globalized.]]></ruleSetDesc>
    <rule>CA1308</rule>
    <ruleTitle><![CDATA[Normalize strings to uppercase]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Strings should be normalized to upper-case.</p><a href=http://msdn.microsoft.com/en-us/library/bb386042.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Globalization Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on problems that prevent data in your application from displaying correctly when used in different languages, locales, and cultures. Include this rule set if your application is localized and/or globalized.]]></ruleSetDesc>
    <rule>CA1309</rule>
    <ruleTitle><![CDATA[Use ordinal StringComparison]]></ruleTitle>
    <ruleDesc><![CDATA[<p>For non-linguistic comparisons, StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase should be used instead of the linguistically-sensitive StringComparison.InvariantCulture.</p><a href=http://msdn.microsoft.com/en-us/library/bb385972.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Globalization Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on problems that prevent data in your application from displaying correctly when used in different languages, locales, and cultures. Include this rule set if your application is localized and/or globalized.]]></ruleSetDesc>
    <rule>CA2101</rule>
    <ruleTitle><![CDATA[Specify marshaling for P/Invoke string arguments]]></ruleTitle>
    <ruleDesc><![CDATA[<p>When marshaling strings as ANSI (or as Auto on Win9x), some characters may be changed. If best-fit mapping is on, strings that appear different in Unicode will be marshaled to identical ANSI strings, which may lead to incorrect security decisions. Turning best-fit mapping off reduces this risk, as all characters without equivalents are mapped to '?'. Also, note that CharSet.Ansi is the default setting for all string marshaling; Unicode marshaling must be specified explicitly, either as a CharSet setting of DllImport or StructLayout, or as a MarshalAs attribute with a Unicode (or system-dependent) UnmanagedType.</p><a href=http://msdn.microsoft.com/en-us/library/ms182319.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Managed Minimum Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on the most critical problems in your code for which Code Analysis is the most accurate.  These rules are small in number and they are intended only to run in limited Visual Studio editions.  Use MinimumRecommendedRules.ruleset with other Visual Studio editions.]]></ruleSetDesc>
    <rule>CA1001</rule>
    <ruleTitle><![CDATA[Types that own disposable fields should be disposable]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Types that declare disposable members should also implement IDisposable. If the type does not own any unmanaged resources, do not implement a finalizer on it.</p><a href=http://msdn.microsoft.com/en-us/library/ms182172.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Managed Minimum Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on the most critical problems in your code for which Code Analysis is the most accurate.  These rules are small in number and they are intended only to run in limited Visual Studio editions.  Use MinimumRecommendedRules.ruleset with other Visual Studio editions.]]></ruleSetDesc>
    <rule>CA1821</rule>
    <ruleTitle><![CDATA[Remove empty finalizers]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Finalizers should be avoided where possible, to avoid the additional performance overhead involved in tracking object lifetime.</p><a href=http://msdn.microsoft.com/en-us/library/bb264476.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Managed Minimum Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on the most critical problems in your code for which Code Analysis is the most accurate.  These rules are small in number and they are intended only to run in limited Visual Studio editions.  Use MinimumRecommendedRules.ruleset with other Visual Studio editions.]]></ruleSetDesc>
    <rule>CA2213</rule>
    <ruleTitle><![CDATA[Disposable fields should be disposed]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If a type that implements IDisposable owns fields that also implement IDisposable, the encapsulating type's Dispose() implementation should call Dispose() on each disposable field.</p><a href=http://msdn.microsoft.com/en-us/library/ms182328.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Managed Minimum Rules</ruleSetName>
    <ruleSetDesc><![CDATA[These rules focus on the most critical problems in your code for which Code Analysis is the most accurate.  These rules are small in number and they are intended only to run in limited Visual Studio editions.  Use MinimumRecommendedRules.ruleset with other Visual Studio editions.]]></ruleSetDesc>
    <rule>CA2231</rule>
    <ruleTitle><![CDATA[Overload operator equals on overriding ValueType.Equals]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Value types that redefine System.ValueType.Equals should redefine the equality operator as well to ensure that these members return the same results. This helps ensure that types that rely on Equals (such as ArrayList and Hashtable) behave in a manner that is expected and consistent with the equality operator.</p><a href=http://msdn.microsoft.com/en-us/library/ms182359.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2102</rule>
    <ruleTitle><![CDATA[Catch non-CLSCompliant exceptions in general handlers]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Exception handlers which are truly intended to catch all exceptions should handle non-CLSCompliant exceptions if there is a possibility one can be raised. If possible, catch handlers should only catch specific exceptions or exception base types. In circumstances where a handler is required to catch all exceptions (e.g., when a try block wraps arbitrary plug-in code), the handler should also include a generic catch handler (in C#, catch{ ... }) to handle non-CLSCompliant exceptions. It is possible to raise non-CLSCompliant exceptions by modifying and recompiling IL.</p><a href=http://msdn.microsoft.com/en-us/library/bb264489.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2103</rule>
    <ruleTitle><![CDATA[Review imperative security]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Use of imperative demands can lead to unforeseen security problems. The values used to construct a permission should not change within the scope of the demand call. For some components the scope spans from the demand call to end of the method; for others it spans from the demand call until the component is finalized. If the values used to construct the permission are fields or properties, they can be changed within the scope of the demand call. This can lead to race conditions, mutable read-only arrays, and problems with boxed value types.</p><a href=http://msdn.microsoft.com/en-us/library/ms182309.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2104</rule>
    <ruleTitle><![CDATA[Do not declare read only mutable reference types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>A read-only declaration for a mutable reference type does not prevent the field's instance data from being modified. For example, a read-only StringBuilder field declaration does not make sense, since the data encapsulated by the StringBuilder can be modified using the read-only reference.</p><a href=http://msdn.microsoft.com/en-us/library/ms182302.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2105</rule>
    <ruleTitle><![CDATA[Array fields should not be read only]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Read-only fields that reference arrays might not give the intended effect. Setting a field which references an array to read-only prevents the value of the field from being changed. Note that elements in the array can be changed. You can ignore this violation if protecting the contents of the array is not a concern.</p><a href=http://msdn.microsoft.com/en-us/library/ms182299.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2106</rule>
    <ruleTitle><![CDATA[Secure asserts]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Asserting a security permission without performing any security checks can leave an exploitable security weakness in your code. A security stack walk stops when a security permission is asserted. If you assert a permission without performing any checks on the caller, the caller might be able to indirectly execute code using your permissions. Asserts without security checks are only permissible when you are certain that the assert cannot be used in a harmful fashion, namely, if the code you call is harmless, or users have no way to pass arbitrary information to code that you call.</p><a href=http://msdn.microsoft.com/en-us/library/ms182314.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2107</rule>
    <ruleTitle><![CDATA[Review deny and permit only usage]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Use of Deny or PermitOnly should be carefully reviewed. Use of Deny or PermitOnly should be carefully considered, as they are not useful in some cases. For example, permissions that are path-based (like FileIOPermission and RegistryPermission) should not be used with Deny, because different paths might actually point to the same location. If callers are granted the right to assert permissions by the security policy, then they can terminate a stack walk before it reaches your Deny or PermitOnly. If a caller has been granted powerful permissions (such as the ability to call unmanaged code), then calling Deny or PermitOnly cannot truly stop it from doing whatever it chooses. Also consider that Deny and PermitOnly do not affect a LinkDemand. For instance, if you deny some permission P and call a method with a LinkDemand for P, the Deny will not affect the result of the LinkDemand.</p><a href=http://msdn.microsoft.com/en-us/library/ms182308.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2108</rule>
    <ruleTitle><![CDATA[Review declarative security on value types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>A Demand or a LinkDemand on a structure does not prevent creation of an instance of that structure.</p><a href=http://msdn.microsoft.com/en-us/library/ms182307.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2109</rule>
    <ruleTitle><![CDATA[Review visible event handlers]]></ruleTitle>
    <ruleDesc><![CDATA[<p>It appears that an event handler is externally visible or that an EventArgs parameter is being exposed in a visible method decorated with a security demand. There can be problems exposing sensitive functionality in an event handler function; the security demand might not do what you expect.</p><a href=http://msdn.microsoft.com/en-us/library/ms182312.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2111</rule>
    <ruleTitle><![CDATA[Pointers should not be visible]]></ruleTitle>
    <ruleDesc><![CDATA[<p>IntPtr and UIntPtr fields should be declared as private. Exposing non-private pointers can cause a security weakness.</p><a href=http://msdn.microsoft.com/en-us/library/ms182306.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2112</rule>
    <ruleTitle><![CDATA[Secured types should not expose fields]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Fields must be secured with a security check other than LinkDemand.</p><a href=http://msdn.microsoft.com/en-us/library/ms182318.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2114</rule>
    <ruleTitle><![CDATA[Method security should be a superset of type]]></ruleTitle>
    <ruleDesc><![CDATA[<p>A method has security set at both the type and method levels. This might not have the intended effect. Security actions on the type level are overridden by security actions on the method level. When employing both type-level and method-level security, type-level security actions that are not also on the method will be ignored when the method executes.</p><a href=http://msdn.microsoft.com/en-us/library/ms182304.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2115</rule>
    <ruleTitle><![CDATA[Call GC.KeepAlive when using native resources]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If a method uses an IntPtr or UIntPtr field in a class with a finalizer and does not call GC.KeepAlive, a race condition might be introduced.</p><a href=http://msdn.microsoft.com/en-us/library/ms182300.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2116</rule>
    <ruleTitle><![CDATA[APTCA methods should only call APTCA methods]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Methods with the AllowPartiallyTrustedCallersAttribute that call methods without that attribute might unintentionally expose functionality to partially trusted code. When a method has the AllowPartiallyTrustedCallersAttribute set, it is callable by partially trusted code. If it in turn calls methods without the attribute, a partially trusted caller is, in effect, being allowed to execute code that requires full trust. Depending on what full trust code is called and what parameter values are passed through from the partially trusted caller, malicious code might be able to exploit this security weakness.</p><a href=http://msdn.microsoft.com/en-us/library/ms182297.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2117</rule>
    <ruleTitle><![CDATA[APTCA types should only extend APTCA base types]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Types with the AllowPartiallyTrustedCallersAttribute that extend types without that attribute might unintentionally expose functionality in the base type to partially trusted callers. When a type has the AllowPartiallyTrustedCallersAttribute set, it is callable by partially trusted code. If the base type does not have this attribute, it requires callers to be fully trusted. If the derived type exposes protected members in the base type, the base type's data is made accessible to partially trusted callers, creating an exploitable security weakness.</p><a href=http://msdn.microsoft.com/en-us/library/ms182298.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2118</rule>
    <ruleTitle><![CDATA[Review SuppressUnmanagedCodeSecurityAttribute usage]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Calling a method with the SuppressUnmanagedCodeSecurityAttribute applied to it can create a security weakness. Unmanaged code security checks ensure that all callers in the call stack have permission to execute unmanaged code. Disabling code security for P/Invoke methods allows callers that do not have this permission to breach security. This is acceptable only if the code is completely harmless, or callers have no way to pass arbitrary arguments through to the unmanaged code.</p><a href=http://msdn.microsoft.com/en-us/library/ms182311.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2119</rule>
    <ruleTitle><![CDATA[Seal methods that satisfy private interfaces]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Externally visible types that implement non-public interfaces should not be extensible. Types that extend public types with non-public interfaces can override interface members. This can compromise object behavior or create a security vulnerability.</p><a href=http://msdn.microsoft.com/en-us/library/ms182313.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2120</rule>
    <ruleTitle><![CDATA[Secure serialization constructors]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Serializable types that have a constructor protected by a security demand must apply the same security demands to the serialization constructor. Apply the demand using declarative security.</p><a href=http://msdn.microsoft.com/en-us/library/ms182317.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2121</rule>
    <ruleTitle><![CDATA[Static constructors should be private]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Non-private static constructors can cause unexpected behaviors, particularly when executed multiple times. This violation can occur if a type declares static data but has not explicitly  declared a static constructor. In this case, some compilers will generate an externally visible static constructor.</p><a href=http://msdn.microsoft.com/en-us/library/ms182320.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2122</rule>
    <ruleTitle><![CDATA[Do not indirectly expose methods with link demands]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</p><a href=http://msdn.microsoft.com/en-us/library/ms182303.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2123</rule>
    <ruleTitle><![CDATA[Override link demands should be identical to base]]></ruleTitle>
    <ruleDesc><![CDATA[<p>If a virtual method has a LinkDemand, in many cases, so should any override of it, and if an override has a LinkDemand, so should the overridden virtual method. Because it is possible to call any of the overrides of a virtual method explicitly, they should all have the same LinkDemand status or, if not, should be reviewed. This also applies to LinkDemand security checks for methods that part of an interface implementation, because the caller might use an interface-typed reference to access the method.</p><a href=http://msdn.microsoft.com/en-us/library/ms182305(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2124</rule>
    <ruleTitle><![CDATA[Wrap vulnerable finally clauses in outer try]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Finally clauses that restore security-related state should be wrapped in an outer try block. This will prevent an exception filter further up the stack from executing before a secure environment can be restored. Exception filters that run code expressions in the first pass after the guarded try blocks and before the associated finally block represent a possible security vulnerability. Examples of vulnerable functionality in finally clauses that should be protected against this include: calls to RevertAssert on an asserted permission, undoing a temporary impersonation, reversing an internal flag that bypasses a security check, and restoring the culture associated with a thread.</p><a href=http://msdn.microsoft.com/en-us/library/ms182322.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2126</rule>
    <ruleTitle><![CDATA[Type link demands require inheritance demands]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Unsealed types secured by a LinkDemand should also specify an InheritanceDemand. Without an InheritanceDemand, the link demand can be circumvented by overriding a method in a derived class.</p><a href=http://msdn.microsoft.com/en-us/library/ms182321.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2130</rule>
    <ruleTitle><![CDATA[Security critical constants should be transparent]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Compilers inline accesses to constants, and as such transparency enforcement is not done for them since there is no runtime access to the field.  These fields should be security transparent so that code reviewers do not assume that transparent code cannot access the constant.</p><a href=http://msdn.microsoft.com/en-us/library/dd997446(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2131</rule>
    <ruleTitle><![CDATA[Security critical types may not participate in type equivalence]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Type equivalence requires that all participating types, as well as all methods and fields within those types, are transparent or security safe-critical.  The CLR will fail to load any type which violates this rule.</p><a href=http://msdn.microsoft.com/en-us/library/dd997564(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2132</rule>
    <ruleTitle><![CDATA[Default constructors must be at least as critical as base type default constructors]]></ruleTitle>
    <ruleDesc><![CDATA[<p>On CoreCLR, if a base type has a public or protected non-transparent default constructor than the derived type must obey default constructor inheritance rules.  The derived type must also have a default constructor and that constructor must be at least as critical as the base type's default constructor.  If the base type's default constructor is safe-critical, the derived type's default constructor must be safe-critical or critical.  If the base type's default constructor is critical, then the derived type's default constructor must also be critical.</p><a href=http://msdn.microsoft.com/en-us/library/dd983956(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2133</rule>
    <ruleTitle><![CDATA[Delegates must bind to methods with consistent transparency]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Delegate types and the methods that they bind to must have consistent transparency.  Transparent and safe-critical delegates may only bind to other transparent or safe-critical methods.  Similarly, critical delegates may only bind to critical methods.  These binding rules ensure that the only code which can invoke a method via a delegate could have also invoked the same method directly.  It prevents, for instance, transparent code from calling critical code directly via a transparent delegate.</p><a href=http://msdn.microsoft.com/en-us/library/dd997710(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2134</rule>
    <ruleTitle><![CDATA[Methods must keep consistent transparency when overriding base methods]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Transparency visibility must be preserved between overriding methods and the methods that are being overridden.  If the virtual method being overridden or interface method being implemented is security safe-critical or security transparent, then the overriding method must also be either security safe-critical or security transparent.  Similarly, if the method being overridden is security critical, the overriding method must be security critical.</p><a href=http://msdn.microsoft.com/en-us/library/dd997447(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2135</rule>
    <ruleTitle><![CDATA[Level 2 assemblies should not contain LinkDemands]]></ruleTitle>
    <ruleDesc><![CDATA[<p>LinkDemands are deprecated in the level 2 security rule set.  Instead of using LinkDemands to enforce JIT time security, SecurityCritical methods, types, and fields should be used instead.</p><a href=http://msdn.microsoft.com/en-us/library/dd997569(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2136</rule>
    <ruleTitle><![CDATA[Members should not have conflicting transparency annotations]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Transparency attributes are applied from larger scopes inward.  For instance, if a type is marked as entirely security critical, than all methods introduced by the type will also be security critical.  Members should not have transparency annotations which conflict with larger scoped annotations, as these smaller scoped annotations will be ignored by the CLR and can be misleading during a code review.  Methods not introduced by their type, such as virtual methods being overridden from a base type or interface methods being implemented, do have their annotations considered under the level 2 security rule set and are not considered by this rule.</p><a href=http://msdn.microsoft.com/en-us/library/bb264493(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2137</rule>
    <ruleTitle><![CDATA[Transparent methods must contain only verifiable IL]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Transparent code must be fully verifiable.  This rule looks for any use of pointer types to check for unverifiable code, however it is not a complete verifier and PEVerify / transparent must be run on assemblies to ensure that all of their transparent code is verifiable.</p><a href=http://msdn.microsoft.com/en-us/library/dd983954(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2138</rule>
    <ruleTitle><![CDATA[Transparent methods must not call methods with the SuppressUnmanagedCodeSecurity attribute]]></ruleTitle>
    <ruleDesc><![CDATA[<p>P/Invoke and COM interop methods with the SuppressUnmanagedCodeSecurity attribute result in a LinkDemand being done against the calling method.  Since security transparent code may not satisfy LinkDemands, it may also not call methods with SuppressUnmanagedCodeSecurity either on the method itself or on the type containing the method.</p><a href=http://msdn.microsoft.com/en-us/library/dd997711(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2139</rule>
    <ruleTitle><![CDATA[Transparent methods may not use the HandleProcessCorruptingExceptions attribute]]></ruleTitle>
    <ruleDesc><![CDATA[<p>The HandleProcessCorruptingExceptions attribute may only be used by security critical methods, and will not be honored if it is applied to a transparent method.</p><a href=http://msdn.microsoft.com/en-us/library/dd997565(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2140</rule>
    <ruleTitle><![CDATA[Transparent code must not reference security critical items]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Transparent code cannot refer to security critical methods, types, or fields.  At runtime these references will result in MemberAccessExceptions or TypeLoadExceptions.</p><a href=http://msdn.microsoft.com/en-us/library/bb264475(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2141</rule>
    <ruleTitle><![CDATA[Transparent methods must not satisfy LinkDemands]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Satisfying a LinkDemand is a security sensitive operation which can cause unintentional elevation of privilege.  Security transparent code must not satisfy LinkDemands, since it is not subject to the same security audit requirements as security critical code.  Transparent methods is security rule set level 1 assemblies will cause all LinkDemands they satisfy to be converted to full demands at runtime, which can cause performance problems.  In security rule set level 2 assemblies, transparent methods will fail to JIT if they attempt to satisfy a LinkDemand.</p><a href=http://msdn.microsoft.com/en-us/library/dd997445(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2142</rule>
    <ruleTitle><![CDATA[Transparent code should not be protected with LinkDemands]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Security transparent code should not be responsible for verifying the security of an operation, and therefore should not be protected from partial trust callers with LinkDemands.</p><a href=http://msdn.microsoft.com/en-us/library/dd997567(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2143</rule>
    <ruleTitle><![CDATA[Transparent methods should not use security demands]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Security transparent code should not be responsible for verifying the security of an operation, and therefore should not demand permissions.  Any code which is performing security checks, such as security demands, should be safe-critical instead.</p><a href=http://msdn.microsoft.com/en-us/library/dd997566(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2144</rule>
    <ruleTitle><![CDATA[Transparent code should not load assemblies from byte arrays]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Assemblies loaded from byte arrays inherit the grant set of the loading assembly.  Since this means that the loaded assembly may be fully trusted, any calls to load from byte array from trusted code should be reviewed to ensure that it is secure.  Transparent code is not subjected to the same audit scrutiny as critical code, and therefore should not load assemblies from byte arrays.</p><a href=http://msdn.microsoft.com/en-us/library/dd997568(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2145</rule>
    <ruleTitle><![CDATA[Transparent methods should not be decorated with the SuppressUnmanagedCodeSecurityAttribute]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Methods decorated with the SuppressUnmanagedCodeSecurity attribute have an implicit LinkDemand placed upon all of their callers.  This LinkDemand requires that the calling code be security critical.  Marking the method which uses SuppressUnmanagedCodeSecurity as security critical makes this requirement more obvious for callers of the method.</p><a href=http://msdn.microsoft.com/en-us/library/dd997570(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Trivial</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2146</rule>
    <ruleTitle><![CDATA[Types must be at least as critical as their base types and interfaces]]></ruleTitle>
    <ruleDesc><![CDATA[<p>While any type may derive from a transparent type or interface, restrictions apply as to the types that can inherit from or implement safe-critical or critical types.  Only safe-critical or critical types may derive from or implement safe-critical interfaces and base types.  Only critical types may derive from or implement critical interfaces and base types.</p><a href=http://msdn.microsoft.com/en-us/library/dd997443(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2147</rule>
    <ruleTitle><![CDATA[Transparent code may not use security asserts]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Transparent code may not use security asserts, since asserting permissions can result in elevating the effective permissions of the call stack.  Transparent code which attempts to assert will receive an InvalidOperationException at runtime.</p><a href=http://msdn.microsoft.com/en-us/library/bb264482(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2149</rule>
    <ruleTitle><![CDATA[Transparent methods must not call into native code]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Transparent code may not call native code directly.  This rule looks for any transparent code which calls a method stub (such as a P/Invoke declaration) which is really a direct call into native code.</p><a href=http://msdn.microsoft.com/en-us/library/ee155709(VS.100).aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Major</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>Microsoft Security Rules</ruleSetName>
    <ruleSetDesc><![CDATA[This rule set contains all Microsoft security rules. Include this rule set to maximize the number of potential security issues that are reported.]]></ruleSetDesc>
    <rule>CA2210</rule>
    <ruleTitle><![CDATA[Assemblies should have valid strong names]]></ruleTitle>
    <ruleDesc><![CDATA[<p>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</p><a href=http://msdn.microsoft.com/en-us/library/ms182127.aspx target="_blank">Link to Microsoft Document<a>]]></ruleDesc>
    <ruleSeverity>Critical</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA0001</rule>
    <ruleTitle><![CDATA[XML comment analysis disabled]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA0001</h1>
<table>
<tr>
  <td>TypeName</td>
  <td>SA0001XmlCommentAnalysisDisabled</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA0001</td>
</tr>
<tr>
  <td>Category</td>
  <td>Special Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>All diagnostics of XML documentation comments has been disabled due to the current project configuration.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a compilation (project) contains one or more files which are parsed with the
<code>DocumentationMode</code> set to <code>None</code>. This most frequently occurs when the project is configured to not produce an
XML documentation file during the build.</p>
<p>Each project should be configured to include an XML documentation file with the compiled output. Otherwise, the
semantics of all documentation comments are not checked and comments are likely to contain an increasing number of
errors over time.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, enable the XML documentation file as part of the project output.</p>
<p><strong>Note:</strong> In some cases, enabling XML documentation output will produce a large number of warnings CS1573, CS1591,
and/or CS1712 to be reported. To improve the ability of teams to resolve SA0001 before CS1573, CS1591, and CS1712,
consider disabling these warnings by one of the following methods.</p>
<h3>Suppression via rule set files</h3>
<p>CS1573, CS1591, and CS1712 are most easily suppressed by editing the rule set file. The severity of these rules may be
set to <strong>Hidden</strong> or <strong>None</strong> to hide them from the build output. When set to <strong>Hidden</strong>, code fixes for these
diagnostics as a documentation aid will function normally, but the warnings themselves will be hidden from view.</p>
<h3>Suppression via the project file</h3>
<p>For users who sometimes build their project with older versions of C# (which do not support rule set files), these
warnings may be suppressed by configuring the <code>&lt;NoWarn&gt;</code> element in the project file. One easy way to configure both
the documentation output (which corrects SA0001) and the suppressions for CS1573, CS1591, and CS1712 is to add the
following property group to the project file.</p>
<pre><code class="language-xml">&lt;PropertyGroup&gt;
  loadFrom

  &lt;DocumentationFile&gt;$(OutputPath)$(AssemblyName).xml&lt;/DocumentationFile&gt;
  &lt;NoWarn&gt;$(NoWarn),1573,1591,1712&lt;/NoWarn&gt;
&lt;/PropertyGroup&gt;
</code></pre>
<h2>How to suppress violations</h2>
<p>This warning can only be suppressed by disabling the warning in the <strong>ruleset</strong> file for the project.</p>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA0002</rule>
    <ruleTitle><![CDATA[Invalid settings file]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA0002</h1>
<table>
<tr>
  <td>TypeName</td>
  <td>SA0002InvalidSettingsFile</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA0002</td>
</tr>
<tr>
  <td>Category</td>
  <td>Special Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>The <strong>stylecop.json</strong> settings file could not be loaded due to a deserialization error.</p>
<h2>Rule description</h2>
<p>This rule reports cases where the StyleCop Analyzers settings file could not be loaded. When this occurs, the various
analyzers automatically fall back to using the default settings, which may not match the user's expectations.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, start by checking the following items:</p>
<ul>
<li>Ensure <em>stylecop.json</em> contains valid JSON syntax. The file may be opened in Visual Studio 2015 to check for
common errors (they are reported by the IDE in the Errors window).</li>
<li>Review the <a href="Configuration.md">configuration</a> documentation and ensure the contents of <em>stylecop.json</em> contain
valid settings.</li>
</ul>
<h2>How to suppress violations</h2>
<p>This warning can only be suppressed by disabling the warning in the <strong>ruleset</strong> file for the project.</p>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1000</rule>
    <ruleTitle><![CDATA[Keywords should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1000</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1000KeywordsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1000</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The spacing around a C# keyword is incorrect.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around a keyword is incorrect.</p>
<p>The following C# keywords should always be followed by a single space: <code>await</code>, <code>case</code>, <code>catch</code>, <code>fixed</code>, <code>for</code>,
<code>foreach</code>, <code>from</code>, <code>group</code>, <code>if</code>, <code>in</code>, <code>into</code>, <code>join</code>, <code>let</code>, <code>lock</code>, <code>orderby</code>, <code>out</code>, <code>ref</code>, <code>return</code>, <code>select</code>,
<code>switch</code>, <code>using</code>, <code>var</code>, <code>where</code>, <code>while</code>, <code>yield</code>.</p>
<p>The following keywords should not be followed by any space: <code>checked</code>, <code>default</code>, <code>sizeof</code>, <code>typeof</code>, <code>unchecked</code>.</p>
<p>The <code>new</code> and <code>stackalloc</code> keywords should always be followed by a space, except in the following cases:</p>
<ul>
<li>The <code>new</code> or <code>stackalloc</code> keyword is used to create a new implicitly-typed array. In this case there should be no
space between the keyword and the opening array bracket.</li>
<li>The <code>new</code> keyword is part of a generic type constraint. In this case there should be no space between the <code>new</code>
keyword and the opening parenthesis.</li>
</ul>
<p>The <code>throw</code> keyword should always be followed by a space, unless it is part of a re-throw statement, in which case there
should be no space between the <code>throw</code> keyword and the semicolon.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add or remove a space after the keyword, according to the description above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1000:KeywordsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1000 // KeywordsMustBeSpacedCorrectly
#pragma warning restore SA1000 // KeywordsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1001</rule>
    <ruleTitle><![CDATA[Commas should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1001</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1001CommasMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1001</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The spacing around a comma is incorrect, within a C# code file.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around a comma is incorrect.</p>
<p>A comma should be followed by a single space, except in the following cases.</p>
<ul>
<li>A comma may appear at the end of a line</li>
<li>A comma should not be followed by a space when used in an open generic type in a <code>typeof</code> expression</li>
<li>A comma is part of a string interpolation alignment component. For example:<code>$&quot;{x,3}&quot;</code></li>
</ul>
<p>A comma should never be preceded by a space or appear as the first token on a line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the comma is followed by a single space, and is not preceded by any space.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1001:CommasMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1001 // CommasMustBeSpacedCorrectly
#pragma warning restore SA1001 // CommasMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1002</rule>
    <ruleTitle><![CDATA[Semicolons should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1002</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1002SemicolonsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1002</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The spacing around a semicolon is incorrect, within a C# code file.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around a semicolon is incorrect.</p>
<p>A semicolon should always be followed by a single space, except in the following cases:</p>
<ul>
<li>The semicolon is the last character on the line</li>
<li>The semicolon followed by a closing parenthesis</li>
</ul>
<p>A semicolon should never be preceded by any whitespace, unless it is the first character on the line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the semicolon is followed by a single space, and is not preceded by any space.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1002:SemicolonsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1002 // SemicolonsMustBeSpacedCorrectly
#pragma warning restore SA1002 // SemicolonsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1003</rule>
    <ruleTitle><![CDATA[Symbols should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1003</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1003SymbolsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1003</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The spacing around an operator symbol is incorrect, within a C# code file.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around an operator symbol is incorrect.</p>
<p>The following types of operator symbols should be surrounded by a single space on either side: colons, arithmetic
operators, assignment operators, conditional operators, logical operators, relational operators, shift operators, and
lambda operators. For example:</p>
<pre><code class="language-csharp">int x = 4 + y;
</code></pre>
<p>In contrast, unary operators should be preceded by a single space, but should never be followed by any space. For example:</p>
<pre><code class="language-csharp">bool x = !value;
</code></pre>
<p>An exception occurs whenever the symbol is preceded or followed by a parenthesis or bracket, in which case there should
be no space between the symbol and the bracket. For example:</p>
<pre><code class="language-csharp">if (!value)
{
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the spacing around the symbol follows the rule described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1003:SymbolsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1003 // SymbolsMustBeSpacedCorrectly
#pragma warning restore SA1003 // SymbolsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1004</rule>
    <ruleTitle><![CDATA[Documentation lines should begin with single space]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1004</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1004DocumentationLinesMustBeginWithSingleSpace</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1004</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A line within a documentation header above a C# element does not begin with a single space.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a line within a documentation header does not begin with a single space. For example:</p>
<pre><code class="language-csharp">///&lt;summary&gt;
///The summary text.
///&lt;/summary&gt;
///   &lt;param name=&quot;x&quot;&gt;The document root.&lt;/param&gt;
///    &lt;param name=&quot;y&quot;&gt;The Xml header token.&lt;/param&gt;
private void Method1(int x, int y)
{
}
</code></pre>
<p>The header lines should begin with a single space after the three leading forward slashes:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// The summary text.
/// &lt;/summary&gt;
/// &lt;param name=&quot;x&quot;&gt;The document root.&lt;/param&gt;
/// &lt;param name=&quot;y&quot;&gt;The Xml header token.&lt;/param&gt;
private void Method1(int x, int y)
{
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the header line begins with a single space.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1004:DocumentationLinesMustBeginWithSingleSpace&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1004 // DocumentationLinesMustBeginWithSingleSpace
#pragma warning restore SA1004 // DocumentationLinesMustBeginWithSingleSpace
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1005</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1005SingleLineCommentsMustBeginWithSingleSpace</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1005</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A single-line comment within a C# code file does not begin with a single space.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a single-line comment does not begin with a single space. For example:</p>
<pre><code class="language-csharp">private void Method1()
{
    //A single-line comment.
    //   A single-line comment.
}
</code></pre>
<p>The comments should begin with a single space after the leading forward slashes:</p>
<pre><code class="language-csharp">private void Method1()
{
    // A single-line comment.
    // A single-line comment.
}
</code></pre>
<p>An exception to this rule occurs when the comment is being used to comment out a line of code. In this case, the space can be omitted if the comment begins with four forward slashes to indicate out-commented code. For example:</p>
<pre><code class="language-csharp">private void Method1()
{
    ////int x = 2;
    ////return x;
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the comment begins with a single space. If the comment is being used to comment out a line of code, ensure that the comment begins with four forward slashes, in which case the leading space can be omitted.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1005:SingleLineCommentsMustBeginWithSingleSpace&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1005 // SingleLineCommentsMustBeginWithSingleSpace
#pragma warning restore SA1005 // SingleLineCommentsMustBeginWithSingleSpace
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1006</rule>
    <ruleTitle><![CDATA[Preprocessor keywords should not be preceded by space]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1006</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1006PreprocessorKeywordsMustNotBePrecededBySpace</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1006</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# preprocessor-type keyword is preceded by space.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the preprocessor-type keyword in a preprocessor directive is preceded by space. For example:</p>
<pre><code class="language-csharp"># if Debug
</code></pre>
<p>There should not be any whitespace between the opening hash mark and the preprocessor-type keyword:</p>
<pre><code class="language-csharp">#if Debug
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that there is no whitespace between the opening hash mark and the preprocessor-type keyword.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1006:PreprocessorKeywordsMustNotBePrecededBySpace&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1006 // PreprocessorKeywordsMustNotBePrecededBySpace
#pragma warning restore SA1006 // PreprocessorKeywordsMustNotBePrecededBySpace
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1007</rule>
    <ruleTitle><![CDATA[Operator keyword should be followed by space]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1007</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1007OperatorKeywordMustBeFollowedBySpace</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1007</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The operator keyword within a C# operator overload method is not followed by any whitespace.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the operator keyword within an operator overload method is not followed by any whitespace. The operator keyword should always be followed by a single space. For example:</p>
<pre><code class="language-csharp">public MyClass operator +(MyClass a, MyClass b)
{
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add a single space after the operator keyword.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1007:OperatorKeywordMustBeFollowedBySpace&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1007 // OperatorKeywordMustBeFollowedBySpace
#pragma warning restore SA1007 // OperatorKeywordMustBeFollowedBySpace
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1008</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1008OpeningParenthesisMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1008</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An opening parenthesis within a C# statement is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the opening parenthesis within a statement is not spaced correctly. An opening parenthesis should not be preceded by any whitespace, unless it is the first character on the line, or it is preceded by certain C# keywords such as if, while, or for. In addition, an opening parenthesis is allowed to be preceded by whitespace when it follows an operator symbol within an expression.</p>
<p>An opening parenthesis should not be followed by whitespace, unless it is the last character on the line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the spacing around the opening parenthesis follows the rule described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1008:OpeningParenthesisMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1008 // OpeningParenthesisMustBeSpacedCorrectly
#pragma warning restore SA1008 // OpeningParenthesisMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1009</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1009ClosingParenthesisMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1009</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A closing parenthesis within a C# statement is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the closing parenthesis within a statement is not spaced correctly.</p>
<p>A closing parenthesis should never be preceded by whitespace. In most cases, a closing parenthesis should be followed by a single space, unless the closing parenthesis comes at the end of a cast, or the closing parenthesis is followed by certain types of operator symbols, such as positive signs, negative signs, and colons.</p>
<p>If the closing parenthesis is followed by whitespace, the next non-whitespace character should not be an opening or closing parenthesis or square bracket, or a semicolon or comma.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the spacing around the closing parenthesis follows the rule described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1009:ClosingParenthesisMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1009 // ClosingParenthesisMustBeSpacedCorrectly
#pragma warning restore SA1009 // ClosingParenthesisMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1010</rule>
    <ruleTitle><![CDATA[Opening square brackets should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1010</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1010OpeningSquareBracketsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1010</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An opening square bracket within a C# statement is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when an opening square bracket within a statement is preceded or followed by whitespace.</p>
<p>An opening square bracket should never be preceded by whitespace, unless it is the first character on the line, and an opening square should never be followed by whitespace, unless it is the last character on the line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that there is no whitespace on either side of the opening square bracket.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1010:OpeningSquareBracketsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1010 // OpeningSquareBracketsMustBeSpacedCorrectly
#pragma warning restore SA1010 // OpeningSquareBracketsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1011</rule>
    <ruleTitle><![CDATA[Closing square brackets should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1011</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1011ClosingSquareBracketsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1011</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A closing square bracket within a C# statement is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around a closing square bracket is not correct.</p>
<p>A closing square bracket should never be preceded by whitespace, unless it is the first character on the line.</p>
<p>A closing square bracket should be followed by whitespace unless:</p>
<ul>
<li>It is the last character on the line</li>
<li>It is followed by a closing bracket or an opening parenthesis</li>
<li>It is followed by a comma or semicolon</li>
<li>It is followed by a string interpolation alignment component. For example: <code>$&quot;{x[i]:C}&quot;</code></li>
<li>It is followed by a string interpolation formatting component. For example: <code>$&quot;{x[i],3}&quot;</code></li>
<li>It is followed by certain types of operator symbols.</li>
</ul>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the spacing around the closing square bracket follows the rule described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1011:ClosingSquareBracketsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1011 // ClosingSquareBracketsMustBeSpacedCorrectly
#pragma warning restore SA1011 // ClosingSquareBracketsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1012</rule>
    <ruleTitle><![CDATA[Opening braces should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1012</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1012OpeningBracesMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1012</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An opening brace within a C# element is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around an opening brace is not correct.</p>
<p>An opening brace should always be preceded by a single space, unless it is the first character on the line, or unless it is preceded by an opening parenthesis, in which case there should be no space between the parenthesis and the brace.</p>
<p>An opening brace should always be followed by a single space, unless it is the last character on the line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the spacing around the opening brace follows the rule described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1012:OpeningBracesMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1012 // OpeningBracesMustBeSpacedCorrectly
#pragma warning restore SA1012 // OpeningBracesMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1013</rule>
    <ruleTitle><![CDATA[Closing braces should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1013</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1013ClosingBracesMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1013</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A closing brace within a C# element is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around a closing brace is not correct.</p>
<p>A closing brace should always be followed by a single space, unless it is the last character on the line, or unless it is followed by a closing parenthesis, a comma, or a semicolon.</p>
<p>A closing brace should always be preceded by a single space, unless it is the first character on the line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the spacing around the closing brace follows the rule described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1013:ClosingBracesMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1013 // ClosingBracesMustBeSpacedCorrectly
#pragma warning restore SA1013 // ClosingBracesMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1014</rule>
    <ruleTitle><![CDATA[Opening generic brackets should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1014</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1014OpeningGenericBracketsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1014</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An opening generic bracket within a C# element is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around an opening generic bracket is not correct.</p>
<p>An opening generic bracket should never be preceded or followed by whitespace, unless the bracket is the first or last character on the line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that there is no whitespace on either side of the opening generic bracket.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1014:OpeningGenericBracketsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1014 // OpeningGenericBracketsMustBeSpacedCorrectly
#pragma warning restore SA1014 // OpeningGenericBracketsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1015</rule>
    <ruleTitle><![CDATA[Closing generic brackets should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1015</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1015ClosingGenericBracketsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1015</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A closing generic bracket within a C# element is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around a closing generic bracket is not correct.</p>
<p>A closing generic bracket should never be preceded by whitespace, unless the bracket is the first character on the line.
A closing generic bracket should be followed by an open parenthesis, a close
parenthesis, a closing generic bracket, a nullable symbol, an end of
line or a single whitespace (but not whitespace and an open parenthesis).</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure the whitespace around the closing generic bracket
is correct.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1015:ClosingGenericBracketsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1015 // ClosingGenericBracketsMustBeSpacedCorrectly
#pragma warning restore SA1015 // ClosingGenericBracketsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1016</rule>
    <ruleTitle><![CDATA[Opening attribute brackets should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1016</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1016OpeningAttributeBracketsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1016</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An opening attribute bracket within a C# element is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around an opening attribute bracket is not correct.</p>
<p>An opening attribute bracket should never be followed by whitespace, unless the bracket is the last character on the line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that there is no whitespace after the opening attribute bracket.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1016:OpeningAttributeBracketsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1016 // OpeningAttributeBracketsMustBeSpacedCorrectly
#pragma warning restore SA1016 // OpeningAttributeBracketsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1017</rule>
    <ruleTitle><![CDATA[Closing attribute brackets should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1017</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1017ClosingAttributeBracketsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1017</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A closing attribute bracket within a C# element is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around a closing attribute bracket is not correct.</p>
<p>A closing attribute bracket should never be preceded by whitespace, unless the bracket is the first character on the line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that there is no whitespace before the closing attribute bracket.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1017:ClosingAttributeBracketsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1017 // ClosingAttributeBracketsMustBeSpacedCorrectly
#pragma warning restore SA1017 // ClosingAttributeBracketsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1018</rule>
    <ruleTitle><![CDATA[Nullable type symbols should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1018</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1018NullableTypeSymbolsMustNotBePrecededBySpace</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1018</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A nullable type symbol within a C# element is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around a nullable type symbol is not correct.</p>
<p>A nullable type symbol should never be preceded by whitespace, unless the symbol is the first character on the line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that there is no whitespace before the nullable type symbol.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1018:NullableTypeSymbolsMustNotBePrecededBySpace&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1018 // NullableTypeSymbolsMustNotBePrecededBySpace
#pragma warning restore SA1018 // NullableTypeSymbolsMustNotBePrecededBySpace
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1019</rule>
    <ruleTitle><![CDATA[Member access symbols should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1019</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1019MemberAccessSymbolsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1019</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The spacing around a member access symbol is incorrect, within a C# code file.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around a member access symbol is incorrect. A member access symbol should not have whitespace on either side, unless it is the first character on the line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the member access symbol is not surrounded by any whitespace.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1019:MemberAccessSymbolsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1019 // MemberAccessSymbolsMustBeSpacedCorrectly
#pragma warning restore SA1019 // MemberAccessSymbolsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1020</rule>
    <ruleTitle><![CDATA[Increment decrement symbols should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1020</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1020IncrementDecrementSymbolsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1020</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An increment or decrement symbol within a C# element is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around an increment or decrement symbol is not correct.</p>
<p>There should be no whitespace between the increment or decrement symbol and the item that is being incremented or decremented.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that there is no whitespace between the increment or decrement symbol and the item that is being incremented or decremented.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1020:IncrementDecrementSymbolsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1020 // IncrementDecrementSymbolsMustBeSpacedCorrectly
#pragma warning restore SA1020 // IncrementDecrementSymbolsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1021</rule>
    <ruleTitle><![CDATA[Negative signs should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1021</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1021NegativeSignsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1021</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A negative sign within a C# element is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around a negative sign is not correct.</p>
<p>A negative sign should always be preceded by a single space, unless it comes after an opening square bracket, a parenthesis, a brace of an interpolated string, is the first character on the line, or is part of a string interpolation alignment component.</p>
<p>A negative sign should never be followed by whitespace, and should never be the last character on a line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the spacing around the negative sign follows the rule described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1021:NegativeSignsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1021 // NegativeSignsMustBeSpacedCorrectly
#pragma warning restore SA1021 // NegativeSignsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1022</rule>
    <ruleTitle><![CDATA[Positive signs should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1022</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1022PositiveSignsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1022</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A positive sign within a C# element is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around a positive sign is not correct.</p>
<p>A positive sign should always be preceded by a single space, unless it comes after an opening square bracket, a parenthesis, a brace of an interpolated string, is the first character on the line, or is part of a string interpolation alignment component.</p>
<p>A positive sign should never be followed by whitespace, and should never be the last character on a line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the spacing around the positive sign follows the rule described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1022:PositiveSignsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1022 // PositiveSignsMustBeSpacedCorrectly
#pragma warning restore SA1022 // PositiveSignsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1023</rule>
    <ruleTitle><![CDATA[Dereference and access of symbols should be spaced correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1023</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1023DereferenceAndAccessOfMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1023</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A dereference symbol or an access-of symbol within a C# element is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around a dereference or access-of symbol is not correct.</p>
<p>The spacing around the symbol depends upon whether the symbol is used within a type declaration. If so, the symbol should always be followed by a single space, unless it is the last character on the line, or is followed by an opening square bracket or a parenthesis. In addition, the symbol should not be preceded by whitespace, and should not be the first character on the line. An example of a properly spaced dereference symbol used within a type declaration is:</p>
<pre><code class="language-csharp">object* x = null;
</code></pre>
<p>When a dereference or access-of symbol is used outside of a type declaration, the opposite rule applies. In this case, the symbol should always be preceded by a single space, unless it is the first character on the line, or is preceded by an opening square bracket, a parenthesis or a symbol of the same type i.e. an equals. The symbol should not be followed by whitespace, and should not be the last character on the line. For example:</p>
<pre><code class="language-csharp">y = *x;
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the spacing around the dereference or address-of symbol follows the rule described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1023:DereferenceAndAccessOfMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1023 // DereferenceAndAccessOfMustBeSpacedCorrectly
#pragma warning restore SA1023 // DereferenceAndAccessOfMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1024</rule>
    <ruleTitle><![CDATA[Colons Should Be Spaced Correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1024</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1024ColonsMustBeSpacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1024</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A colon within a C# element is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the spacing around a colon is not correct.</p>
<p>The spacing around a colon depends upon the type of colon and how it is used within the code. A colon appearing within an element declaration should always have a single space on either side, unless it is the first or last character on the line. For example all of the colons below follow this rule:</p>
<pre><code class="language-csharp">public class Class2&lt;T&gt; : Class1 where T : MyType
{
    public Class2(int x) : base(x)
    {
    }
}
</code></pre>
<p>When the colon comes at the end of a label or case statement, it should always be followed by whitespace or be the last character on the line, but should never be preceded by whitespace. For example:</p>
<pre><code class="language-csharp">_label:
switch (x)
{
    case 2: 
        return x;
}
</code></pre>
<p>A colon that appears as part of a string interpolation formatting component should not have leading whitespace characters. For example:</p>
<pre><code class="language-csharp">var s = $&quot;{x:N}&quot;;
</code></pre>
<p>Finally, when a colon is used within a conditional statement, it should always contain a single space on either side, unless the colon is the first or last character on the line. For example:</p>
<pre><code class="language-csharp">int x = y ? 2 : 3;
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the spacing around the colon follows the rule described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1024:ColonsMustBeSpacedCorrectly&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1024 // ColonsMustBeSpacedCorrectly
#pragma warning restore SA1024 // ColonsMustBeSpacedCorrectly
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1025</rule>
    <ruleTitle><![CDATA[Code should not contain multiple whitespace in a row]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1025</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1025CodeMustNotContainMultipleWhitespaceInARow</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1025</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The code contains multiple whitespace characters in a row.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever the code contains multiple whitespace characters in a row, unless the
characters come at the beginning or end of a line of code, following a comma or semicolon or preceding a symbol.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the extra whitespace characters are leave only a single space.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1025:CodeMustNotContainMultipleWhitespaceInARow&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1025 // CodeMustNotContainMultipleWhitespaceInARow
#pragma warning restore SA1025 // CodeMustNotContainMultipleWhitespaceInARow
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1026</rule>
    <ruleTitle><![CDATA[Code should not contain space after new or stackalloc keyword in implicitly typed array allocation]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA1026</h1>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1026CodeMustNotContainSpaceAfterNewKeywordInImplicitlyTypedArrayAllocation</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1026</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An implicitly typed array allocation within a C# code file is not spaced correctly.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever the code contains an implicitly-typed array allocation which is not spaced correctly. Within an implicitly typed array allocation, there should not be any space or a blank line between the <code>new</code> or <code>stackalloc</code> keyword and the opening array bracket. For example:</p>
<pre><code class="language-csharp">var a = new[] { 1, 10, 100, 1000 };
Span&lt;int&gt; a = stackalloc[] { 1, 10, 100, 1000 };
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove any whitespace between the <code>new</code> or <code>stackalloc</code> keyword and the opening array bracket.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SA1026 // Code should not contain space after new or stackalloc keyword in implicitly typed array allocation
var ints = new [] { 1, 2, 3 };
#pragma warning restore SA1026 // Code should not contain space after new or stackalloc keyword in implicitly typed array allocation
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1027</rule>
    <ruleTitle><![CDATA[Use tabs correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1027</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1027UseTabsCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1027</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The code contains a tab or space character which is not consistent with the current project settings.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever the code contains a tab or space character which is not consistent with the
current project settings. By default, StyleCop Analyzers does not expect code to contain any tab characters. See
<a href="Configuration.md">Configuration.md</a> for information about changing this behavior via <strong>stylecop.json</strong>.</p>
<p>In all configurations, this violation is always reported for tab characters that appear after the first non-whitespace
character on a line. When tab characters are used in these positions, it is not possible to ensure that varying tab
widths do not change the layout of code. See <a href="https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/2035">Issue #2035</a>
for more information.</p>
<h3>Default behavior</h3>
<p>The default behavior matches the behavior of StyleCop Classic, which was based on the following rationale.</p>
<blockquote>
<p>Tabs should not be used within C# code, because the length of the tab character can vary depending upon the editor being
used to view the code. This can cause the spacing and indexing of the code to vary from the developer's original
intention, and can in some cases make the code difficult to read.</p>
<p>For these reasons, tabs should not be used, and each level of indentation should consist of four spaces. This will
ensure that the code looks the same no matter which editor is being used to view the code.</p>
</blockquote>
<h3>Exclusions</h3>
<p>To avoid unintentionally changing the behavior of code, this violation is never reported in the following scenarios.</p>
<ul>
<li>
<p>String literals, including interpolated string literals in C# 6</p>
</li>
<li>
<p>Character literals</p>
</li>
<li>
<p>Commented code (line comments starting with <code>////</code>). This ensures that literals within commented code are not changed.</p>
</li>
<li>
<p>Disabled text</p>
<pre><code class="language-csharp">#if DEBUG
This is ignored in debug configurations
#else
This is ignored in release configurations
#endif
</code></pre>
</li>
</ul>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, use spaces or tabs to indent lines according to the project settings, and avoid the use
of tabs aside from indentation.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.SpacingRules&quot;, &quot;SA1027:TabsMustNotBeUsed&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1027 // TabsMustNotBeUsed
#pragma warning restore SA1027 // TabsMustNotBeUsed
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA1028</h1>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1028CodeMustNotContainTrailingWhitespace</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1028</td>
</tr>
<tr>
  <td>Category</td>
  <td>Spacing Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>A line of code ends with a space, tab, or other whitespace characters before the end of line character(s).</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a line of code ends with any form of whitespace other than the end of line character(s). Extra whitespace can show up in editors with visible whitespace, or cause unnecessary code churn when developers format the document such that trailing whitespace is removed later. Some diff tools even highlight trailing whitespace to encourage developers to trim it.</p>
<h3>Detailed Behavior</h3>
<p>The C# language contains several constructs which span multiple lines of code. The following table describes the behavior of this rule with respect to each of these constructs.</p>
<table>
<thead>
<tr>
<th>Construct</th>
<th>Analysis Enabled</th>
</tr>
</thead>
<tbody>
<tr>
<td>&quot;Normal&quot; code</td>
<td>✔</td>
</tr>
<tr>
<td>Line comments (starting with <code>// ...</code>)</td>
<td>✔</td>
</tr>
<tr>
<td>Inside block comments (<code>/* ... */</code>)</td>
<td>✔</td>
</tr>
<tr>
<td>Single-line documentation comments (<code>/// ...</code>)</td>
<td>✔</td>
</tr>
<tr>
<td>Multi-line documentation comments (<code>/** ... */</code>)</td>
<td>✔</td>
</tr>
<tr>
<td>Preprocessor directives (<code>#if</code>, <code>#pragma</code>, <code>#region</code>, etc.)</td>
<td>✔</td>
</tr>
<tr>
<td>Verbatim string literals (<code>@&quot;&quot;</code>)</td>
<td></td>
</tr>
<tr>
<td>Disabled code (text located within a <code>#if</code>, <code>#elif</code>, or <code>#else</code> block which is not active)</td>
<td></td>
</tr>
</tbody>
</table>
<h2>How to fix violations</h2>
<p>The fix an instance of this violation, delete all excess whitespace characters at the end of the line.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SA1028 // Code should not contain trailing whitespace
SomeMethodWithSpaceAfterTheSemicolon();    
#pragma warning restore SA1028 // Code should not contain trailing whitespace
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1100</rule>
    <ruleTitle><![CDATA[Do not prefix calls with base unless local implementation exists]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1100</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1100DoNotPrefixCallsWithBaseUnlessLocalImplementationExists</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1100</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A call to a member from an inherited class begins with <code>base.</code>, and the local class does not contain an override or implementation of the member.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever the code contains a call to a member from the base class prefixed with <code>base.</code>, and there is no local implementation of the member. For example:</p>
<pre><code class="language-csharp">string name = base.JoinName(&quot;John&quot;, &quot;Doe&quot;);
</code></pre>
<p>This rule is in place to prevent a potential source of bugs. Consider a base class which contains the following virtual method:</p>
<pre><code class="language-csharp">public virtual string JoinName(string first, string last)
{
}
</code></pre>
<p>Another class inherits from this base class but does not provide a local override of this method. Somewhere within this class, the base class method is called using <code>base.JoinName(...)</code>. This works as expected. At a later date, someone adds a local override of this method to the class:</p>
<pre><code class="language-csharp">public override string JoinName(string first, string last)
{
    return &quot;Bob&quot;;
}
</code></pre>
<p>At this point, the local call to <code>base.JoinName(...)</code> most likely introduces a bug into the code. This call will always call the base class method and will cause the local override to be ignored.</p>
<p>For this reason, calls to members from a base class should not begin with <code>base.</code>, unless a local override is implemented, and the developer wants to specifically call the base class member. When there is no local override of the base class member, the call should be prefixed with <code>this.</code> rather than <code>base.</code>.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, change the <code>base.</code> prefix to <code>this.</code>.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1100:DoNotPrefixCallsWithBaseUnlessLocalImplementationExists&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1100 // DoNotPrefixCallsWithBaseUnlessLocalImplementationExists
#pragma warning restore SA1100 // DoNotPrefixCallsWithBaseUnlessLocalImplementationExists
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1101</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1101PrefixLocalCallsWithThis</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1101</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A call to an instance member of the local class or a base class is not prefixed with 'this.', within a C# code file.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever the code contains a call to an instance member of the local class or a base class which is not prefixed with 'this.'. An exception to this rule occurs when there is a local override of a base class member, and the code intends to call the base class member directly, bypassing the local override. In this case the call can be prefixed with 'base.' rather than 'this.'.</p>
<p>By default, StyleCop disallows the use of underscores or <em>m_</em> to mark local class fields, in favor of the 'this.' prefix. The advantage of using 'this.' is that it applies equally to all element types including methods, properties, etc., and not just fields, making all calls to class members instantly recognizable, regardless of which editor is being used to view the code. Another advantage is that it creates a quick, recognizable differentiation between instance members and static members, which are not prefixed.</p>
<p>A final advantage of using the 'this.' prefix is that typing <em>this.</em> will cause Visual Studio to show the IntelliSense popup, making it quick and easy for the developer to choose the class member to call.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, insert the 'this.' prefix before the call to the class member.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1101:PrefixLocalCallsWithThis&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1101 // PrefixLocalCallsWithThis
#pragma warning restore SA1101 // PrefixLocalCallsWithThis
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1102</rule>
    <ruleTitle><![CDATA[Query clause should follow previous clause]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA1102</h1>
<table>
<tr>
  <td>Title</td>
  <td>Query clause should follow previous clause</td>
</tr>
<tr>
  <td>TypeName</td>
  <td>SA110xQueryClauses</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1102</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# query clause does not begin on the same line as the previous clause, or on the next line.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a clause within a query expression does not begin on the same line as the previous clause, or on the line after the query clause. For example:</p>
<pre><code class="language-c#">    object x = select a in b

        from c;
</code></pre>
<p>The query clause can correctly be written as:</p>
<pre><code class="language-c#">    object x = select a in b from c;
</code></pre>
<p>or:</p>
<pre><code class="language-c#">    object x =
        select a
        in b
        from c;
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that each clause in the query expression begins on the same line as the previous clause, or on the following line.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-c#">#pragma warning disable SA1102 // Query clause should follow previous clause
    object x = select a in b

        from c;
#pragma warning restore SA1102 // Query clause should follow previous clause
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1103</rule>
    <ruleTitle><![CDATA[Query clauses should be on separate lines or all on one line]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA1103</h1>
<table>
<tr>
  <td>Title</td>
  <td>Query clauses should be on separate lines or all on one line</td>
</tr>
<tr>
  <td>TypeName</td>
  <td>SA110xQueryClauses</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1103</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The clauses within a C# query expression are not all placed on the same line, and each clause is not placed on its own line.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the query clauses are not either placed all on the same line, or each on its own line. For example:</p>
<pre><code class="language-c#">    object x = from num in numbers
        select num;
</code></pre>
<p>The query clauses can correctly be written as:</p>
<pre><code class="language-c#">    object x = from num in numbers select num;
</code></pre>
<p>or:</p>
<pre><code class="language-c#">    object x =
        from num in numbers
        select num;
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that all clauses are placed together on the same line, or each clause begins on its own line.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-c#">#pragma warning disable SA1103 // Query clauses should be on separate lines or all on one line
    object x = from num in numbers
        select num;
#pragma warning restore SA1103 // Query clauses should be on separate lines or all on one line
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1104</rule>
    <ruleTitle><![CDATA[Query clause should begin on new line when previous clause spans multiple lines]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA1104</h1>
<table>
<tr>
  <td>Title</td>
  <td>Query clause should begin on new line when previous clause spans multiple lines</td>
</tr>
<tr>
  <td>TypeName</td>
  <td>SA110xQueryClauses</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1104</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A clause within a C# query expression begins on the same line as the previous clause, when the previous clause spans across multiple lines.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a query clause spans across multiple lines, and the next clause begins on the same line as the end of the previous clause. For example:</p>
<pre><code class="language-c#">    var elementNames =
        from element in GetElements
        (
            12,
			45
        ) select element.Name;
</code></pre>
<p>The query clauses can correctly be written as:</p>
<pre><code class="language-c#">    var elementNames =
        from element in GetElements
        (
            12,
			45
        )
		select element.Name;
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, move the clause down to start on the next line.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-c#">#pragma warning disable SA1104 // Query clause should begin on new line when previous clause spans multiple lines
    var elementNames =
        from element in GetElements
        (
            12,
			45
        ) select element.Name;
#pragma warning restore SA1104 // Query clause should begin on new line when previous clause spans multiple lines
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1105</rule>
    <ruleTitle><![CDATA[Query clauses spanning multiple lines should begin on own line]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA1105</h1>
<table>
<tr>
  <td>Title</td>
  <td>Query clauses spanning multiple lines should begin on own line</td>
</tr>
<tr>
  <td>TypeName</td>
  <td>SA110xQueryClauses</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1105</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A clause within a C# query expression spans across multiple lines, and does not begin on its own line.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a query clause spans across multiple lines, but does not begin on its own line. For example:</p>
<pre><code class="language-c#">    var elementDescriptions =
        from element in elements select GenerateElementDescription
        (
            element
        );
</code></pre>
<p>The query clauses can correctly be written as:</p>
<pre><code class="language-c#">    var elementDescriptions =
        from element in elements
		select GenerateElementDescription
        (
            element
        );
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, move the clause down to start on the next line.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-c#">#pragma warning disable SA1105 // Query clauses spanning multiple lines should begin on own line
    var elementDescriptions =
        from element in elements select GenerateElementDescription
        (
            element
        );
#pragma warning restore SA1105 // Query clauses spanning multiple lines should begin on own line
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1106</rule>
    <ruleTitle><![CDATA[Code should not contain empty statements]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1106</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1106CodeMustNotContainEmptyStatements</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1106</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The C# code contains an extra semicolon.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the code contain an extra semicolon. Syntactically, this results in an extra, empty statement in the code.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the unneeded semicolon.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1106:CodeMustNotContainEmptyStatements&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1106 // CodeMustNotContainEmptyStatements
#pragma warning restore SA1106 // CodeMustNotContainEmptyStatements
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1107</rule>
    <ruleTitle><![CDATA[Code should not contain multiple statements on one line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1107</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1107CodeMustNotContainMultipleStatementsOnOneLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1107</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The C# code contains more than one statement on a single line.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the code contain more than one statement on the same line. Each statement should begin on a new line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, move each statement to begin on its own line.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1107:CodeMustNotContainMultipleStatementsOnOneLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1107 // CodeMustNotContainMultipleStatementsOnOneLine
#pragma warning restore SA1107 // CodeMustNotContainMultipleStatementsOnOneLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1108</rule>
    <ruleTitle><![CDATA[Block statements should not contain embedded comments]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1108</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1108BlockStatementsMustNotContainEmbeddedComments</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1108</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# statement contains a comment between the declaration of the statement and the opening brace of the statement.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the code contains a comment in between the declaration and the opening brace. For example:</p>
<pre><code class="language-csharp">if (x != y)
// Make sure x does not equal y
{
}
</code></pre>
<p>The comment can legally be placed above the statement, or within the body of the statement:</p>
<pre><code class="language-csharp">// Make sure x does not equal y
if (x != y)
{
}

if (x != y)
{
    // Make sure x does not equal y
}
</code></pre>
<p>If the comment is being used to comment out a line of code, begin the comment with four forward slashes rather than two:</p>
<pre><code class="language-csharp">if (x != y)
////if (x == y)
{
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, move the comment above the statement, within the body of the statement, or remove the comment.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1108:BlockStatementsMustNotContainEmbeddedComments&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1108 // BlockStatementsMustNotContainEmbeddedComments
#pragma warning restore SA1108 // BlockStatementsMustNotContainEmbeddedComments
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1110</rule>
    <ruleTitle><![CDATA[Opening parenthesis or bracket should be on declaration line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1110</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1110OpeningParenthesisMustBeOnDeclarationLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1110</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The opening parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is
not placed on the same line as the method or indexer name.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the opening bracket of a method or indexer call or declaration is not placed on the
same line as the method or indexer. The following examples show correct placement of the opening bracket:</p>
<pre><code class="language-csharp">public string JoinName(string first, string last)
{
    return JoinStrings(
        first, last);
}

public int this[int x]
{
    get { return this.items[x]; }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the opening bracket is placed on the same line as the name of the method or
indexer.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1110:OpeningParenthesisMustBeOnDeclarationLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1110 // OpeningParenthesisMustBeOnDeclarationLine
#pragma warning restore SA1110 // OpeningParenthesisMustBeOnDeclarationLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1111</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be on line of last parameter]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1111</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1111ClosingParenthesisMustBeOnLineOfLastParameter</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1111</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the last parameter.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the closing bracket of a method or indexer call or declaration is not placed on the same line as the last parameter. The following examples show correct placement of the bracket:</p>
<pre><code class="language-csharp">public string JoinName(string first, string last)
{
    string name = JoinStrings(
        first, 
        last);
}

public int this[int x]
{
    get { return this.items[x]; }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the closing bracket is placed on the same line as the last parameter.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1111:ClosingParenthesisMustBeOnLineOfLastParameter&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1111 // ClosingParenthesisMustBeOnLineOfLastParameter
#pragma warning restore SA1111 // ClosingParenthesisMustBeOnLineOfLastParameter
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1112</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be on line of opening parenthesis]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1112</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1112ClosingParenthesisMustBeOnLineOfOpeningParenthesis</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1112</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The closing parenthesis or bracket in a call to a C# method or indexer, or the declaration of a method or indexer, is not placed on the same line as the opening bracket when the element does not take any parameters.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a method or indexer does not take any parameters and the closing bracket of a call or declaration for the method or indexer is not placed on the same line as the opening bracket. The following example shows correct placement of the closing parenthesis:</p>
<pre><code class="language-csharp">public string GetName()
{
    return this.name.Trim();
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the closing bracket is placed on the same line as the opening bracket.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1112:ClosingParenthesisMustBeOnLineOfOpeningParenthesis&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1112 // ClosingParenthesisMustBeOnLineOfOpeningParenthesis
#pragma warning restore SA1112 // ClosingParenthesisMustBeOnLineOfOpeningParenthesis
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1113</rule>
    <ruleTitle><![CDATA[Comma should be on the same line as previous parameter]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1113</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1113CommaMustBeOnSameLineAsPreviousParameter</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1113</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A comma between two parameters in a call to a C# method or indexer, or in the declaration of a method or indexer, is not placed on the same line as the previous parameter.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a comma between two parameters to a method or indexer is not placed on the same line as the previous parameter. The following examples show correct placement of the comma:</p>
<pre><code class="language-csharp">public string JoinName(string first, string last)
{
    string name = JoinStrings(
        first, 
        last);
}

public int this[int x, 
   int y]
{
    get { return this.items[x, y]; }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the comma is placed on the same line as the previous parameter.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1113:CommaMustBeOnSameLineAsPreviousParameter&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1113 // CommaMustBeOnSameLineAsPreviousParameter
#pragma warning restore SA1113 // CommaMustBeOnSameLineAsPreviousParameter
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1114</rule>
    <ruleTitle><![CDATA[Parameter list should follow declaration]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1114</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1114ParameterListMustFollowDeclaration</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1114</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The start of the parameter list for a method or indexer call or declaration does not begin on the same line as the opening bracket, or on the line after the opening bracket.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when there are one or more blank lines between the opening bracket and the start of the parameter list. For example:</p>
<pre><code class="language-csharp">public string JoinName(

    string first, string last)
{
}
</code></pre>
<p>The parameter list should begin on the same line as the opening bracket, or on the next line. For example:</p>
<pre><code class="language-csharp">public string JoinName(string first, string last)
{
}

public string JoinName(
    string first, string last)
{
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the parameter list begins on the same line as the opening bracket, or on the next line.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1114:ParameterListMustFollowDeclaration&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1114 // ParameterListMustFollowDeclaration
#pragma warning restore SA1114 // ParameterListMustFollowDeclaration
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1115</rule>
    <ruleTitle><![CDATA[Parameter should follow comma]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1115</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1115ParameterMustFollowComma</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1115</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A parameter within a C# method or indexer call or declaration does not begin on the same line as the previous parameter, or on the next line.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when there are one or more blank lines between a parameter and the previous parameter. For example:</p>
<pre><code class="language-csharp">public string JoinName(
    string first, 

    string last)
{
}
</code></pre>
<p>The parameter should begin on the same line as the previous comma, or on the next line. For example:</p>
<pre><code class="language-csharp">public string JoinName(string first, string last)
{
}

public string JoinName(
    string first, 
    string last)
{
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the parameter begins on the same line as the previous comma, or on the next line.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1115:ParameterMustFollowComma&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1115 // ParameterMustFollowComma
#pragma warning restore SA1115 // ParameterMustFollowComma
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1116</rule>
    <ruleTitle><![CDATA[Split parameters should start on line after declaration]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1116</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1116SplitParametersMustStartOnLineAfterDeclaration</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1116</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The parameters to a C# method or indexer call or declaration span across multiple lines, but the first parameter does not start on the line after the opening bracket.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the parameters to a method or indexer span across multiple lines, but the first parameter does not start on the line after the opening bracket. For example:</p>
<pre><code class="language-csharp">public string JoinName(string first, 
    string last)
{
}
</code></pre>
<p>The parameters should begin on the line after the declaration, whenever the parameter span across multiple lines:</p>
<pre><code class="language-csharp">public string JoinName(
    string first, 
    string last)
{
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the first parameter starts on the line after the opening bracket, or place all parameters on the same line if the parameters are not too long.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1116:SplitParametersMustStartOnLineAfterDeclaration&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1116 // SplitParametersMustStartOnLineAfterDeclaration
#pragma warning restore SA1116 // SplitParametersMustStartOnLineAfterDeclaration
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1117</rule>
    <ruleTitle><![CDATA[Parameters should be on same line or separate lines]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1117</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1117ParametersMustBeOnSameLineOrSeparateLines</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1117</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The parameters to a C# method or indexer call or declaration are not all on the same line or each on a separate line.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the parameters to a method or indexer are not all on the same line or each on its own line. For example:</p>
<pre><code class="language-csharp">public string JoinName(string first, string middle,
    string last)
{
}
</code></pre>
<p>The parameters can all be placed on the same line:</p>
<pre><code class="language-csharp">public string JoinName(string first, string middle, string last)
{
}

public string JoinName(
    string first, string middle, string last)
{
}
</code></pre>
<p>Alternatively, each parameter can be placed on its own line:</p>
<pre><code class="language-csharp">public string JoinName(
    string first, 
    string middle, 
    string last)
{
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, place all parameters on the same line, or place each parameter on its own line.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1117:ParametersMustBeOnSameLineOrSeparateLines&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1117 // ParametersMustBeOnSameLineOrSeparateLines
#pragma warning restore SA1117 // ParametersMustBeOnSameLineOrSeparateLines
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1118</rule>
    <ruleTitle><![CDATA[Parameter should not span multiple lines]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1118</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1118ParameterMustNotSpanMultipleLines</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1118</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A parameter to a C# method or indexer, other than the first parameter, spans across multiple lines.</p>
<h2>Rule description</h2>
<p>To prevent method calls from becoming excessively complicated and unreadable, individual parameters and arguments should
be placed on a single line. When parameters other than the first parameter span across multiple lines, it can be
difficult to tell how many parameters are passed to the method. In general, the code becomes difficult to read. A
violation of this rule is reported when a parameter or argument spans multiple lines, except in the following specific
cases:</p>
<ul>
<li>The first parameter may span multiple lines</li>
<li>Anonymous methods (including lambda expressions) may span multiple lines</li>
<li>Invocation expressions may span multiple lines</li>
<li>Object creation expressions may span multiple lines</li>
</ul>
<p>For example, the following code would violate this rule, since the second parameter spans across multiple lines:</p>
<pre><code class="language-csharp">return JoinStrings(
    &quot;John&quot;,
    &quot;Smith&quot; + 
    &quot; Doe&quot;);
</code></pre>
<p>To fix the example above, ensure that the parameters after the first parameter do not span across multiple lines. If
this will cause a parameter to be excessively long, store the value of the parameter within a temporary variable. For
example:</p>
<pre><code class="language-csharp">string last = &quot;Smith&quot; + 
    &quot; Doe&quot;;

return JoinStrings(
    &quot;John&quot;,
    last);
</code></pre>
<p>In some cases, this will allow the method to be written even more concisely, such as:</p>
<pre><code class="language-csharp">return JoinStrings(&quot;John&quot;, last);
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the parameters and arguments do not span multiple lines, except in the
specific cases listed above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1118:ParameterMustNotSpanMultipleLines&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1118 // ParameterMustNotSpanMultipleLines
#pragma warning restore SA1118 // ParameterMustNotSpanMultipleLines
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1119</rule>
    <ruleTitle><![CDATA[Statement should not use unnecessary parenthesis]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1119</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1119StatementMustNotUseUnnecessaryParenthesis</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1119</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# statement contains parenthesis which are unnecessary and should be removed.</p>
<h2>Rule description</h2>
<p>It is possible in C# to insert parenthesis around virtually any type of expression, statement, or clause, and in many
situations use of parenthesis can greatly improve the readability of the code. However, excessive use of parenthesis can
have the opposite effect, making it more difficult to read and maintain the code.</p>
<p>A violation of this rule occurs when parenthesis are used in situations where they provide no practical value.
Typically, this happens anytime the parenthesis surround an expression which does not strictly require the use of
parenthesis, and the parenthesis expression is located at the root of a statement. For example, the following lines of
code all contain unnecessary parenthesis which will result in violations of this rule:</p>
<pre><code class="language-csharp">int x = (5 + b);
string y = (this.Method()).ToString();
return (x.Value);
</code></pre>
<p>In each of these statements, the extra parenthesis can be removed without sacrificing the readability of the code:</p>
<pre><code class="language-csharp">int x = 5 + b;
string y = this.Method().ToString();
return x.Value;
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the unnecessary parenthesis.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainabilityRules&quot;, &quot;SA1119:StatementMustNotUseUnnecessaryParenthesis&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1119 // StatementMustNotUseUnnecessaryParenthesis
#pragma warning restore SA1119 // StatementMustNotUseUnnecessaryParenthesis
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1120</rule>
    <ruleTitle><![CDATA[Comments should contain text]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1120</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1120CommentsMustContainText</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1120</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The C# comment does not contain any comment text.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever the code contains a C# comment which does not contain any text.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add text to the comment, or remove the comment.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1120:CommentsMustContainText&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1120 // CommentsMustContainText
#pragma warning restore SA1120 // CommentsMustContainText
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1121</rule>
    <ruleTitle><![CDATA[Use built-in type alias]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1121</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1121UseBuiltInTypeAlias</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1121</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The code uses one of the basic C# types, but does not use the built-in alias for the type.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when one of the following types are used anywhere in the code: <em>Boolean, Byte, Char, Decimal, Double, Int16, Int32, Int64, Object, SByte, Single, String, UInt16, UInt32, UInt64</em>.</p>
<p>A violation also occurs when any of these types are represented in the code using the full namespace for the type: <em>System.Boolean, System.Byte, System.Char, System.Decimal, System.Double, System.Int16, System.Int32, System.Int64, System.Object, System.SByte, System.Single, System.String, System.UInt16, System.UInt32, System.UInt64</em>.</p>
<p>Rather than using the type name or the fully-qualified type name, the built-in aliases for these types should always be used: <em>bool, byte, char, decimal, double, short, int, long, object, sbyte, float, string, ushort, uint, ulong</em>.</p>
<p>The following table lists each of these types in all three formats:</p>
<table>
<thead>
<tr>
<th>Type Alias</th>
<th>Type</th>
<th>Fully Qualified Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>bool</td>
<td>Boolean</td>
<td>System.Boolean</td>
</tr>
<tr>
<td>byte</td>
<td>Byte</td>
<td>System.Byte</td>
</tr>
<tr>
<td>char</td>
<td>Char</td>
<td>System.Char</td>
</tr>
<tr>
<td>decimal</td>
<td>Decimal</td>
<td>System.Decimal</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
<td>System.Double</td>
</tr>
<tr>
<td>short</td>
<td>Int16</td>
<td>System.Int16</td>
</tr>
<tr>
<td>int</td>
<td>Int32</td>
<td>System.Int32</td>
</tr>
<tr>
<td>long</td>
<td>Int64</td>
<td>System.Int64</td>
</tr>
<tr>
<td>object</td>
<td>Object</td>
<td>System.Object</td>
</tr>
<tr>
<td>sbyte</td>
<td>SByte</td>
<td>System.SByte</td>
</tr>
<tr>
<td>float</td>
<td>Single</td>
<td>System.Single</td>
</tr>
<tr>
<td>string</td>
<td>String</td>
<td>System.String</td>
</tr>
<tr>
<td>ushort</td>
<td>UInt16</td>
<td>System.UInt16</td>
</tr>
<tr>
<td>uint</td>
<td>UInt32</td>
<td>System.UInt32</td>
</tr>
<tr>
<td>ulong</td>
<td>UInt64</td>
<td>System.UInt64</td>
</tr>
</tbody>
</table>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, replace the type with the built-in alias for the type.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1121:UseBuiltInTypeAlias&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1121 // UseBuiltInTypeAlias
#pragma warning restore SA1121 // UseBuiltInTypeAlias
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1122</rule>
    <ruleTitle><![CDATA[Use string.Empty for empty strings]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1122</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1122UseStringEmptyForEmptyStrings</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1122</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The C# code includes an empty string, written as <code>&quot;&quot;</code>.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the code contains an empty string. For example:</p>
<pre><code class="language-csharp">string s = &quot;&quot;;
</code></pre>
<p>This will cause the compiler to embed an empty string into the compiled code. Rather than including a hard-coded empty string, use the static string.Empty property:</p>
<pre><code class="language-csharp">string s = string.Empty;
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, replace the hard-coded empty string with string.Empty.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1122:UseStringEmptyForEmptyStrings&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1122 // UseStringEmptyForEmptyStrings
#pragma warning restore SA1122 // UseStringEmptyForEmptyStrings
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1123</rule>
    <ruleTitle><![CDATA[Do not place regions within elements]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1123</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1123DoNotPlaceRegionsWithinElements</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1123</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The C# code contains a region within the body of a code element.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever a region is placed within the body of a code element. In many editors, including Visual Studio, the region will appear collapsed by default, hiding the code within the region. It is generally a bad practice to hide code within the body of an element, as this can lead to bad decisions as the code is maintained over time.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the region from the code.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1123:DoNotPlaceRegionsWithinElements&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1123 // DoNotPlaceRegionsWithinElements
#pragma warning restore SA1123 // DoNotPlaceRegionsWithinElements
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1124</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1124DoNotUseRegions</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1124</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The C# code contains a region.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever a region is placed anywhere within the code. In many editors, including Visual Studio, the region will appear collapsed by default, hiding the code within the region. It is generally a bad practice to hide code, as this can lead to bad decisions as the code is maintained over time.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the region from the code.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1124:DoNotUseRegions&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1124 // DoNotUseRegions
#pragma warning restore SA1124 // DoNotUseRegions
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1125</rule>
    <ruleTitle><![CDATA[Use shorthand for nullable types]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1125</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1125UseShorthandForNullableTypes</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1125</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The Nullable type has been defined not using the C# shorthand. For example, <code>Nullable&lt;DateTime&gt;</code> has been used instead of the preferred <code>DateTime?</code></p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever the Nullable type has been defined without using the shorthand C# style.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, use the shorthand version of the nullable type ie. int?, DateTime?, etc.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1125:UseShorthandForNullableTypes&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1125 // UseShorthandForNullableTypes
#pragma warning restore SA1125 // UseShorthandForNullableTypes
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1127</rule>
    <ruleTitle><![CDATA[Generic type constraints should be on their own line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1127</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1127GenericTypeConstraintsMustBeOnOwnLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1127</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>A generic constraint on a type or method declaration is on the same line as the declaration, within a C# code file.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever the code contains one or more <code>where</code> clauses containing generic type constraints on the same line as the type or method declaration itself.</p>
<p>For example, the following code would produce two violations of this rule:</p>
<pre><code class="language-csharp">private void Method&lt;T, R&gt;() where T : class where R : class, new()
{
}
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">private void Method&lt;T, R&gt;()
    where T : class
    where R : class, new()
{
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, move each <code>where</code> clause to its own line.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SA1127 // Generic type constraints should be on their own line
private void Method&lt;T&gt;() where T : class
#pragma warning restore SA1127 // Generic type constraints should be on their own line
{
    // method body...
}
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1128</rule>
    <ruleTitle><![CDATA[Put constructor initializers on their own line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1128</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1128ConstructorInitializerMustBeOnOwnLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1128</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>A constructor initializer is on the same line as the constructor declaration, within a C# code file.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever the code contains a constructor initializer that is partially or completely on the same line as the constructor declaration.</p>
<p>For example, the following code would produce a violation of this rule:</p>
<pre><code class="language-csharp">public class TypeName
{
    public TypeName() : this(0)
    {
    }

    public TypeName(int value)
    {
    }
}
</code></pre>
<p>The <code>:</code> (colon) character is treated as part of the initializer and should be on the same line as the <code>base</code> or <code>this</code> keyword.</p>
<p>The following code would also produce a violation of this rule:</p>
<pre><code class="language-csharp">public class TypeName
{
	public TypeName() :
		base()
	{
	}
}
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">public class TypeName
{
    public TypeName()
        : this(0)
    {
    }

    public TypeName(int value)
    {
    }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, move the constructor initializer, including the <code>:</code> character, to its own line.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">public class TypeName
{
#pragma warning disable SA1128 // Constructor initializers should be on their own line
    public TypeName() : this(0)
#pragma warning restore SA1128 // Constructor initializers should be on their own line
    {
    }

    public TypeName(int value)
    {
    }
}
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1129</rule>
    <ruleTitle><![CDATA[Do not use default value type constructor]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1129</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1129DoNotUseDefaultValueTypeConstructor</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1129</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>A value type was constructed using the syntax <code>new T()</code>.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a value type <code>T</code> is constructed using the syntax <code>new T()</code>. To create a default
instance of a value type, use the equivalent syntax <code>default(T)</code> instead.</p>
<p>For example, the following code would produce a violation of this rule:</p>
<pre><code class="language-csharp">ImmutableArray&lt;int&gt; array = new ImmutableArray&lt;int&gt;();
</code></pre>
<p>While the above appears to create a new immutable array which is ready to use, in reality the variable <code>array</code> was
assigned a default instance of <code>ImmutableArray&lt;int&gt;</code>, and almost any attempt to use the variable will result in a
<code>NullReferenceException</code>. To avoid confusion with the behavior of reference types, default instances of value types
should always be created using the syntax <code>default(T)</code> instead.</p>
<blockquote>
<p>:memo: This proposal only refers to the distinction between <code>default(T)</code> and <code>new T()</code>. Other default values,
including <code>CancellationToken.None</code>, <code>0</code>, <code>0.0f</code>, <code>IntPtr.Zero</code>, and <code>RegexOptions.None</code>, would <em>not</em> produce a
warning.</p>
</blockquote>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, replace the syntax <code>new T()</code> with the equivalent syntax <code>default(T)</code>.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SA1129 // Do not use default value type constructor
IntPtr zero = new IntPtr();
#pragma warning restore SA1129 // Do not use default value type constructor
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1130</rule>
    <ruleTitle><![CDATA[Use lambda syntax]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1130</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1130UseLambdaSyntax</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1130</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>An anonymous method was declared using the form <code>delegate (parameters) { }</code>, when a lambda expression would provide
equivalent behavior with the syntax <code>(parameters) =&gt; { }</code>.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever the code contains an anonymous method using the &quot;old&quot; style
<code>delegate (parameters) { }</code>.</p>
<p>For example, each of the following would produce a violation of this rule:</p>
<pre><code class="language-csharp">Action a = delegate { x = 0; };
Action b = delegate() { y = 0; };
Func&lt;int, int, int&gt; c = delegate(int m, int n) { return m + n; };
</code></pre>
<p>The following code shows the equivalent variable declarations using the more familiar lambda syntax.</p>
<pre><code class="language-csharp">Action a = () =&gt; { x = 0; };
Action b = () =&gt; { y = 0; };
Func&lt;int, int, int&gt; c = (m, n) =&gt; m + n;
</code></pre>
<p>:memo: It is not always possible to replace an anonymous method with an equivalent lambda expression. For example, the
following code would not produce any violations of this rule, because the anonymous method and lambda expression have
different semantics.</p>
<pre><code class="language-csharp">var x = A(() =&gt; { });       // Expression
var y = A(delegate { });    // Action

private Expression&lt;Action&gt; A(Expression&lt;Action&gt; expression)
{
    return expression;
}

private Action A(Action action)
{
    return action;
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, replace the anonymous function with an equivalent lambda expression.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SA1130 // Use lambda syntax
Action a = delegate { x = 0; };
#pragma warning restore SA1128 // Use lambda syntax
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1131</rule>
    <ruleTitle><![CDATA[Use readable conditions]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1131</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1131UseReadableConditions</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1131</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>A comparison was made between a variable and a literal or constant value, and the variable appeared on the right-hand
side of the expression.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever the code contains a comparison between a literal or constant value and a
variable value, and the variable appeared on the right-hand side of the expression.</p>
<p>For example, the following code shows one commonly-seen case of this:</p>
<pre><code class="language-csharp">public void Method(string value)
{
    if (null == value) // SA1131
    {
        throw new ArgumentNullException(nameof(value));
    }
}
</code></pre>
<p>For the purposes of this rule, a <em>literal or constant value</em> is any of the following:</p>
<ul>
<li>A numeric literal, such as <code>1</code>, <code>0.0f</code>, or <code>5.0m</code></li>
<li>A string literal</li>
<li><code>null</code></li>
<li><code>default(T)</code> (for any type <code>T</code>)</li>
<li>Any expression which evaluates to a constant value at compile time</li>
<li>A reference to a <code>static readonly</code> field, such as <code>IntPtr.Zero</code></li>
</ul>
<p>A <em>variable value</em> is any expression which is not considered a literal or constant value.</p>
<p>A <em>comparison</em> is a binary expression using one of the following operators.</p>
<ul>
<li><code>==</code></li>
<li><code>!=</code></li>
<li><code>&lt;</code></li>
<li><code>&gt;</code></li>
<li><code>&lt;=</code></li>
<li><code>&gt;=</code></li>
</ul>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, reverse the order of operands to the comparison.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">public void Method(string value)
{
#pragma warning disable SA1131 // Use readable conditions
    if (null == value)
#pragma warning restore SA1131 // Use readable conditions
    {
        throw new ArgumentNullException(nameof(value));
    }
}
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1132</rule>
    <ruleTitle><![CDATA[Do not combine fields]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1132</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1132DoNotCombineFields</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1132</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>Two or more fields were declared in the same field declaration syntax.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when two fields are declared as part of the same field definition.</p>
<p>For example, the following code would produce a violation of this rule:</p>
<pre><code class="language-csharp">public class TypeName
{
    private int field1,
        field2; // SA1132
}
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">public class TypeName
{
    private int field1;
    private int field2;
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, declare each field as part of its own field definition.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">public class TypeName
{
    private int field1,
#pragma warning disable SA1132 // Do not combine fields
        field2;
#pragma warning restore SA1132 // Do not combine fields
}
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1133</rule>
    <ruleTitle><![CDATA[Do not combine attributes]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1133</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1133DoNotCombineAttributes</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1133</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>Two or more attributes appeared within the same set of square brackets.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs two or more attributes are placed within the same set of square brackets.</p>
<p>For example, the following code would produce a violation of this rule:</p>
<pre><code class="language-csharp">[ExportCodeFixProvider(LanguageNames.CSharp, Name = nameof(MyCodeFixProvider)), Shared]
public class MyCodeFixProvider : CodeFixProvider
{
}
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">[ExportCodeFixProvider(LanguageNames.CSharp, Name = nameof(MyCodeFixProvider))]
[Shared]
public class MyCodeFixProvider : CodeFixProvider
{
}
</code></pre>
<h3>Exceptions</h3>
<p>A violation of this rule will not occur for attributes placed on parameters or type parameters.</p>
<p>For example, the following code will not produce violations:</p>
<pre><code class="language-csharp">public class MyClass&lt;[Foo, Bar] T&gt;
{
	public T MyMethod([In, MarshalAs(UnmanagedType.LPWStr)] string value)
	{
	    ...
	}
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, place each attribute within its own set of square brackets.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[ExportCodeFixProvider(LanguageNames.CSharp, Name = nameof(MyCodeFixProvider)),
#pragma warning disable SA1133 // Do not combine attributes
    Shared]
#pragma warning restore SA1133 // Do not combine attributes
public class MyCodeFixProvider : CodeFixProvider
{
}
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1134</rule>
    <ruleTitle><![CDATA[Attributes should not share line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1134</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1134AttributesMustNotShareLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1134</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>An attribute is placed on the same line of code as another attribute or element.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when two more more attributes are placed on the same line of code, or an attribute is placed on the same line of code as another element.</p>
<p>For example, the following code would produce a violation of this rule:</p>
<pre><code class="language-csharp">[ExportCodeFixProvider(LanguageNames.CSharp, Name = nameof(MyCodeFixProvider))][Shared]
public class MyCodeFixProvider : CodeFixProvider
{
}
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">[ExportCodeFixProvider(LanguageNames.CSharp, Name = nameof(MyCodeFixProvider))]
[Shared]
public class MyCodeFixProvider : CodeFixProvider
{
}
</code></pre>
<h3>Exceptions</h3>
<p>A violation of this rule will not occur for attributes placed on parameters or type parameters.</p>
<p>For example, the following code will not produce violations:</p>
<pre><code class="language-csharp">public class MyClass&lt;[Foo][Bar] T&gt;
{
	public T MyMethod([In][MarshalAs(UnmanagedType.LPWStr)] string value)
	{
	    ...
	}
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, place each attribute on its own line.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SA1134 // Attributes should not share line
[ExportCodeFixProvider(LanguageNames.CSharp, Name = nameof(MyCodeFixProvider))][Shared]
#pragma warning restore SA1134 // Attributes should not share line
public class MyCodeFixProvider : CodeFixProvider
{
}
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1135</rule>
    <ruleTitle><![CDATA[Using directives should be qualified]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1135</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1135UsingDirectivesMustBeQualified</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1135</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>A using directive is not qualified.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a using directive is contained within a namespace and is not qualified.
Note that alias definitions of classes within the same namespace do not need to be qualified.</p>
<p>For example, the following code would produce a violation of this rule:</p>
<pre><code class="language-csharp">namespace System.Threading
{
    using IO;
    using Tasks;
}
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">namespace System.Threading
{
    using System.IO;
    using System.Threading.Tasks;

    using T = Thread;
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, use the full qualified namespace name.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">namespace N1.N2
{
#pragma warning disable SA1135 // Using directives must be qualified
    using N3;
#pragma warning restore SA1135 // Using directives must be qualified
}
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1136</rule>
    <ruleTitle><![CDATA[Enum values should be on separate lines]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1136</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1136EnumValuesShouldBeOnSeparateLines</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1136</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>Multiple enum values are placed on the same line of code.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when two or more enum values are placed on the same line of code.</p>
<p>For example, the following code would produce a violation of this rule:</p>
<pre><code class="language-csharp">public enum ExampleEnum
{
    FirstValue, SecondValue
}
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">public enum ExampleEnum
{
    FirstValue,
    SecondValue
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, place each enum value on its own line.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SA1136 // Enum values should be on separate lines
public enum ExampleEnum
{
    FirstValue, SecondValue
}
#pragma warning restore SA1136 // Enum values should be on separate lines
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1137</rule>
    <ruleTitle><![CDATA[Elements should have the same indentation]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1137</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1137ElementsShouldHaveTheSameIndentation</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1137</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>Two sibling elements which each start on their own line have different levels of indentation.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when two or more sibling elements each start on their own line but are not indented the
same amount.</p>
<p>For example, the following code would produce a violation of this rule:</p>
<pre><code class="language-csharp">public void MethodName()
{
    A();
   B(); // SA1137: Expected the indentation to match the previous line
}
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">public void MethodName()
{
    A();
    B();
}
</code></pre>
<p>Note that relative indentation and indentation in independent groups of siblings is not checked by this rule. The
following code shows a more complex example which would not produce any violations:</p>
<pre><code class="language-csharp">public void Method1()
{
    A();
    B();
}

public void Method2()
{
        A();
        B();
}

public void Method3()
{
A();
B();
}

public void Method4()
    {
    A();
    B();
    }
</code></pre>
<h3>Attributes</h3>
<p>Attribute lists are evaluated by this rule as individual elements at the same level as the element they are applied to.
However, when determining the expected indentation for sibling elements, attribute lists are given lower priority. In
other words, the first element in the same group which starts on its own line, if one exists, determines the expected
indentation for the group. If no such element exists, the indentation of the first attribute list is used instead. For
example, the following code shows locations where SA1137 is reported relative to attribute lists.</p>
<pre><code class="language-csharp">  [Obsolete]                // SA1137 (expected no indentation)
public void Method()        // OK (this line establishes indentation for the group)
{
}

  public Task MethodAsync() // SA1137 (expected no indentation)
    {                       // OK (not part of the analysis group)
    }
</code></pre>
<p>The following example shows a case where the indentation of an attribute list <em>is</em> used for the group.</p>
<pre><code class="language-csharp">public void Method(int x,   // Ignored (parameter does not start on its own line)
    [In] int y,             // OK (this line establishes indentation for the group)
      [In] int z)           // SA1137
{
}
</code></pre>
<h3>Labels</h3>
<p>Labels which appear within a block statement are evaluated in a special manner. Each label within a block is expected to
have the same indentation, even if that indentation differs from the indentation used by statements within the block.
The specific indentation of labels relative to other statements is not examined for this rule.</p>
<p>The following example shows a block with statements and labels.</p>
<pre><code class="language-csharp">public int MethodName()
{
    int x;

  beginning:    // OK (label indentation may differ from other statements)
     x = 3;     // SA1137 (should be indented four spaces to match 'int x;' above)

end:            // SA1137 (should be indented two spaces to match 'beginning:' above)
    return x;
}
</code></pre>
<p>Inside of a <code>switch</code> statement, the <code>case</code> and <code>default</code> labels form an additional category. The specific rules in this
case are:</p>
<ol>
<li><code>case</code> and <code>default</code> labels in a <code>switch</code> statement need to use the same indentation.</li>
<li>Other labels in a <code>switch</code> statement need to use the same indentation (but this may differ from the indentation of
<code>case</code> labels)</li>
<li>Statements in a <code>switch</code> statement need to use the same indentation (but this may differ from both of the above
labels).</li>
</ol>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, adjust the indentation of sibling elements to match.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">class TypeName { }

#pragma warning disable SA1137 // Elements should have the same indentation
  class Indented { }
#pragma warning restore SA1137 // Elements should have the same indentation
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1139</rule>
    <ruleTitle><![CDATA[Use literal suffix notation instead of casting]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1139</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1139UseLiteralsSuffixNotationInsteadOfCasting</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1139</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>A cast is performed instead of using literal of a number.</p>
<h2>Rule description</h2>
<p>A cast is performed instead of using literal of a number. Use &quot;U&quot; suffix to create 32-bit unsigned integer, &quot;L&quot; for 64-bit integer, &quot;UL&quot; for 64-bit unsigned integer, &quot;F&quot; for 32-bit floating point number, &quot;D&quot; for 64-bit floating point number, and &quot;M&quot; for a decimal number. Suffixes are case-insensitive.</p>
<p>For example, the following code would produce a violation of this rule:</p>
<pre><code class="language-csharp">var x = (long)1;
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">var x = 1L;
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, use the appropriate literal suffix instead of casting the value in code.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1139:UseLiteralsSuffixNotationInsteadOfCasting&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1139 // Use literal suffix notation instead of casting
#pragma warning restore SA1139 // Use literal suffix notation instead of casting
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1141</rule>
    <ruleTitle><![CDATA[Use tuple syntax]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1141</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1141UseTupleSyntax</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1141</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.
:memo: This rule is only active for C# 7.0 and higher</p>
<h2>Cause</h2>
<p>A ValueTuple type declaration was used instead of the preferred tuple language construct.</p>
<h2>Rule description</h2>
<p>A ValueTuple type declaration was used instead of the preferred tuple language construct.  See the documentation on <a href="https://docs.microsoft.com/en-us/dotnet/csharp/tuples">tuple types</a> for information on how to work with tuples in C# 7.</p>
<p>For example, the following code would produce a violation of this rule:</p>
<pre><code class="language-csharp">ValueTuple&lt;int, int&gt; x; // SA1141
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">(int, int) x;
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, use the appropriate tuple type in code instead of the ValueTuple type.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1141:UseTupleSyntax&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1141 // Use tuple syntax
#pragma warning restore SA1141 // Use tuple syntax
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1142</rule>
    <ruleTitle><![CDATA[Refer to tuple fields by name]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1142</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1142ReferToTupleElementsByName</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1142</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.
:memo: This rule is only active for C# 7.0 and higher</p>
<h2>Cause</h2>
<p>An element of a tuple was referenced by its metadata name when an element name is available.</p>
<h2>Rule description</h2>
<p>An element of a tuple was referenced by its metadata name when an element name is available.  See the documentation on <a href="https://docs.microsoft.com/en-us/dotnet/csharp/tuples">tuple types</a> for information on how to work with tuples in C# 7.</p>
<p>For example, the following code would produce a violation of this rule:</p>
<pre><code class="language-csharp">(int valueA, int valueB) x;

var y = x.Item1; // SA1142
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">(int valueA, int valueB) x;

var y = x.valueA;
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, use the appropriate tuple element name in code instead of the metadata name.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.ReadabilityRules&quot;, &quot;SA1142:ReferToTupleElementsByName&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1142 // Refer to tuple elements by name
#pragma warning restore SA1142 // Refer to tuple elements by name
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1200</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1200UsingDirectivesMustBePlacedCorrectly</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1200</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# using directive is placed outside of a namespace element.</p>
<blockquote>
<p>:memo: The behavior of this rule can change based on the configuration of the <code>usingDirectivesPlacement</code> property in <strong>stylecop.json</strong>. See <a href="Configuration.md#using-directives">Configuration.md</a> for more information.</p>
</blockquote>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a using directive or a using-alias directive is placed outside of a namespace element, unless the file does not contain any namespace elements.</p>
<p>For example, the following code would result in two violations of this rule.</p>
<pre><code class="language-csharp">using System;
using Guid = System.Guid;

namespace Microsoft.Sample
{
    public class Program
    {
    }
}
</code></pre>
<p>The following code, however, would not result in any violations of this rule:</p>
<pre><code class="language-csharp">namespace Microsoft.Sample
{
    using System;
    using Guid = System.Guid;
 
    public class Program
    {
    }
}
</code></pre>
<p>There are subtle differences between placing using directives within a namespace element, rather than outside of the namespace, including:</p>
<ol>
<li>
<p>Placing using-alias directives within the namespace eliminates compiler confusion between conflicting types.</p>
</li>
<li>
<p>When multiple namespaces are defined within a single file, placing using directives within the namespace elements scopes references and aliases.</p>
</li>
</ol>
<h3>1. Eliminating Type Confusion</h3>
<p>Consider the following code, which contains a using-alias directive defined outside of the namespace element. The code creates a new class called <em>Guid</em>, and also defines a using-alias directive to map the name <em>Guid</em> to the type <em>System.Guid</em>. Finally, the code creates an instance of the type <em>Guid</em>:</p>
<pre><code class="language-csharp">using Guid = System.Guid;
 
namespace Microsoft.Sample
{
    public class Guid
    {
        public Guid(string s)
        {
        }
    }

    public class Program
    {
        public static void Main(string[] args)
        {
            Guid g = new Guid(&quot;hello&quot;);
        }
    }
}
</code></pre>
<p>This code will compile cleanly, without any compiler errors. However, it is unclear which version of the <em>Guid</em> type is being allocated. If the using directive is moved inside of the namespace, as shown below, a compiler error will occur:</p>
<pre><code class="language-csharp">namespace Microsoft.Sample
{
    using Guid = System.Guid;

    public class Guid
    {
        public Guid(string s)
        {
        }
    }

    public class Program
    {
        public static void Main(string[] args)
        {
            Guid g = new Guid(&quot;hello&quot;);
        }
    }
}
</code></pre>
<p>The code fails on the following compiler error, found on the line containing <code>Guid g = new Guid(&quot;hello&quot;);</code></p>
<blockquote>
<p>CS0576: Namespace 'Microsoft.Sample' contains a definition conflicting with alias 'Guid'</p>
</blockquote>
<p>The code creates an alias to the <em>System.Guid</em> type called <em>Guid</em>, and also creates its own type called <em>Guid</em> with a matching constructor interface. Later, the code creates an instance of the type <em>Guid</em>. To create this instance, the compiler must choose between the two different definitions of <em>Guid</em>. When the using-alias directive is placed outside of the namespace element, the compiler will choose the local definition of <em>Guid</em> defined within the local namespace, and completely ignore the using-alias directive defined outside of the namespace. This, unfortunately, is not obvious when reading the code.</p>
<p>When the using-alias directive is positioned within the namespace, however, the compiler has to choose between two different, conflicting <em>Guid</em> types both defined within the same namespace. Both of these types provide a matching constructor. The compiler is unable to make a decision, so it flags the compiler error.</p>
<p>Placing the using-alias directive outside of the namespace is a bad practice because it can lead to confusion in situations such as this, where it is not obvious which version of the type is actually being used. This can potentially lead to a bug which might be difficult to diagnose.</p>
<p>Placing using-alias directives within the namespace element eliminates this as a source of bugs.</p>
<h3>2. Multiple Namespaces</h3>
<p>Placing multiple namespace elements within a single file is generally a bad idea, but if and when this is done, it is a good idea to place all using directives within each of the namespace elements, rather than globally at the top of the file. This will scope the namespaces tightly, and will also help to avoid the kind of behavior described above.</p>
<p>It is important to note that when code has been written with using directives placed outside of the namespace, care should be taken when moving these directives within the namespace, to ensure that this is not changing the semantics of the code. As explained above, placing using-alias directives within the namespace element allows the compiler to choose between conflicting types in ways that will not happen when the directives are placed outside of the namespace.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, move all using directives and using-alias directives within the namespace element.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1200:UsingDirectivesMustBePlacedWithinNamespace&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1200 // UsingDirectivesMustBePlacedWithinNamespace
#pragma warning restore SA1200 // UsingDirectivesMustBePlacedWithinNamespace
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1201</rule>
    <ruleTitle><![CDATA[Elements should appear in the correct order]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1201</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1201ElementsMustAppearInTheCorrectOrder</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1201</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An element within a C# code file is out of order in relation to the other elements in the code.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the code elements within a file do not follow a standard ordering scheme.</p>
<p>To comply with this rule, elements at the file root level or within a namespace should be positioned in the following order:</p>
<ul>
<li>Extern Alias Directives</li>
<li>Using Directives</li>
<li>Namespaces</li>
<li>Delegates</li>
<li>Enums</li>
<li>Interfaces</li>
<li>Structs</li>
<li>Classes</li>
</ul>
<p>Within a class, struct, or interface, elements should be positioned in the following order:</p>
<ul>
<li>Fields</li>
<li>Constructors</li>
<li>Finalizers (Destructors)</li>
<li>Delegates</li>
<li>Events</li>
<li>Enums</li>
<li>Interfaces</li>
<li>Properties</li>
<li>Indexers</li>
<li>Methods</li>
<li>Structs</li>
<li>Classes*</li>
</ul>
<p>Complying with a standard ordering scheme based on element type can increase the readability and maintainability of the file and encourage code reuse.</p>
<p>When implementing an interface, it is sometimes desirable to group all members of the interface next to one another. This will sometimes require violating this rule, if the interface contains elements of different types. This problem can be solved through the use of partial classes.</p>
<ol>
<li>
<p>Add the partial attribute to the class, if the class is not already partial.</p>
</li>
<li>
<p>Add a second partial class with the same name. It is possible to place this in the same file, just below the original class, or within a second file.</p>
</li>
<li>
<p>Move the interface inheritance and all members of the interface implementation to the second part of the class.</p>
</li>
</ol>
<p>For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Represents a customer of the system.
/// &lt;/summary&gt;
public partial class Customer
{
    // Contains the main functionality of the class.
}

/// &lt;content&gt;
/// Implements the ICollection class.
/// &lt;/content&gt;
public partial class Customer : ICollection
{
    public int Count 
    { 
        get { return this.count; }
    }

    public bool IsSynchronized 
    { 
        get { return false; }
    }

    public object SyncRoot 
    { 
        get { return null; }
    }

    public void CopyTo(Array array, int index)
    {
        throw new NotImplementedException();
    }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, order the elements in the file in the order described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1201:ElementsMustAppearInTheCorrectOrder&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1201 // ElementsMustAppearInTheCorrectOrder
#pragma warning restore SA1201 // ElementsMustAppearInTheCorrectOrder
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1202</rule>
    <ruleTitle><![CDATA[Elements should be ordered by access]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1202</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1202ElementsMustBeOrderedByAccess</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1202</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An element within a C# code file is out of order within regard to access level, in relation to other elements in the
code.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the code elements within a file do not follow a standard ordering scheme based on
access level.</p>
<p>To comply with this rule, adjacent elements of the same type should be positioned in the following order by access level:</p>
<ul>
<li>public</li>
<li>internal</li>
<li>protected internal</li>
<li>protected</li>
<li>private</li>
</ul>
<p>:memo: Static constructors and explicitly implemented interface members are considered <em>public</em> for the purposes of this
rule.</p>
<p>Complying with a standard ordering scheme based on access level can increase the readability and maintainability of the
file and make it easier to identify the public interface that is being exposed from a class.</p>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, order the elements in the file in the order described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1202:ElementsMustBeOrderedByAccess&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1202 // ElementsMustBeOrderedByAccess
#pragma warning restore SA1202 // ElementsMustBeOrderedByAccess
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1203</rule>
    <ruleTitle><![CDATA[Constants should appear before fields]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1203</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1203ConstantsMustAppearBeforeFields</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1203</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A constant field is placed beneath a non-constant field.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a constant field is placed beneath a non-constant field. Constants should be placed above fields to indicate that the two are fundamentally different types of elements with different considerations for the compiler, different naming requirements, etc.</p>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, place all constants above all fields.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1203:ConstantsMustAppearBeforeFields&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1203 // ConstantsMustAppearBeforeFields
#pragma warning restore SA1203 // ConstantsMustAppearBeforeFields
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1204</rule>
    <ruleTitle><![CDATA[Static elements should appear before instance elements]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1204</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1204StaticElementsMustAppearBeforeInstanceElements</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1204</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A static element is positioned beneath an instance element of the same type.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a static element is positioned beneath an instance element of the same type. All static elements should be placed above all instance elements of the same type to make it easier to see the interface exposed from the instance and static version of the class.</p>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, place all static elements above all instance elements of the same type.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1204:StaticElementsMustAppearBeforeInstanceElements&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1204 // StaticElementsMustAppearBeforeInstanceElements
#pragma warning restore SA1204 // StaticElementsMustAppearBeforeInstanceElements
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1205</rule>
    <ruleTitle><![CDATA[Partial elements should declare access]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1205</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1205PartialElementsMustDeclareAccess</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1205</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The partial element does not have an access modifier defined.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the partial elements does not have an access modifier defined.</p>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, specify an access modifier for the partial element.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1205:PartialElementsMustDeclareAccess&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1205 // PartialElementsMustDeclareAccess
#pragma warning restore SA1205 // PartialElementsMustDeclareAccess
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1206</rule>
    <ruleTitle><![CDATA[Declaration keywords should follow order]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1206</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1206DeclarationKeywordsMustFollowOrder</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1206</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The keywords within the declaration of an element do not follow a standard ordering scheme.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the keywords within an element's declaration do not follow a standard ordering scheme.</p>
<p>Within an element declaration, keywords should appear in the following order:</p>
<p><em>Access modifiers</em></p>
<p><em>static</em></p>
<p><em>All other keywords</em></p>
<p>Using a standard ordering scheme for element declaration keywords can make the code more readable by highlighting the access level of each element. This can help prevent elements from being given a higher access level than needed.</p>
<h2>How To Fix Violations</h2>
<p>To fix an instance of this violation, order the keywords in the element's declaration as described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1206:DeclarationKeywordsMustFollowOrder&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1206 // DeclarationKeywordsMustFollowOrder
#pragma warning restore SA1206 // DeclarationKeywordsMustFollowOrder
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1207</rule>
    <ruleTitle><![CDATA[Protected should come before internal]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1207</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1207ProtectedMustComeBeforeInternal</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1207</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The keyword <em>protected</em> is positioned after the keyword <em>internal</em> within the declaration of a protected internal C# element, or the keyword <em>private</em> is positioned after the keyword <em>protected</em>.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a protected internal element's access modifiers are written as <em>internal protected</em>, or when a private protected element's access modifiers are written as <em>protected private</em>. In reality, an element with the keywords <em>protected internal</em> will have the same access level as an element with the keywords <em>internal protected</em>. To make the code easier to read and more consistent, StyleCop standardizes the ordering of these keywords, so that a protected internal element will always be described as such, and never as internal protected. This can help to reduce confusion about whether these access levels are indeed the same.</p>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, place the <em>protected</em> keyword before the <em>internal</em> keyword, or place the <em>private</em> keyword before the <em>protected</em> keyword.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1207:ProtectedMustComeBeforeInternal&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1207 // ProtectedMustComeBeforeInternal
#pragma warning restore SA1207 // ProtectedMustComeBeforeInternal
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1208</rule>
    <ruleTitle><![CDATA[System using directives should be placed before other using directives]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1208</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1208SystemUsingDirectivesMustBePlacedBeforeOtherUsingDirectives</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1208</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A using directive which declares a member of the <em>System</em> namespace appears after a using directive which declares a member of a different namespace, within a C# code file.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a using directive for the <em>System</em> namespace is placed after a non-<em>System</em> using directive. Placing all <em>System</em> using directives at the top of the using directives can make the code cleaner and easier to read, and can help make it easier to identify the namespaces that are being used by the code.</p>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, place the <em>System</em> using directive above all using directives for other namespaces.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1208:SystemUsingDirectivesMustBePlacedBeforeOtherUsingDirectives&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1208 // SystemUsingDirectivesMustBePlacedBeforeOtherUsingDirectives
#pragma warning restore SA1208 // SystemUsingDirectivesMustBePlacedBeforeOtherUsingDirectives
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1209</rule>
    <ruleTitle><![CDATA[Using alias directives should be placed after other using directives]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1209</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1209UsingAliasDirectivesMustBePlacedAfterOtherUsingDirectives</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1209</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A using-alias directive is positioned before a regular using directive.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a using-alias directive is placed before a normal using directive. Using-alias directives have special behavior which can alter the meaning of the rest of the code within the file or namespace. Placing the using-alias directives together below all other using-directives can make the code cleaner and easier to read, and can help make it easier to identify the types used throughout the code.</p>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, place all using-alias directives beneath all normal using directives.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1209:UsingAliasDirectivesMustBePlacedAfterOtherUsingDirectives&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1209 // UsingAliasDirectivesMustBePlacedAfterOtherUsingDirectives
#pragma warning restore SA1209 // UsingAliasDirectivesMustBePlacedAfterOtherUsingDirectives
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1210</rule>
    <ruleTitle><![CDATA[Using directives should be ordered alphabetically by namespace]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1210</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1210UsingDirectivesMustBeOrderedAlphabeticallyByNamespace</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1210</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The using directives within a C# code file are not sorted alphabetically by namespace.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the using directives are not sorted alphabetically by namespace. Sorting the using directives alphabetically makes the code cleaner and easier to read, and can help make it easier to identify the namespaces that are being used by the code. The System namespaces are an exception to this rule and will always precede all other namespaces. See SA1208 for more details.</p>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, order the using directives alphabetically by namespace with all the System namespace entries first.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1210:UsingDirectivesMustBeOrderedAlphabeticallyByNamespace&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1210 // UsingDirectivesMustBeOrderedAlphabeticallyByNamespace
#pragma warning restore SA1210 // UsingDirectivesMustBeOrderedAlphabeticallyByNamespace
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1211</rule>
    <ruleTitle><![CDATA[Using alias directives should be ordered alphabetically by alias name]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1211</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1211UsingAliasDirectivesMustBeOrderedAlphabeticallyByAliasName</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1211</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The using-alias directives within a C# code file are not sorted alphabetically by alias name.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the using-alias directives are not sorted alphabetically by alias name. Sorting the using-alias directives alphabetically can make the code cleaner and easier to read, and can help make it easier to identify the namespaces that are being used by the code.</p>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, order the using-alias directives alphabetically by alias name.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1211:UsingAliasDirectivesMustBeOrderedAlphabeticallyByAliasName&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1211 // UsingAliasDirectivesMustBeOrderedAlphabeticallyByAliasName
#pragma warning restore SA1211 // UsingAliasDirectivesMustBeOrderedAlphabeticallyByAliasName
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1212</rule>
    <ruleTitle><![CDATA[Property accessors should follow order]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1212</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1212PropertyAccessorsMustFollowOrder</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1212</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A get accessor appears after a set accessor within a property or indexer.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a get accessor is placed after a set accessor within a property or indexer. To comply with this rule, the get accessor should appear before the set accessor.</p>
<p>For example, the following code would raise an instance of this violation:</p>
<pre><code class="language-csharp">public string Name
{ 
    set { this.name = value; }
    get { return this.name; }
}
</code></pre>
<p>The code below would not raise this violation:</p>
<pre><code class="language-csharp">public string Name
{ 
    get { return this.name; }
    set { this.name = value; }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, place the get accessor before the set accessor.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1212:PropertyAccessorsMustFollowOrder&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1212 // PropertyAccessorsMustFollowOrder
#pragma warning restore SA1212 // PropertyAccessorsMustFollowOrder
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1213</rule>
    <ruleTitle><![CDATA[Event accessors should follow order]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1213</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1213EventAccessorsMustFollowOrder</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1213</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An add accessor appears after a remove accessor within an event.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when an add accessor is placed after a remove accessor within an event. To comply with this rule, the add accessor should appear before the remove accessor.</p>
<p>For example, the following code would raise an instance of this violation:</p>
<pre><code class="language-csharp">public event EventHandler NameChanged
{ 
    remove { this.nameChanged -= value; }
    add { this.nameChanged += value; }
}
</code></pre>
<p>The code below would not raise this violation:</p>
<pre><code class="language-csharp">public event EventHandler NameChanged
{ 
    add { this.nameChanged += value; }
    remove { this.nameChanged -= value; }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, place the add accessor before the remove accessor.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1213:EventAccessorsMustFollowOrder&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1213 // EventAccessorsMustFollowOrder
#pragma warning restore SA1213 // EventAccessorsMustFollowOrder
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1214</rule>
    <ruleTitle><![CDATA[Readonly fields should appear before non-readonly fields]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1214</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1214ReadonlyElementsMustAppearBeforeNonReadonlyElements</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1214</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A readonly field is positioned beneath a non-readonly field.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a readonly field is positioned beneath a non-readonly field.</p>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, place all readonly fields above all non-readonly fields.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.OrderingRules&quot;, &quot;SA1214:ReadonlyElementsMustAppearBeforeNonReadonlyElements&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1214 // ReadonlyElementsMustAppearBeforeNonReadonlyElements
#pragma warning restore SA1214 // ReadonlyElementsMustAppearBeforeNonReadonlyElements
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1216</rule>
    <ruleTitle><![CDATA[Using static directives should be placed at the correct location.]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA1216</h1>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1216UsingStaticDirectivesMustBePlacedAtTheCorrectLocation</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1216</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>A <code>using static</code> directive is positioned at the wrong location (before a regular using directive or after an alias using directive).</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a using static directive is placed before a normal or after an alias using directive. Placing the using static directives together below normal and before alias using-directives can make the code cleaner and easier to read, and can help make it easier to identify the static members used throughout the code.</p>
<h2>How to fix violations</h2>
<p>The fix an instance of this violation, place the <code>using static</code> directive after regular and before alias using directives.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SA1216 // Using static directives should be placed at the correct location
using static System.Math;
#pragma warning restore SA1216 // Using static directives should be placed at the correct location
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1217</rule>
    <ruleTitle><![CDATA[Using static directives should be ordered alphabetically]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA1217</h1>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1217UsingStaticDirectivesMustBeOrderedAlphabetically</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1217</td>
</tr>
<tr>
  <td>Category</td>
  <td>Ordering Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>The <code>using static</code> directives within a C# code file are not sorted alphabetically by full type name.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the <code>using static</code> directives are not sorted alphabetically by full type name. Sorting the <code>using static</code> directives alphabetically makes the code cleaner and easier to read.</p>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, order the <code>using static</code> directives alphabetically by full type name.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SA1217 // Using static directives should be ordered alphabetically
using static System.Math;
#pragma warning restore SA1217 // Using static directives should be ordered alphabetically
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1300</rule>
    <ruleTitle><![CDATA[Element should begin with upper-case letter]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1300</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1300ElementMustBeginWithUpperCaseLetter</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1300</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The name of a C# element does not begin with an upper-case letter.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the names of certain types of elements do not begin with an upper-case letter. The
following types of elements should use an upper-case letter as the first letter of the element name:</p>
<ul>
<li>Namespaces</li>
<li>Classes</li>
<li>Enums</li>
<li>Enum members</li>
<li>Structs</li>
<li>Delegates</li>
<li>Events</li>
<li>Methods</li>
<li>Properties</li>
</ul>
<p>In addition, any field which is public, internal, or marked with the const attribute should begin with an upper-case
letter. Non-private readonly fields should also be named using an upper-case letter.</p>
<p>If the field or variable name is intended to match the name of an item associated with Win32 or COM, and thus needs to
begin with a lower-case letter, place the field or variable within a special <code>NativeMethods</code> class. A <code>NativeMethods</code>
class is any class which contains a name ending in <code>NativeMethods</code>, and is intended as a placeholder for Win32 or COM
wrappers. StyleCop will ignore this violation if the item is placed within a <code>NativeMethods</code> class.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, change the name of the element so that it begins with an upper-case letter, or place
the item within a <code>NativeMethods</code> class if appropriate.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.NamingRules&quot;, &quot;SA1300:ElementMustBeginWithUpperCaseLetter&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1300 // ElementMustBeginWithUpperCaseLetter
#pragma warning restore SA1300 // ElementMustBeginWithUpperCaseLetter
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1302</rule>
    <ruleTitle><![CDATA[Interface names should begin with I]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1302</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1302InterfaceNamesMustBeginWithI</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1302</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The name of a C# interface does not begin with the capital letter I.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the name of an interface does not begin with the capital letter I. Interface names should always begin with I. For example, <em>ICustomer</em>.</p>
<p>If the field or variable name is intended to match the name of an item associated with Win32 or COM, and thus cannot begin with the letter I, place the field or variable within a special <em>NativeMethods</em> class. A NativeMethods class is any class which contains a name ending in NativeMethods, and is intended as a placeholder for Win32 or COM wrappers. StyleCop will ignore this violation if the item is placed within a NativeMethods class.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add the capital letter I to the front of the interface name, or place the item within a NativeMethods class if appropriate.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.NamingRules&quot;, &quot;SA1302:InterfaceNamesMustBeginWithI&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1302 // InterfaceNamesMustBeginWithI
#pragma warning restore SA1302 // InterfaceNamesMustBeginWithI
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1303</rule>
    <ruleTitle><![CDATA[Const field names should begin with upper-case letter]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1303</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1303ConstFieldNamesMustBeginWithUpperCaseLetter</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1303</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The name of a constant C# field should begin with an upper-case letter.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the name of a field marked with the <em>const</em> attribute does not begin with an upper-case letter.</p>
<p>If the field or variable name is intended to match the name of an item associated with Win32 or COM, and thus needs to begin with a lower-case letter, place the field or variable within a special <em>NativeMethods</em> class. A NativeMethods class is any class which contains a name ending in NativeMethods, and is intended as a placeholder for Win32 or COM wrappers. StyleCop will ignore this violation if the item is placed within a NativeMethods class.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, change the name of the constant field so that it begins with an upper-case letter, or place the item within a NativeMethods class if appropriate.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.NamingRules&quot;, &quot;SA1303:ConstFieldNamesMustBeginWithUpperCaseLetter&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1303 // ConstFieldNamesMustBeginWithUpperCaseLetter
#pragma warning restore SA1303 // ConstFieldNamesMustBeginWithUpperCaseLetter
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1304</rule>
    <ruleTitle><![CDATA[Non-private readonly fields should begin with upper-case letter]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1304</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1304NonPrivateReadonlyFieldsMustBeginWithUpperCaseLetter</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1304</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The name of a non-private readonly C# field should being with an upper-case letter.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the name of a readonly field which is not private does not begin with an upper-case letter. Non-private readonly fields should always start with an upper-case letter.</p>
<p>If the field or variable name is intended to match the name of an item associated with Win32 or COM, and thus needs to begin with a lower-case letter, place the field or variable within a special <em>NativeMethods</em> class. A NativeMethods class is any class which contains a name ending in NativeMethods, and is intended as a placeholder for Win32 or COM wrappers. StyleCop will ignore this violation if the item is placed within a NativeMethods class.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, change the name of the readonly field so that it begins with an upper-case letter, make the field private, or place the item within a NativeMethods class if appropriate.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.NamingRules&quot;, &quot;SA1304:NonPrivateReadonlyFieldsMustBeginWithUpperCaseLetter&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1304 // NonPrivateReadonlyFieldsMustBeginWithUpperCaseLetter
#pragma warning restore SA1304 // NonPrivateReadonlyFieldsMustBeginWithUpperCaseLetter
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1305</rule>
    <ruleTitle><![CDATA[Field names should not use Hungarian notation]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1305</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1305FieldNamesMustNotUseHungarianNotation</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1305</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<p>:bulb: This rule is disabled by default.</p>
<h2>Cause</h2>
<p>The name of a field or variable in C# uses Hungarian notation.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when Hungarian notation is used in the naming of fields and variables. The use of Hungarian notation has become widespread in C++ code, but the trend in C# is to use longer, more descriptive names for variables, which are not based on the type of the variable but which instead describe what the variable is used for.</p>
<p>In addition, modern code editors such as Visual Studio make it easy to identify type information for a variable or field, typically by hovering the mouse cursor over the variable name. This reduces the need for Hungarian notation.</p>
<p>StyleCop assumes that any variable name that begins with one or two lower-case letters followed by an upper-case letter is making use of Hungarian notation, and will flag a violation of this rule in each case. It is possible to declare certain prefixes as legal, in which case they will be ignored. For example, a variable named <em>onExecute</em> will appear to StyleCop to be using Hungarian notation, when in reality it is not. Thus, the <em>on</em> prefix should be flagged as an allowed prefix.</p>
<p>To configure the list of allowed prefixes, bring up the StyleCop settings for a project, and navigate to the Hungarian tab, as shown below:</p>
<p><img src="Images/HungarianSettings.JPG" alt="" /></p>
<p>Adding a one or two letter prefix to this list will cause StyleCop to ignore variables or fields which begin with this prefix.</p>
<p>If the field or variable name is intended to match the name of an item associated with Win32 or COM, and thus needs to use Hungarian notation, place the field or variable within a special <em>NativeMethods</em> class. A NativeMethods class is any class which contains a name ending in NativeMethods, and is intended as a placeholder for Win32 or COM wrappers. StyleCop will ignore this violation if the item is placed within a NativeMethods class.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the Hungarian notation from the field or variable name, or place the item within a NativeMethods class if appropriate.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.NamingRules&quot;, &quot;SA1305:FieldNamesMustNotUseHungarianNotation&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1305 // FieldNamesMustNotUseHungarianNotation
#pragma warning restore SA1305 // FieldNamesMustNotUseHungarianNotation
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1306</rule>
    <ruleTitle><![CDATA[Field names should begin with lower-case letter]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1306</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1306FieldNamesMustBeginWithLowerCaseLetter</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1306</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The name of a field in C# does not begin with a lower-case letter.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the name of a field begins with an upper-case letter. Constants, non-private
readonly fields and static readonly fields should always start with an uppercase letter, whilst private readonly fields
should start with a lowercase letter. Also, public or internal fields should always start with an uppercase letter.</p>
<p>If the field name is intended to match the name of an item associated with Win32 or COM, and thus needs to begin with an
upper-case letter, place the field within a special <code>NativeMethods</code> class. A <code>NativeMethods</code> class is any class which
contains a name ending in <code>NativeMethods</code>, and is intended as a placeholder for Win32 or COM wrappers. StyleCop will
ignore this violation if the item is placed within a <code>NativeMethods</code> class.</p>
<blockquote>
<p>:warning: This rule deviates from the corresponding rule in StyleCop &quot;classic&quot; in the following way:</p>
<p>This rule only checks the names of fields. SA1306 in StyleCop &quot;classic&quot; checks fields, parameters, and local
variables.</p>
</blockquote>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, change the name of the field so that it begins with a lower-case letter, or place the
item within a <code>NativeMethods</code> class if appropriate.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.NamingRules&quot;, &quot;SA1306:FieldNamesMustBeginWithLowerCaseLetter&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1306 // FieldNamesMustBeginWithLowerCaseLetter
private int Field = 3;
#pragma warning restore SA1306 // FieldNamesMustBeginWithLowerCaseLetter
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1307</rule>
    <ruleTitle><![CDATA[Accessible fields should begin with upper-case letter]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1307</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1307AccessibleFieldsMustBeginWithUpperCaseLetter</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1307</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The name of a public or internal field in C# does not begin with an upper-case letter.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the name of a public or internal field begins with a lower-case letter. Public or internal fields should being with an upper-case letter.</p>
<p>If the field or variable name is intended to match the name of an item associated with Win32 or COM, and thus needs to start with a lower-case letter, place the field or variable within a special <em>NativeMethods</em> class. A NativeMethods class is any class which contains a name ending in NativeMethods, and is intended as a placeholder for Win32 or COM wrappers. StyleCop will ignore this violation if the item is placed within a NativeMethods class.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, change the name of the field so that it begins with an upper-case letter, or place the item within a NativeMethods class if appropriate.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.NamingRules&quot;, &quot;SA1307:AccessibleFieldsMustBeginWithUpperCaseLetter&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1307 // AccessibleFieldsMustBeginWithUpperCaseLetter
#pragma warning restore SA1307 // AccessibleFieldsMustBeginWithUpperCaseLetter
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1308</rule>
    <ruleTitle><![CDATA[Variable names should not be prefixed]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1308</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1308VariableNamesMustNotBePrefixed</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1308</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A field name in C# is prefixed with <em>m_</em> or <em>s_</em>.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a field name is prefixed by <em>m_</em> or <em>s_</em>.</p>
<p>By default, StyleCop disallows the use of underscores, <em>m_</em>, etc., to mark local class fields, in favor of the 'this.' prefix. The advantage of using 'this.' is that it applies equally to all element types including methods, properties, etc., and not just fields, making all calls to class members instantly recognizable, regardless of which editor is being used to view the code. Another advantage is that it creates a quick, recognizable differentiation between instance members and static members, which will not be prefixed.</p>
<p>If the field or variable name is intended to match the name of an item associated with Win32 or COM, and thus needs to begin with the prefix, place the field or variable within a special <em>NativeMethods</em> class. A NativeMethods class is any class which contains a name ending in NativeMethods, and is intended as a placeholder for Win32 or COM wrappers. StyleCop will ignore this violation if the item is placed within a NativeMethods class.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the prefix from the beginning of the field name, or place the item within a NativeMethods class if appropriate.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.NamingRules&quot;, &quot;SA1308:VariableNamesMustNotBePrefixed&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1308 // VariableNamesMustNotBePrefixed
#pragma warning restore SA1308 // VariableNamesMustNotBePrefixed
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1309</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1309FieldNamesMustNotBeginWithUnderscore</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1309</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A field name in C# begins with an underscore.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a field name begins with an underscore.</p>
<p>By default, StyleCop disallows the use of underscores, <em>m_</em>, etc., to mark local class fields, in favor of the 'this.' prefix. The advantage of using 'this.' is that it applies equally to all element types including methods, properties, etc., and not just fields, making all calls to class members instantly recognizable, regardless of which editor is being used to view the code. Another advantage is that it creates a quick, recognizable differentiation between instance members and static members, which will not be prefixed.</p>
<p>If the field or variable name is intended to match the name of an item associated with Win32 or COM, and thus needs to begin with an underscore, place the field or variable within a special <em>NativeMethods</em> class. A NativeMethods class is any class which contains a name ending in NativeMethods, and is intended as a placeholder for Win32 or COM wrappers. StyleCop will ignore this violation if the item is placed within a NativeMethods class.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the underscore from the beginning of the field name, or place the item within a NativeMethods class if appropriate.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.NamingRules&quot;, &quot;SA1309:FieldNamesMustNotBeginWithUnderscore&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1309 // FieldNamesMustNotBeginWithUnderscore
#pragma warning restore SA1309 // FieldNamesMustNotBeginWithUnderscore
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1310</rule>
    <ruleTitle><![CDATA[Field names should not contain underscore]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1310</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1310FieldNamesMustNotContainUnderscore</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1310</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A field name in C# contains an underscore.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a field name contains an underscore. Fields and variables should be named using descriptive, readable wording which describes the function of the field or variable. Typically, these names will be written using camel case, and should not use underscores. For example, use <em>customerPostCode</em> rather than <em>customer_post_code</em>.</p>
<p>If the field or variable name is intended to match the name of an item associated with Win32 or COM, and thus needs to include underscores, place the field or variable within a special <em>NativeMethods</em> class. A NativeMethods class is any class which contains a name ending in NativeMethods, and is intended as a placeholder for Win32 or COM wrappers. StyleCop will ignore this violation if the item is placed within a NativeMethods class.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the underscore from the name of the field, or place the item within a NativeMethods class if appropriate.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.NamingRules&quot;, &quot;SA1310:FieldNamesMustNotContainUnderscore&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1310 // FieldNamesMustNotContainUnderscore
#pragma warning restore SA1310 // FieldNamesMustNotContainUnderscore
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1311</rule>
    <ruleTitle><![CDATA[Static readonly fields should begin with upper-case letter]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1311</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1311StaticReadonlyFieldsMustBeginWithUpperCaseLetter</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1311</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The name of a static readonly field does not begin with an upper-case letter.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the name of a static readonly field begins with a lower-case letter.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, change the name of the field so that it begins with an upper-case letter.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.NamingRules&quot;, &quot;SA1311:StaticReadonlyFieldsMustBeginWithUpperCaseLetter&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1311 // StaticReadonlyFieldsMustBeginWithUpperCaseLetter
#pragma warning restore SA1311 // StaticReadonlyFieldsMustBeginWithUpperCaseLetter
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1312</rule>
    <ruleTitle><![CDATA[Variable names should begin with lower-case letter]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1312</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1312VariableNamesMustBeginWithLowerCaseLetter</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1312</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>The name of a variable in C# does not begin with a lower-case letter.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the name of a variable does not begin with a lower-case letter.</p>
<p>If the variable name is intended to match the name of an item associated with Win32 or COM, and thus needs to begin with
an upper-case letter, place the variable within a special <code>NativeMethods</code> class. A <code>NativeMethods</code> class is any class
which contains a name ending in <code>NativeMethods</code>, and is intended as a placeholder for Win32 or COM wrappers. StyleCop
will ignore this violation if the item is placed within a <code>NativeMethods</code> class.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, change the name of the variable so that it begins with a lower-case letter, or place
the item within a <code>NativeMethods</code> class if appropriate.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SA1312 // VariableNamesMustBeginWithLowerCaseLetter
int Variable = 3;
#pragma warning restore SA1312 // VariableNamesMustBeginWithLowerCaseLetter
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1313</rule>
    <ruleTitle><![CDATA[Parameter names should begin with lower-case letter]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1313</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1313ParameterNamesMustBeginWithLowerCaseLetter</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1313</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>The name of a parameter in C# does not begin with a lower-case letter.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the name of a parameter does not begin with a lower-case letter.</p>
<p>An exception to this rule is made for lambda parameters named <code>_</code> and <code>__</code>. These parameters are often used to designate a
placeholder parameter which is not actually used in the body of the lambda expression.</p>
<p>If the parameter name is intended to match the name of an item associated with Win32 or COM, and thus needs to begin
with an upper-case letter, place the parameter within a special <code>NativeMethods</code> class. A <code>NativeMethods</code> class is any
class which contains a name ending in <code>NativeMethods</code>, and is intended as a placeholder for Win32 or COM wrappers.
StyleCop will ignore this violation if the item is placed within a <code>NativeMethods</code> class.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, change the name of the parameter so that it begins with a lower-case letter, or place
the item within a <code>NativeMethods</code> class if appropriate.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SA1313 // ParameterNamesMustBeginWithLowerCaseLetter
void Method(int Parameter)
#pragma warning restore SA1313 // ParameterNamesMustBeginWithLowerCaseLetter
{
}
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1314</rule>
    <ruleTitle><![CDATA[Type parameter names should begin with T]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1314</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1314TypeParameterNamesMustBeginWithT</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1314</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>The name of a C# type parameter does not begin with the capital letter T.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the name of a C# type parameter does not begin with the capital letter T. Type parameter names should always begin with T. For example, <em>T</em> or <em>TKey</em>.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add the capital letter T to the front of the type parameter name.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.NamingRules&quot;, &quot;SA1314:TypeParameterNamesMustBeginWithT&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1314 // Type parameter names should begin with T
#pragma warning restore SA1314 // Type parameter names should begin with T
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1316</rule>
    <ruleTitle><![CDATA[Tuple element names should use correct casing]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1316</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1316TupleElementNamesShouldUseCorrectCasing</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1316</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.
:memo: This rule is only active for C# 7.0 and higher</p>
<h2>Cause</h2>
<p>Element names within a tuple type should have the correct casing.</p>
<h2>Rule description</h2>
<p>Tuple types with element names should use the configured casing for the element names (see <a href="Configuration.md">Configuration.md</a> for details).  See the documentation on <a href="https://docs.microsoft.com/en-us/dotnet/csharp/tuples">tuple types</a> for information on how to work with tuples in C# 7.</p>
<p>For example, the following code would produce a violation of this rule (with default settings):</p>
<pre><code class="language-csharp">public class ExampleClass
{
  public (int ValueA, int ValueB) ExampleMethod() // SA1316
  {
  }
}
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">public class ExampleClass
{
  public (int valueA, int valueB) ExampleMethod()
  {
  }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, correct the casing of the tuple element name.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.NamingRules&quot;, &quot;SA1316:TupleElementNamesShouldUseCorrectCasing&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1316 // Tuple element names should use correct casing
#pragma warning restore SA1316 // Tuple element names should use correct casing
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1400</rule>
    <ruleTitle><![CDATA[Access modifier should be declared]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1400</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1400AccessModifierMustBeDeclared</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1400</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The access modifier for a C# element has not been explicitly defined.</p>
<h2>Rule description</h2>
<p>C# allows elements to be defined without an access modifier. Depending upon the type of element, C# will automatically assign an access level to the element in this case.</p>
<p>This rule requires an access modifier to be explicitly defined for every element. This removes the need for the reader to make assumptions about the code, improving the readability of the code.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add an access modifier to the declaration of the element.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainabilityRules&quot;, &quot;SA1400:AccessModifierMustBeDeclared&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1400 // AccessModifierMustBeDeclared
#pragma warning restore SA1400 // AccessModifierMustBeDeclared
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1401</rule>
    <ruleTitle><![CDATA[Fields should be private]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1401</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1401FieldsMustBePrivate</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1401</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A field within a C# class has an access modifier other than private.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever a field in a class is given non-private access. For maintainability reasons, properties should always be used as the mechanism for exposing fields outside of a class, and fields should always be declared with private access. This allows the internal implementation of the property to change over time without changing the interface of the class.</p>
<p>Fields located within C# structs are allowed to have any access level.</p>
<p>Fields that are static and readonly will not raise a violation. These kinds of fields are commonly used to represent a constant value when the <code>const</code> keyword cannot be used, and therefore they are exempt from this rule.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, make the field private and add a property to expose the field outside of the class.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainabilityRules&quot;, &quot;SA1401:FieldsMustBePrivate&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1401 // FieldsMustBePrivate
#pragma warning restore SA1401 // FieldsMustBePrivate
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1402</rule>
    <ruleTitle><![CDATA[File may only contain a single type]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1402</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1402FileMayOnlyContainASingleType</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1402</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# code file contains more than one unique type.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a C# file contains more than one type. To increase long-term maintainability of the code-base, each type should be placed in its own file, and file names should reflect the name of the type within the file.</p>
<p>It is possible to configure which kind of types this rule should affect. By default, it allows delegates, enums, structs and interfaces to be placed together with a class.</p>
<p>It is also possible to place multiple parts of the same partial type within the same file.</p>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, move each type into its own file.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainabilityRules&quot;, &quot;SA1402:FileMayOnlyContainASingleType&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1402 // FileMayOnlyContainASingleType
#pragma warning restore SA1402 // FileMayOnlyContainASingleType
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1403</rule>
    <ruleTitle><![CDATA[File may only contain a single namespace]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1403</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1403FileMayOnlyContainASingleNamespace</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1403</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# code file contains more than one namespace.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a C# file contains more than one namespace. To increase long-term maintainability of the code-base, each file should contain at most one namespace.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that the file only contains a single namespace.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainabilityRules&quot;, &quot;SA1403:FileMayOnlyContainASingleNamespace&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1403 // FileMayOnlyContainASingleNamespace
#pragma warning restore SA1403 // FileMayOnlyContainASingleNamespace
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1404</rule>
    <ruleTitle><![CDATA[Code analysis suppression should have justification]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1404</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1404CodeAnalysisSuppressionMustHaveJustification</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1404</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A Code Analysis SuppressMessage attribute does not include a justification.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the code contains a Code Analysis SuppressMessage attribute, but a justification for the suppression has not been provided within the attribute. Whenever a Code Analysis rule is suppressed, a justification should be provided. This can increase the long-term maintainability of the code.</p>
<pre><code class="language-csharp">[SuppressMessage(&quot;Microsoft.Performance&quot;, &quot;CA1804:RemoveUnusedLocals&quot;, Justification = &quot;Used during unit testing&quot;)]
public bool Enable()
{
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, add a Justification tag and justification text to the SuppressMessage attribute describing the reason for the suppression.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainabilityRules&quot;, &quot;SA1404:CodeAnalysisSuppressionMustHaveJustification&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1404 // CodeAnalysisSuppressionMustHaveJustification
#pragma warning restore SA1404 // CodeAnalysisSuppressionMustHaveJustification
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1405</rule>
    <ruleTitle><![CDATA[Debug.Assert should provide message text]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1405</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1405DebugAssertMustProvideMessageText</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1405</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A call to Debug.Assert in C# code does not include a descriptive message.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the code contains a call to Debug.Assert which does not provide a description for the end-user. For example, the following assert includes a description message:</p>
<pre><code class="language-csharp">Debug.Assert(value != true, &quot;The value must always be true.&quot;);
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add a descriptive message to the assert which will appear to the end user when the assert is fired.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainabilityRules&quot;, &quot;SA1405:DebugAssertMustProvideMessageText&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1405 // DebugAssertMustProvideMessageText
#pragma warning restore SA1405 // DebugAssertMustProvideMessageText
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1406</rule>
    <ruleTitle><![CDATA[Debug.Fail should provide message text]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1406</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1406DebugFailMustProvideMessageText</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1406</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A call to Debug.Fail in C# code does not include a descriptive message.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the code contains a call to Debug.Fail which does not provide a description for the end-user. For example, the following call includes a description message:</p>
<pre><code class="language-csharp">Debug.Fail(&quot;The code should never reach this point.&quot;);
</code></pre>
<h2>How to fix violations</h2>
<p>To fix an instance of this violation, add a descriptive message to the Debug.Fail call which will appear to the end user when the assert is fired.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainabilityRules&quot;, &quot;SA1406:DebugFailMustProvideMessageText&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1406 // DebugFailMustProvideMessageText
#pragma warning restore SA1406 // DebugFailMustProvideMessageText
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1407</rule>
    <ruleTitle><![CDATA[Arithmetic expressions should declare precedence]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1407</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1407ArithmeticExpressionsMustDeclarePrecedence</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1407</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# statement contains a complex arithmetic expression which omits parenthesis around operators.</p>
<h2>Rule description</h2>
<p>C# maintains a hierarchy of precedence for arithmetic operators. It is possible in C# to string multiple arithmetic operations together in one statement without wrapping any of the operations in parenthesis, in which case the compiler will automatically set the order and precedence of the operations based on these pre-established rules. For example:</p>
<pre><code class="language-csharp">int x = 5 + y * b / 6 % z - 2;
</code></pre>
<p>Although this code is legal, it is not highly readable or maintainable. In order to achieve full understanding of this code, the developer must know and understand the basic operator precedence rules in C#.</p>
<p>This rule is intended to increase the readability and maintainability of this type of code, and to reduce the risk of introducing bugs later, by forcing the developer to insert parenthesis to explicitly declare the operator precedence. The example below shows multiple arithmetic operations surrounded by parenthesis:</p>
<pre><code class="language-csharp">int x = 5 + (y * ((b / 6) % z)) - 2;
</code></pre>
<p>Inserting parenthesis makes the code more obvious and easy to understand, and removes the need for the reader to make assumptions about the code.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, insert parenthesis within the arithmetic expression to declare the precedence of the operations.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainabilityRules&quot;, &quot;SA1407:ArithmeticExpressionsMustDeclarePrecedence&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1407 // ArithmeticExpressionsMustDeclarePrecedence
#pragma warning restore SA1407 // ArithmeticExpressionsMustDeclarePrecedence
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1408</rule>
    <ruleTitle><![CDATA[Conditional expressions should declare precedence]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1408</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1408ConditionalExpressionsMustDeclarePrecedence</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1408</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# statement contains a complex conditional expression which omits parenthesis around operators.</p>
<h2>Rule description</h2>
<p>C# maintains a hierarchy of precedence for conditional operators. It is possible in C# to string multiple conditional operations together in one statement without wrapping any of the operations in parenthesis, in which case the compiler will automatically set the order and precedence of the operations based on these pre-established rules. For example:</p>
<pre><code class="language-csharp">if (x || y &amp;&amp; z &amp;&amp; a || b)
{
}
</code></pre>
<p>Although this code is legal, it is not highly readable or maintainable. In order to achieve full understanding of this code, the developer must know and understand the basic operator precedence rules in C#.</p>
<p>This rule is intended to increase the readability and maintainability of this type of code, and to reduce the risk of introducing bugs later, by forcing the developer to insert parenthesis to explicitly declare the operator precedence. For example, a developer could write this code as:</p>
<pre><code class="language-csharp">if ((x || y) &amp;&amp; z &amp;&amp; (a || b))
{
}
</code></pre>
<p>or</p>
<pre><code class="language-csharp">if (x || (y &amp;&amp; z &amp;&amp; a) || b)
{
}
</code></pre>
<p>Inserting parenthesis makes the code more obvious and easy to understand, and removes the need for the reader to make assumptions about the code.</p>
<h2>How to fix violations</h2>
<p>Insert parenthesis within the conditional expression to declare the precedence of the operations.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainabilityRules&quot;, &quot;SA1408:ConditionalExpressionsMustDeclarePrecedence&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1408 // ConditionalExpressionsMustDeclarePrecedence
#pragma warning restore SA1408 // ConditionalExpressionsMustDeclarePrecedence
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1410</rule>
    <ruleTitle><![CDATA[Remove delegate parenthesis when possible]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1410</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1410RemoveDelegateParenthesisWhenPossible</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1410</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A call to a C# anonymous method does not contain any method parameters, yet the statement still includes parenthesis.</p>
<h2>Rule description</h2>
<p>When an anonymous method does not contain any method parameters, the parenthesis around the parameters are optional.</p>
<p>A violation of this rule occurs when the parenthesis are present on an anonymous method call which takes no method parameters. For example:</p>
<pre><code class="language-csharp">this.Method(delegate() { return 2; });
</code></pre>
<p>The parenthesis are unnecessary and should be removed:</p>
<pre><code class="language-csharp">this.Method(delegate { return 2; });
</code></pre>
<h2>How to fix violations</h2>
<p>Remove the unnecessary parenthesis after the delegate keyword.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainabilityRules&quot;, &quot;SA1410:RemoveDelegateParenthesisWhenPossible&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1410 // RemoveDelegateParenthesisWhenPossible
#pragma warning restore SA1410 // RemoveDelegateParenthesisWhenPossible
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1411</rule>
    <ruleTitle><![CDATA[Attribute constructor should not use unnecessary parenthesis]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1411</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1411AttributeConstructorMustNotUseUnnecessaryParenthesis</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1411</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An attribute declaration does not contain any parameters, yet it still includes parenthesis.</p>
<h2>Rule description</h2>
<p>When an attribute declaration does not contain any parameters, the parenthesis around the parameters are optional.</p>
<p>A violation of this rule occurs when unnecessary parenthesis have been used in an attribute constructor. For example:</p>
<pre><code class="language-csharp">[Serializable()]
</code></pre>
<p>The parenthesis are unnecessary and should be removed:</p>
<pre><code class="language-csharp">[Serializable]
</code></pre>
<h2>How to fix violations</h2>
<p>Remove the unnecessary parenthesis.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainabilityRules&quot;, &quot;SA1411:AttributeConstructorMustNotUseUnnecessaryParenthesis&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1411 // AttributeConstructorMustNotUseUnnecessaryParenthesis
#pragma warning restore SA1411 // AttributeConstructorMustNotUseUnnecessaryParenthesis
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1412</rule>
    <ruleTitle><![CDATA[Store files as UTF-8 with byte order mark]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA1412</h1>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1412StoreFilesAsUtf8</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1412</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>The encoding of the file is not UTF-8 with byte order mark.</p>
<h2>Rule description</h2>
<p>Storing files in this encoding ensures that the files are always treated the same way by the compiler,
even when compiled on systems with varying default system encodings. In addition,
this encoding is the most widely supported encoding for features like visual diffs on GitHub and other tooling.
This encoding is also the default encoding used when creating new C# source files within Visual Studio.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, convert the files encoding to UTF-8 with byte order mark</p>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1413</rule>
    <ruleTitle><![CDATA[Use trailing comma in multi-line initializers]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA1413</h1>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1413UseTrailingCommasInMultiLineInitializers</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1413</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>The last statement in a multi-line C# initializer or list is missing a trailing comma.</p>
<h3>Rationale</h3>
<p>This rule is specifically designed to work well with the most widely used source control systems as an aid to long-term
code review. By placing a comma on the last line of a multi-line sequence, developers who append an item to the list or
reorder the list at some point in the future will not need to modify any more lines than absolutely necessary for the
change. As a result, the size of the subsequent code review is minimized and focused, and tools like <strong>git blame</strong>
continue to show the original author and commit for the item that was previously last in the list.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the last statement of a C# initializer or list is missing a trailing comma.</p>
<p>For example, the following code would generate one instance of this violation:</p>
<pre><code class="language-csharp">var x = new Barnacle
{
    Age = 100,
    Height = 0.2M,
    Weight = 0.88M
};
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">var x = new Barnacle
{
    Age = 100,
    Height = 0.2M,
    Weight = 0.88M,
};
</code></pre>
<p>This diagnostic is also reported for other forms of comma-separated list, such as enum members.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add a trailing comma to the last statement in the initializer.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainabilityRules&quot;, &quot;SA1413:UseTrailingCommasInMultiLineInitializers&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1413 // UseTrailingCommasInMultiLineInitializers
#pragma warning restore SA1413 // UseTrailingCommasInMultiLineInitializers
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1414</rule>
    <ruleTitle><![CDATA[Tuple types in signatures should have element names]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1414</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1414TupleTypesInSignaturesShouldHaveElementNames</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1414</td>
</tr>
<tr>
  <td>Category</td>
  <td>Maintainability Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.
:memo: This rule is only active for C# 7.0 and higher</p>
<h2>Cause</h2>
<p>A tuple type without element names is present in a member declaration.</p>
<h2>Rule description</h2>
<p>Tuple types appearing in member declarations should have explicitly named elements.  See the documentation on <a href="https://docs.microsoft.com/en-us/dotnet/csharp/tuples">tuple types</a> for information on how to work with tuples in C# 7.</p>
<p>For example, the following code would produce a violation of this rule:</p>
<pre><code class="language-csharp">public class ExampleClass
{
  public (int, int) ExampleMethod() // SA1414
  {
  }
}
</code></pre>
<p>The following code would not produce any violations:</p>
<pre><code class="language-csharp">public class ExampleClass
{
  public (int valueA, int valueB) ExampleMethod()
  {
  }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, provide an element name for each tuple element.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.MaintainAbilityRules&quot;, &quot;SA1414:TupleTypesInSignaturesShouldHaveElementNames&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1414 // Tuple types appearing in member declarations should have explicitly named tuple elements
#pragma warning restore SA1414 // Tuple types appearing in member declarations should have explicitly named tuple elements
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1500</rule>
    <ruleTitle><![CDATA[Braces for multi-line statements should not share line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1500</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1500BracesForMultiLineStatementsMustNotShareLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1500</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The opening or closing brace within a C# statement, element, or expression is not placed on its own line.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the opening or closing brace within a statement, element, or expression is not placed on its own line. For example:</p>
<pre><code class="language-csharp">public object Method()
{
    lock (this) {
        return this.value;
    }
}
</code></pre>
<p>When StyleCop checks this code, a violation of this rule will occur because the opening brace of the lock statement is placed on the same line as the lock keyword, rather than being placed on its own line, as follows:</p>
<pre><code class="language-csharp">public object Method()
{
    lock (this) 
    {
        return this.value;
    }
}
</code></pre>
<p>A violation will also occur if the closing brace shares a line with other code. For example:</p>
<pre><code class="language-csharp">public object Method()
{
    lock (this) 
    {
        return this.value; }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that both the opening and closing braces are placed on their own line, and do not share the line with any other code, other than comments.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1500:BracesForMultiLineStatementsMustNotShareLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1500 // BracesForMultiLineStatementsMustNotShareLine
#pragma warning restore SA1500 // BracesForMultiLineStatementsMustNotShareLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1501</rule>
    <ruleTitle><![CDATA[Statement should not be on a single line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1501</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1501StatementMustNotBeOnSingleLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1501</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# statement containing opening and closing braces is written completely on a single line.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a statement that is wrapped in opening and closing braces is written on a single line. For example:</p>
<pre><code class="language-csharp">public object Method()
{
    lock (this) { return this.value; }
}
</code></pre>
<p>When StyleCop checks this code, a violation of this rule will occur because the entire lock statement is written on one line. The statement should be written across multiple lines, with the opening and closing braces each on their own line, as follows:</p>
<pre><code class="language-csharp">public object Method()
{
    lock (this) 
    {
        return this.value; 
    }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, rewrite the statement so that it expands across multiple lines.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1501:StatementMustNotBeOnSingleLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1501 // StatementMustNotBeOnSingleLine
#pragma warning restore SA1501 // StatementMustNotBeOnSingleLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1502</rule>
    <ruleTitle><![CDATA[Element should not be on a single line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1502</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1502ElementMustNotBeOnSingleLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1502</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# element containing opening and closing braces is written completely on a single line.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when an element that is wrapped in opening and closing braces is written on a single line. For example:</p>
<pre><code class="language-csharp">public object Method() { return null; }
</code></pre>
<p>When StyleCop checks this code, a violation of this rule will occur because the entire method is written on one line. The method should be written across multiple lines, with the opening and closing braces each on their own line, as follows:</p>
<pre><code class="language-csharp">public object Method()
{
    return null; 
}
</code></pre>
<p>As an exception to this rule, accessors within properties, events, or indexers are allowed to be written all on a single line, as long as the accessor is short.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, rewrite the element so that it expands across multiple lines.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1502:ElementMustNotBeOnSingleLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1502 // ElementMustNotBeOnSingleLine
#pragma warning restore SA1502 // ElementMustNotBeOnSingleLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1503</rule>
    <ruleTitle><![CDATA[Braces should not be omitted]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1503</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1503BracesMustNotBeOmitted</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1503</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The opening and closing braces for a C# statement have been omitted.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the opening and closing braces for a statement have been omitted. In C#, some types of statements may optionally include braces. Examples include if, while, and for statements. For example, an if-statement may be written without braces:</p>
<pre><code class="language-csharp">if (true) 
    return this.value;
</code></pre>
<p>Although this is legal in C#, StyleCop always requires the braces to be present, to increase the readability and maintainability of the code.</p>
<p>When the braces are omitted, it is possible to introduce an error in the code by inserting an additional statement beneath the if-statement. For example:</p>
<pre><code class="language-csharp">if (true) 
    this.value = 2;       
    return this.value;
</code></pre>
<p>Glancing at this code, it appears as if both the assignment statement and the return statement are children of the if-statement. In fact, this is not true. Only the assignment statement is a child of the if-statement, and the return statement will always execute regardless of the outcome of the if-statement.</p>
<p>StyleCop always requires the opening and closing braces to be present, to prevent these kinds of errors:</p>
<pre><code class="language-csharp">if (true) 
{
    this.value = 2;
    return this.value;
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, wrap the body of the statement in braces.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1503:BracesMustNotBeOmitted&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1503 // BracesMustNotBeOmitted
#pragma warning restore SA1503 // BracesMustNotBeOmitted
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1504</rule>
    <ruleTitle><![CDATA[All accessors should be single-line or multi-line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1504</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1504AllAccessorsMustBeSingleLineOrMultiLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1504</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>Within a C# property, indexer or event, at least one of the child accessors is written on a single line, and at least one of the child accessors is written across multiple lines.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the accessors within a property, indexer or event are not consistently written on a single line or on multiple lines. This rule is intended to increase the readability of the code by requiring all of the accessors within an element to be formatted in the same way.</p>
<p>For example, the following property would generate a violation of this rule, because one accessor is written on a single line while the other accessor snaps multiple lines.</p>
<pre><code class="language-csharp">public bool Enabled
{
    get { return this.enabled; }

    set
    {
        this.enabled = value;
    }
}
</code></pre>
<p>The violation can be avoided by placing both accessors on a single line, or expanding both accessors across multiple lines:</p>
<pre><code class="language-csharp">public bool Enabled
{
    get { return this.enabled; }
    set { this.enabled = value; }
}


public bool Enabled
{
    get 
    { 
        return this.enabled; 
    }

    set 
    { 
        this.enabled = value;
    }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, write each accessor on a single line if the accessors are short, or expand both accessors across multiple lines if the accessors are longer.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1504:AllAccessorsMustBeSingleLineOrMultiLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1504 // AllAccessorsMustBeSingleLineOrMultiLine
#pragma warning restore SA1504 // AllAccessorsMustBeSingleLineOrMultiLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1505</rule>
    <ruleTitle><![CDATA[Opening braces should not be followed by blank line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1505</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1505OpeningBracesMustNotBeFollowedByBlankLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1505</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An opening brace within a C# element, statement, or expression is followed by a blank line.</p>
<h2>Rule description</h2>
<p>To improve the readability of the code, StyleCop requires blank lines in certain situations, and prohibits blank lines in other situations. This results in a consistent visual pattern across the code, which can improve recognition and readability of unfamiliar code.</p>
<p>A violation of this rule occurs when an opening brace is followed by a blank line. For example:</p>
<pre><code class="language-csharp">public bool Enabled
{

    get 
    { 

        return this.enabled; 
    }
}
</code></pre>
<p>The code above would generate two instances of this violation, since there are two places where opening braces are followed by blank lines.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the blank line following the opening brace.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1505:OpeningBracesMustNotBeFollowedByBlankLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1505 // OpeningBracesMustNotBeFollowedByBlankLine
#pragma warning restore SA1505 // OpeningBracesMustNotBeFollowedByBlankLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1506</rule>
    <ruleTitle><![CDATA[Element documentation headers should not be followed by blank line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1506</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1506ElementDocumentationHeadersMustNotBeFollowedByBlankLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1506</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An element documentation header above a C# element is followed by a blank line.</p>
<h2>Rule description</h2>
<p>To improve the readability of the code, StyleCop requires blank lines in certain situations, and prohibits blank lines in other situations. This results in a consistent visual pattern across the code, which can improve recognition and readability of unfamiliar code.</p>
<p>A violation of this rule occurs when the element documentation header above an element is followed by a blank line. For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Gets a value indicating whether the control is enabled.
/// &lt;/summary&gt;

public bool Enabled
{
    get { return this.enabled; }
}
</code></pre>
<p>The code above would generate an instance of this violation, since the documentation header is followed by a blank line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the blank line following the documentation header.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1506:ElementDocumentationHeadersMustNotBeFollowedByBlankLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1506 // ElementDocumentationHeadersMustNotBeFollowedByBlankLine
#pragma warning restore SA1506 // ElementDocumentationHeadersMustNotBeFollowedByBlankLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1507</rule>
    <ruleTitle><![CDATA[Code should not contain multiple blank lines in a row]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1507</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1507CodeMustNotContainMultipleBlankLinesInARow</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1507</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The C# code contains multiple blank lines in a row.</p>
<h2>Rule description</h2>
<p>To improve the readability of the code, StyleCop requires blank lines in certain situations, and prohibits blank lines in other situations. This results in a consistent visual pattern across the code, which can improve recognition and readability of unfamiliar code.</p>
<p>A violation of this rule occurs when the code contains more than one blank line in a row. For example:</p>
<pre><code class="language-csharp">public bool Enabled
{
    get 
    { 
        Console.WriteLine(&quot;Getting the enabled flag.&quot;);


        return this.enabled; 
    }
}
</code></pre>
<p>The code above would generate an instance of this violation, since it contains blank multiple lines in a row.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the extra blank lines.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1507:CodeMustNotContainMultipleBlankLinesInARow&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1507 // CodeMustNotContainMultipleBlankLinesInARow
#pragma warning restore SA1507 // CodeMustNotContainMultipleBlankLinesInARow
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1508</rule>
    <ruleTitle><![CDATA[Closing braces should not be preceded by blank line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1508</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1508ClosingBracesMustNotBePrecededByBlankLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1508</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A closing brace within a C# element, statement, or expression is preceded by a blank line.</p>
<h2>Rule description</h2>
<p>To improve the readability of the code, StyleCop requires blank lines in certain situations, and prohibits blank lines in other situations. This results in a consistent visual pattern across the code, which can improve recognition and readability of unfamiliar code.</p>
<p>A violation of this rule occurs when a closing brace is preceded by a blank line. For example:</p>
<pre><code class="language-csharp">public bool Enabled
{
    get 
    { 
        return this.enabled; 

    }

}
</code></pre>
<p>The code above would generate two instances of this violation, since there are two places where closing braces are preceded by blank lines.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the blank line preceding the closing brace.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1508:ClosingBracesMustNotBePrecededByBlankLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1508 // ClosingBracesMustNotBePrecededByBlankLine
#pragma warning restore SA1508 // ClosingBracesMustNotBePrecededByBlankLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1509</rule>
    <ruleTitle><![CDATA[Opening braces should not be preceded by blank line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1509</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1509OpeningBracesMustNotBePrecededByBlankLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1509</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An opening brace within a C# element, statement, or expression is preceded by a blank line.</p>
<h2>Rule description</h2>
<p>To improve the readability of the code, StyleCop requires blank lines in certain situations, and prohibits blank lines
in other situations. This results in a consistent visual pattern across the code, which can improve recognition and
readability of unfamiliar code.</p>
<p>In general, a violation of this rule occurs when an opening brace is preceded by a blank line. For example, the
following above would generate two instances of this violation, since there are two places where opening braces are
preceded by blank lines.</p>
<pre><code class="language-csharp">public bool Enabled

{
    get

    {
        return this.enabled;
    }
}
</code></pre>
<p>An exception to this rule occurs when the opening brace is preceded by a closing brace. When this occurs, a blank line
will be required by <a href="SA1513.md">SA1513</a>. The following example shows correct use of blank lines:</p>
<pre><code class="language-csharp">public bool Enabled
{
    get
    {
        {
        }

        {
            return this.enabled;
        }
    }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the blank line preceding the opening brace.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1509:OpeningBracesMustNotBePrecededByBlankLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1509 // OpeningBracesMustNotBePrecededByBlankLine
#pragma warning restore SA1509 // OpeningBracesMustNotBePrecededByBlankLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1510</rule>
    <ruleTitle><![CDATA[Chained statement blocks should not be preceded by blank line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1510</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1510ChainedStatementBlocksMustNotBePrecededByBlankLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1510</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>Chained C# statements are separated by a blank line.</p>
<h2>Rule description</h2>
<p>To improve the readability of the code, StyleCop requires blank lines in certain situations, and prohibits blank lines in other situations. This results in a consistent visual pattern across the code, which can improve recognition and readability of unfamiliar code.</p>
<p>Some types of C# statements can only be used when chained to the bottom of another statement. Examples include catch and finally statements, which must always be chained to the bottom of a try-statement. Another example is an else-statement, which must always be chained to the bottom of an if-statement, or to another else-statement. These types of chained statements should not be separated by a blank line. For example:</p>
<pre><code class="language-csharp">try
{
    this.SomeMethod();
}

catch (Exception ex)
{
    Console.WriteLine(ex.ToString());
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove any blank lines between the chained statements.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1510:ChainedStatementBlocksMustNotBePrecededByBlankLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1510 // ChainedStatementBlocksMustNotBePrecededByBlankLine
#pragma warning restore SA1510 // ChainedStatementBlocksMustNotBePrecededByBlankLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1511</rule>
    <ruleTitle><![CDATA[While-do footer should not be preceded by blank line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1511</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1511WhileDoFooterMustNotBePrecededByBlankLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1511</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The while footer at the bottom of a do-while statement is separated from the statement by a blank line.</p>
<h2>Rule description</h2>
<p>To improve the readability of the code, StyleCop requires blank lines in certain situations, and prohibits blank lines in other situations. This results in a consistent visual pattern across the code, which can improve recognition and readability of unfamiliar code.</p>
<p>A violation of this rule occurs when the while keyword at the bottom of a do-while statement is separated from the main part of the statement by one or more blank lines. For example:</p>
<pre><code class="language-csharp">do
{
    Console.WriteLine(&quot;Loop forever&quot;);
}

while (true);
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove any blank lines before the while keyword.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1511:WhileDoFooterMustNotBePrecededByBlankLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1511 // WhileDoFooterMustNotBePrecededByBlankLine
#pragma warning restore SA1511 // WhileDoFooterMustNotBePrecededByBlankLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1512</rule>
    <ruleTitle><![CDATA[Single-line comments should not be followed by blank line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1512</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1512SingleLineCommentsMustNotBeFollowedByBlankLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1512</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A single-line comment within C# code is followed by a blank line.</p>
<h2>Rule description</h2>
<p>To improve the readability of the code, StyleCop requires blank lines in certain situations, and prohibits blank lines in other situations. This results in a consistent visual pattern across the code, which can improve recognition and readability of unfamiliar code.</p>
<p>A violation of this rule occurs when a single-line comment is followed by a blank line. For example:</p>
<pre><code class="language-csharp">public bool Enabled
{
    get 
    {
        // Return the value of the 'enabled' field.

        return this.enabled;
    }
}
</code></pre>
<p>The code above would generate an instance of this violation, since the single-line comment is followed by a blank line.</p>
<p>It is allowed to place a blank line in between two blocks of single-line comments. For example:</p>
<pre><code class="language-csharp">public bool Enabled
{
    get 
    {
        // This is a sample comment which doesn't really say anything.
        // This is another part of the comment.

        // There is a blank line above this comment but that is ok.
        return this.enabled;  
    }
}
</code></pre>
<p>If the comment is being used to comment out a line of code, place four forward slashes at the beginning of the comment, rather than two. This will cause StyleCop to ignore this violation. For example:</p>
<pre><code class="language-csharp">public bool Enabled
{
    get 
    {
        ////return false;

        return this.enabled;  
    }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the blank line following the single-line comment.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1512:SingleLineCommentsMustNotBeFollowedByBlankLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1512 // SingleLineCommentsMustNotBeFollowedByBlankLine
#pragma warning restore SA1512 // SingleLineCommentsMustNotBeFollowedByBlankLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1513</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1513ClosingBraceMustBeFollowedByBlankLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1513</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A closing brace within a C# element, statement, or expression is not followed by a blank line.</p>
<h2>Rule description</h2>
<p>To improve the readability of the code, StyleCop requires blank lines in certain situations, and prohibits blank lines
in other situations. This results in a consistent visual pattern across the code, which can improve recognition and
readability of unfamiliar code.</p>
<p>A violation of this rule occurs when a closing brace is not followed by a blank line. For example, the following code
would generate one instance of this violation, since there is one place where a closing brace is not followed by a blank
line.</p>
<pre><code class="language-csharp">if (condition)
{
    DoSomething();
}
return value;
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure a blank line follows closing braces.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1513:ClosingBraceMustBeFollowedByBlankLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1513 // ClosingBraceMustBeFollowedByBlankLine
#pragma warning restore SA1513 // ClosingBraceMustBeFollowedByBlankLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1514</rule>
    <ruleTitle><![CDATA[Element documentation header should be preceded by blank line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1514</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1514ElementDocumentationHeaderMustBePrecededByBlankLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1514</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An element documentation header above a C# element is not preceded by a blank line.</p>
<h2>Rule description</h2>
<p>To improve the readability of the code, StyleCop requires blank lines in certain situations, and prohibits blank lines in other situations. This results in a consistent visual pattern across the code, which can improve recognition and readability of unfamiliar code.</p>
<p>A violation of this rule occurs when the element documentation header above an element is not preceded by a blank line. For example:</p>
<pre><code class="language-csharp">public bool Visible
{
    get { return this.visible; }
}
/// &lt;summary&gt;
/// Gets a value indicating whether the control is enabled.
/// &lt;/summary&gt;
public bool Enabled
{
    get { return this.enabled; }
}
</code></pre>
<p>The code above would generate an instance of this violation, since the documentation header is not preceded by a blank line.</p>
<p>An exception to this rule occurs when the documentation header is the first item within its scope. In this case, the header should not be preceded by a blank line. For example:</p>
<pre><code class="language-csharp">public class Class1
{
    /// &lt;summary&gt;
    /// Gets a value indicating whether the control is enabled.
    /// &lt;/summary&gt;
    public bool Enabled
    {
        get { return this.enabled; }
    }
}
</code></pre>
<p>In the code above, the header is the first item within its scope, and thus it should not be preceded by a blank line.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add a blank line above the documentation header.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1514:ElementDocumentationHeaderMustBePrecededByBlankLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1514 // ElementDocumentationHeaderMustBePrecededByBlankLine
#pragma warning restore SA1514 // ElementDocumentationHeaderMustBePrecededByBlankLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1515</rule>
    <ruleTitle><![CDATA[Single-line comment should be preceded by blank line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1515</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1515SingleLineCommentMustBePrecededByBlankLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1515</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A single-line comment within C# code is not preceded by a blank line.</p>
<h2>Rule description</h2>
<p>To improve the readability of the code, StyleCop requires blank lines in certain situations, and prohibits blank lines
in other situations. This results in a consistent visual pattern across the code, which can improve recognition and
readability of unfamiliar code.</p>
<p>A violation of this rule occurs when a single-line comment is not preceded by a blank line. For example:</p>
<pre><code class="language-csharp">public bool Enabled
{
    get 
    {
        Console.WriteLine(&quot;Getting the enabled flag.&quot;);
        // Return the value of the 'enabled' field.
        return this.enabled;  
    }
}
</code></pre>
<p>The code above would generate an instance of this violation, since the single-line comment is not preceded by a blank
line.</p>
<p>An exception to this rule occurs when the single-line comment is the first item within its scope. In this case, the
comment should not be preceded by a blank line. For example:</p>
<pre><code class="language-csharp">public bool Enabled
{
    get 
    {
        // Return the value of the 'enabled' field.
        return this.enabled;  
    }
}
</code></pre>
<p>In the code above, the comment is the first item within its scope, and thus it should not be preceded by a blank line.</p>
<p>If the comment is being used to comment out a line of code, begin the comment with four forward slashes rather than two.
This will cause StyleCop to ignore this violation. For example:</p>
<pre><code class="language-csharp">public bool Enabled
{
    get 
    {
        Console.WriteLine(&quot;Getting the enabled flag.&quot;);
        ////return false;
        return this.enabled;  
    }
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add a blank line above the comment.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1515:SingleLineCommentMustBePrecededByBlankLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1515 // SingleLineCommentMustBePrecededByBlankLine
#pragma warning restore SA1515 // SingleLineCommentMustBePrecededByBlankLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1516</rule>
    <ruleTitle><![CDATA[Elements should be separated by blank line]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1516</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1516ElementsMustBeSeparatedByBlankLine</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1516</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>Adjacent C# elements are not separated by a blank line.</p>
<blockquote>
<p>:memo: The behavior of this rule can change based on the configuration of the <code>useBlankLinesBetweenUsingGroups</code> property in <strong>stylecop.json</strong>. See <a href="Configuration.md">Configuration.md</a> for more information.</p>
</blockquote>
<h2>Rule description</h2>
<p>To improve the readability of the code, StyleCop requires blank lines in certain situations, and prohibits blank lines in other situations. This results in a consistent visual pattern across the code, which can improve recognition and readability of unfamiliar code.</p>
<p>A violation of this rule occurs when two adjacent element are not separated by a blank line. For example:</p>
<pre><code class="language-csharp">public void Method1()
{
}
public bool Property
{
    get { return true; }
}
</code></pre>
<p>In the example above, the method and property are not separated by a blank line, so a violation of this rule would occur.</p>
<pre><code class="language-csharp">public event EventHandler SomeEvent
{
    add
    {
        // add event subscriber here
    }
    remove
    {
        // remove event subscriber here
    }
}
</code></pre>
<p>In the example above, the add and remove of the event need to be separated by a blank line because the add is multiline.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add a blank line between the adjacent elements.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1516:ElementsMustBeSeparatedByBlankLine&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1516 // ElementsMustBeSeparatedByBlankLine
#pragma warning restore SA1516 // ElementsMustBeSeparatedByBlankLine
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1517</rule>
    <ruleTitle><![CDATA[Code should not contain blank lines at start of file]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1517</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1517CodeMustNotContainBlankLinesAtStartOfFile</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1517</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The code file has blank lines at the start.</p>
<h2>Rule description</h2>
<p>To improve the layout of the code, StyleCop requires no blank lines at the start of files.</p>
<p>A violation of this rule occurs when one or more blank lines are at the start of the file.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the blank lines from the start of the file.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1517:CodeMustNotContainBlankLinesAtStartOfFile&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1517 // CodeMustNotContainBlankLinesAtStartOfFile
#pragma warning restore SA1517 // CodeMustNotContainBlankLinesAtStartOfFile
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1518</rule>
    <ruleTitle><![CDATA[Use line endings correctly at end of file]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1518</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1518UseLineEndingsCorrectlyAtEndOfFile</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1518</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The line endings at the end of a file do not match the settings for the project.</p>
<h2>Rule description</h2>
<p>To improve the layout of the code, StyleCop requires line endings to be consistent at the end of files. The specific
requirements for a project may be configured using <strong>stylecop.json</strong>. See <a href="Configuration.md">Configuration.md</a> for more
information.</p>
<p>The specific settings is one of the following:</p>
<ul>
<li>Allow (default): Files are allowed to end with a single newline character, but it is not required</li>
<li>Require: Files are required to end with a single newline character</li>
<li>Omit: Files may not end with a newline character</li>
</ul>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, update the line endings at the end of the file to match the settings for the current
project.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.LayoutRules&quot;, &quot;SA1518:CodeMustNotContainBlankLinesAtEndOfFile&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1518 // CodeMustNotContainBlankLinesAtEndOfFile
#pragma warning restore SA1518 // CodeMustNotContainBlankLinesAtEndOfFile
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1519</rule>
    <ruleTitle><![CDATA[Braces should not be omitted from multi-line child statement]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA1519</h1>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1519BracesMustNotBeOmittedFromMultiLineChildStatement</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1519</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>The opening and closing braces for a multi-line C# statement have been omitted.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the opening and closing braces for a multi-line statement have been
omitted. In C#, some types of statements may optionally include braces. Examples include <code>if</code>, <code>while</code>, and
<code>for</code> statements. For example, an <code>if</code>-statement may be written without braces:</p>
<pre><code class="language-csharp">if (true)
    return
        this.value;
</code></pre>
<p>Although this is legal in C#, StyleCop requires the braces to be present when the statement spans multiple
lines, to increase the readability and maintainability of the code.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, the violating statement will be converted to a block statement.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">if (true)
#pragma warning disable SA1519 // Braces should not be omitted from multi-line child statement
    return
        this.value;
#pragma warning restore SA1519 // Braces should not be omitted from multi-line child statement
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1520</rule>
    <ruleTitle><![CDATA[Use braces consistently]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA1520</h1>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1520UseBracesConsistently</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1520</td>
</tr>
<tr>
  <td>Category</td>
  <td>Layout Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>The opening and closing braces of a chained <code>if</code>/<code>else if</code>/<code>else</code> construct were included for some clauses, but
omitted for others.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the opening and closing braces for a chained statement have been included
for some clauses but omitted for others. In C#, some types of statements may optionally include braces. For
example, an <code>if</code>-statement may be written with inconsistent braces:</p>
<pre><code class="language-csharp">if (true)
    return this.value;
else
{
    return that.value.
}
</code></pre>
<p>Although this is legal in C#, StyleCop requires the braces to be present for all clauses of a chained <code>if</code>/<code>else if</code>/<code>else</code> construct when braces are included for any clause, to increase the readability and maintainability of the
code.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, the violating statement will be converted to a block statement.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">if (true)
#pragma warning disable SA1520 // Use braces consistently
    return this.value;
#pragma warning restore SA1520 // Use braces consistently
else
{
    return that.value.
}
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1600</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1600ElementsMustBeDocumented</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1600</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# code element is missing a documentation header.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if an element is completely missing a documentation header, or if the header is empty. In C# the following types of elements can have documentation headers: classes, constructors, delegates, enums, events, finalizers, indexers, interfaces, methods, properties, and structs.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add or fill-in a documentation header for the element.</p>
<p>The following example shows a method with a valid documentation header:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Joins a first name and a last name together into a single string.
/// &lt;/summary&gt;
/// &lt;param name=&quot;firstName&quot;&gt;The first name to join.&lt;/param&gt;
/// &lt;param name=&quot;lastName&quot;&gt;The last name to join.&lt;/param&gt;
/// &lt;returns&gt;The joined names.&lt;/returns&gt;
public string JoinNames(string firstName, string lastName)
{
    return firstName + &quot; &quot; + lastName;
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1600:ElementsMustBeDocumented&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1600 // ElementsMustBeDocumented
#pragma warning restore SA1600 // ElementsMustBeDocumented
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1601</rule>
    <ruleTitle><![CDATA[Partial elements should be documented]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1601</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1601PartialElementsMustBeDocumented</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1601</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# partial element is missing a documentation header.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if a partial element (an element with the partial attribute) is completely missing a documentation header, or if the header is empty. In C# the following types of elements can be attributed with the partial attribute: classes, methods.</p>
<p>When documentation is provided on more than one part of the partial class, the documentation for the two classes may be merged together to form a single source of documentation. For example, consider the following two parts of a partial class:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Documentation for the first part of Class1.
/// &lt;/summary&gt;
public partial class Class1
{
}

/// &lt;summary&gt;
/// Documentation for the second part of Class1.
/// &lt;/summary&gt;
public partial class Class1
{
}
</code></pre>
<p>These two different parts of the same partial class each provide different documentation for the class. When the documentation for this class is built into an SDK, the tool building the documentation will either choose to use only one part of the documentation for the class and ignore the other parts, or, in some cases, it may merge the two sources of documentation together, to form a string like: &quot;Documentation for the first part of Class1. Documentation for the second part of Class1.&quot;</p>
<p>For these reasons, it can be problematic to provide SDK documentation on more than one part of the partial class. However, it is still advisable to document each part of the class, to increase the readability and maintainability of the code, and StyleCop will require that each part of the class contain header documentation.</p>
<p>This problem is solved through the use of the <code>&lt;content&gt;</code> tag, which can replace the <code>&lt;summary&gt;</code> tag for partial classes. The recommended practice for documenting partial classes is to provide the official SDK documentation for the class on the main part of the partial class. This documentation should be written using the standard <code>&lt;summary&gt;</code> tag. All other parts of the partial class should omit the <code>&lt;summary&gt;</code> tag completely, and replace it with a <code>&lt;content&gt;</code> tag. This allows the developer to document all parts of the partial class while still centralizing all of the official SDK documentation for the class onto one part of the class. The <code>&lt;content&gt;</code> tags will be ignored by the SDK documentation tools.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add or fill-in a documentation header for the element.</p>
<p>For example, the following example shows two parts of a partial class, one containing a <code>&lt;summary&gt;</code> header and another containing a <code>&lt;content&gt;</code> header.</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Represents a customer in the database.
/// &lt;/summary&gt;
public partial class Customer
{
}

/// &lt;content&gt;
/// Contains auto-generated functionality for the Customer class.
/// &lt;/content&gt;
public partial class Customer
{
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1601:PartialElementsMustBeDocumented&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1601 // PartialElementsMustBeDocumented
#pragma warning restore SA1601 // PartialElementsMustBeDocumented
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1602</rule>
    <ruleTitle><![CDATA[Enumeration items should be documented]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1602</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1602EnumerationItemsMustBeDocumented</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1602</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>An item within a C# enumeration is missing an Xml documentation header.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs when an item within an enumeration is missing a header. For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Types of animals.
/// &lt;/summary&gt;
public enum Animals
{
    Dog,
    Cat,
    Horse
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add a documentation header for each item within the enum. For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Types of animals.
/// &lt;/summary&gt;
public enum Animals
{
    /// &lt;summary&gt;
    /// Represents a dog.
    /// &lt;/summary&gt;
    Dog,

    /// &lt;summary&gt;
    /// Represents a cat.
    /// &lt;/summary&gt;
    Cat,

    /// &lt;summary&gt;
    /// Represents a horse.
    /// &lt;/summary&gt;
    Horse
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1602:EnumerationItemsMustBeDocumented&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1602 // EnumerationItemsMustBeDocumented
#pragma warning restore SA1602 // EnumerationItemsMustBeDocumented
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1604</rule>
    <ruleTitle><![CDATA[Element documentation should have summary]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1604</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1604ElementDocumentationMustHaveSummary</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1604</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The Xml header documentation for a C# element is missing a <code>&lt;summary&gt;</code> tag.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs when the element documentation is missing a <code>&lt;summary&gt;</code> tag.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add and fill-in a <code>&lt;summary&gt;</code> tag for the element, containing a description of the element.</p>
<p>The following example shows a class containing invalid Xml within its documentation header. The closing tag for the <code>&lt;summary&gt;</code> node is invalid.</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Represents a customer in the database.
/// &lt;/summary&gt;
public class Customer
{
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1604:ElementDocumentationMustHaveSummary&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1604 // ElementDocumentationMustHaveSummary
#pragma warning restore SA1604 // ElementDocumentationMustHaveSummary
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1605</rule>
    <ruleTitle><![CDATA[Partial element documentation should have summary]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1605</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1605PartialElementDocumentationMustHaveSummary</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1605</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The <code>&lt;summary&gt;</code> or <code>&lt;content&gt;</code> tag within the documentation header for a C# code element is missing or empty.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs when the documentation header for a partial element (an element with the partial attribute) is missing a <code>&lt;summary&gt;</code> or <code>&lt;content&gt;</code> tag, or contains an empty <code>&lt;summary&gt;</code> or <code>&lt;content&gt;</code> tag which does not contain a description of the element. In C# the following types of elements can be attributed with the partial attribute: classes, methods.</p>
<p>When documentation is provided on more than one part of the partial class, the documentation for the two classes may be merged together to form a single source of documentation. For example, consider the following two parts of a partial class:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Documentation for the first part of Class1.
/// &lt;/summary&gt;
public partial class Class1
{
}

/// &lt;summary&gt;
/// Documentation for the second part of Class1.
/// &lt;/summary&gt;
public partial class Class1
{
}
</code></pre>
<p>These two different parts of the same partial class each provide different documentation for the class. When the documentation for this class is built into an SDK, the tool building the documentation will either choose to use only one part of the documentation for the class and ignore the other parts, or, in some cases, it may merge the two sources of documentation together, to form a string like: &quot;Documentation for the first part of Class1. Documentation for the second part of Class1.&quot;</p>
<p>For these reasons, it can be problematic to provide SDK documentation on more than one part of the partial class. However, it is still advisable to document each part of the class, to increase the readability and maintainability of the code, and StyleCop will require that each part of the class contain header documentation.</p>
<p>This problem is solved through the use of the <code>&lt;content&gt;</code> tag, which can replace the <code>&lt;summary&gt;</code> tag for partial classes. The recommended practice for documenting partial classes is to provide the official SDK documentation for the class on the main part of the partial class. This documentation should be written using the standard <code>&lt;summary&gt;</code> tag. All other parts of the partial class should omit the <code>&lt;summary&gt;</code> tag completely, and replace it with a <code>&lt;content&gt;</code> tag. This allows the developer to document all parts of the partial class while still centralizing all of the official SDK documentation for the class onto one part of the class. The <code>&lt;content&gt;</code> tags will be ignored by the SDK documentation tools.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add and fill-in a <code>&lt;summary&gt;</code> or <code>&lt;content&gt;</code> tag with a description of the code element.</p>
<p>The following example shows a partial class with a fill-in <code>&lt;summary&gt;</code> tag.</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Represents a customer in the database.
/// &lt;/summary&gt;
public partial class Customer
{
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1605:PartialElementDocumentationMustHaveSummary&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1605 // PartialElementDocumentationMustHaveSummary
#pragma warning restore SA1605 // PartialElementDocumentationMustHaveSummary
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1606</rule>
    <ruleTitle><![CDATA[Element documentation should have summary text]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1606</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1606ElementDocumentationMustHaveSummaryText</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1606</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The <code>&lt;summary&gt;</code> tag within the documentation header for a C# code element is empty.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs when the documentation header for an element contains an empty <code>&lt;summary&gt;</code> tag which does not contain a description of the element.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, fill-in the <code>&lt;summary&gt;</code> tag with a description of the code element.</p>
<p>Example:</p>
<p>The following example shows a method which contains an empty <code>&lt;summary&gt;</code> tag.</p>
<pre><code class="language-csharp">/// &lt;summary&gt;  &lt;/summary&gt;
/// &lt;param name=&quot;customerId&quot;&gt;The ID of the customer to find.&lt;/param&gt;
/// &lt;returns&gt;The customer, or null if the customer could not be
/// found.&lt;/returns&gt;
public Customer FindCustomer(int customerId)
{
    // ... finds the customer ...
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1606:ElementDocumentationMustHaveSummaryText&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1606 // ElementDocumentationMustHaveSummaryText
#pragma warning restore SA1606 // ElementDocumentationMustHaveSummaryText
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1607</rule>
    <ruleTitle><![CDATA[Partial element documentation should have summary text]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1607</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1607PartialElementDocumentationMustHaveSummaryText</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1607</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The <code>&lt;summary&gt;</code> or <code>&lt;content&gt;</code> tag within the documentation header for a C# code element is empty.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs when the documentation header for a partial element (an element with the partial attribute) contains an empty <code>&lt;summary&gt;</code> tag or <code>&lt;content&gt;</code> tag which does not contain a description of the element. In C# the following types of elements can be attributed with the partial attribute: classes, methods.</p>
<p>When documentation is provided on more than one part of the partial class, the documentation for the two classes may be merged together to form a single source of documentation. For example, consider the following two parts of a partial class:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Documentation for the first part of Class1.
/// &lt;/summary&gt;
public partial class Class1
{
}

/// &lt;summary&gt;
/// Documentation for the second part of Class1.
/// &lt;/summary&gt;
public partial class Class1
{
}
</code></pre>
<p>These two different parts of the same partial class each provide different documentation for the class. When the documentation for this class is built into an SDK, the tool building the documentation will either choose to use only one part of the documentation for the class and ignore the other parts, or, in some cases, it may merge the two sources of documentation together, to form a string like: &quot;Documentation for the first part of Class1. Documentation for the second part of Class1.&quot;</p>
<p>For these reasons, it can be problematic to provide SDK documentation on more than one part of the partial class. However, it is still advisable to document each part of the class, to increase the readability and maintainability of the code, and StyleCop will require that each part of the class contain header documentation.</p>
<p>This problem is solved through the use of the <code>&lt;content&gt;</code> tag, which can replace the <code>&lt;summary&gt;</code> tag for partial classes. The recommended practice for documenting partial classes is to provide the official SDK documentation for the class on the main part of the partial class. This documentation should be written using the standard <code>&lt;summary&gt;</code> tag. All other parts of the partial class should omit the <code>&lt;summary&gt;</code> tag completely, and replace it with a <code>&lt;content&gt;</code> tag. This allows the developer to document all parts of the partial class while still centralizing all of the official SDK documentation for the class onto one part of the class. The <code>&lt;content&gt;</code> tags will be ignored by the SDK documentation tools.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, fill-in the contents of the summary tag or content tag with a description of the code element.</p>
<p>The following example shows a method which contains an empty <code>&lt;summary&gt;</code> tag.</p>
<pre><code class="language-csharp">/// &lt;summary&gt;  &lt;/summary&gt;
/// &lt;param name=&quot;customerId&quot;&gt;The ID of the customer to find.&lt;/param&gt;
/// &lt;returns&gt;The customer, or null if the customer could not be found.&lt;/returns&gt;
public Customer FindCustomer(int customerId)
{
    // ... finds the customer ...
}
</code></pre>
<p>To fix the violation, add valid summary text. For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;Attempts to locate a record for the customer with the given ID.&lt;/summary&gt;
/// &lt;param name=&quot;customerId&quot;&gt;The ID of the customer to find.&lt;/param&gt;
/// &lt;returns&gt;The customer, or null if the customer could not be found.&lt;/returns&gt;
public Customer FindCustomer(int customerId)
{
    // ... finds the customer ...
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1607:PartialElementDocumentationMustHaveSummaryText&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1607 // PartialElementDocumentationMustHaveSummaryText
#pragma warning restore SA1607 // PartialElementDocumentationMustHaveSummaryText
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1608</rule>
    <ruleTitle><![CDATA[Element documentation should not have default summary]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1608</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1608ElementDocumentationMustNotHaveDefaultSummary</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1608</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The <code>&lt;summary&gt;</code> tag within an element's Xml header documentation contains the default text generated by Visual Studio during the creation of the element.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>Visual Studio provides helper functionality for adding new elements such as classes to a project. Visual Studio will create a default documentation header for the new class and fill in this header with default documentation text.</p>
<p>A violation of this rule occurs when the <code>&lt;summary&gt;</code> tag for a code element still contains the default documentation text generated by Visual Studio.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, replace the default documentation text with new text describing the contents of the code element.</p>
<p>The following example shows a class which contains the default summary text generated by Visual Studio.</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Summary description for the Example class.
/// &lt;/summary&gt;
public class Example
{
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1608:ElementDocumentationMustNotHaveDefaultSummary&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1608 // ElementDocumentationMustNotHaveDefaultSummary
#pragma warning restore SA1608 // ElementDocumentationMustNotHaveDefaultSummary
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1609</rule>
    <ruleTitle><![CDATA[Property documentation should have value]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1609</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1609PropertyDocumentationMustHaveValue</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1609</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The Xml header documentation for a C# property does not contain a <code>&lt;value&gt;</code> tag.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>The documentation for properties may include a <code>&lt;value&gt;</code> tag, which describes the value held by the property.</p>
<p>A violation of this rule occurs when the <code>&lt;value&gt;</code> tag for a property is missing.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add and fill-in a <code>&lt;value&gt;</code> tag within the documentation header for the property.</p>
<p>The following example shows a property which contains a <code>&lt;value&gt;</code> tag within its documentation header.</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Gets the name of the customer. 
/// &lt;/summary&gt;
/// &lt;value&gt;The name of the customer.&lt;/value&gt;
public bool Name
{
    get { return this.name; }
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1609:PropertyDocumentationMustHaveValue&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1609 // PropertyDocumentationMustHaveValue
#pragma warning restore SA1609 // PropertyDocumentationMustHaveValue
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1610</rule>
    <ruleTitle><![CDATA[Property documentation should have value text]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1610</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1610PropertyDocumentationMustHaveValueText</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1610</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The Xml header documentation for a C# property contains an empty <code>&lt;value&gt;</code> tag.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>The documentation for properties may include a <code>&lt;value&gt;</code> tag, which describes the value held by the property.</p>
<p>A violation of this rule occurs when the <code>&lt;value&gt;</code> tag for a property is empty.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, fill-in a description of the value held by the property within the <code>&lt;value&gt;</code> tag.</p>
<p>Example:</p>
<p>The following example shows a property which contains a <code>&lt;value&gt;</code> tag within its documentation header.</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Gets the name of the customer. 
/// &lt;/summary&gt;
/// &lt;value&gt;The name of the customer.&lt;/value&gt;
public bool Name
{
    get { return this.name; }
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1610:PropertyDocumentationMustHaveValueText&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1610 // PropertyDocumentationMustHaveValueText
#pragma warning restore SA1610 // PropertyDocumentationMustHaveValueText
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1611</rule>
    <ruleTitle><![CDATA[Element parameters should be documented]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1611</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1611ElementParametersMustBeDocumented</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1611</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# method, constructor, delegate or indexer element is missing documentation for one or more of its parameters.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if an element containing parameters is missing documentation for one or more of its parameters.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add or fill-in documentation text within a <code>&lt;param&gt;</code> tag for each parameter within the element.</p>
<p>The following example shows a method with a valid documentation header:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Joins a first name and a last name together into a single string.
/// &lt;/summary&gt;
/// &lt;param name=&quot;firstName&quot;&gt;The first name to join.&lt;/param&gt;
/// &lt;param name=&quot;lastName&quot;&gt;The last name to join.&lt;/param&gt;
/// &lt;returns&gt;The joined names.&lt;/returns&gt;
public string JoinNames(string firstName, string lastName)
{
    return firstName + &quot; &quot; + lastName;
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1611:ElementParametersMustBeDocumented&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1611 // ElementParametersMustBeDocumented
#pragma warning restore SA1611 // ElementParametersMustBeDocumented
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1612</rule>
    <ruleTitle><![CDATA[Element parameter documentation should match element parameters]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1612</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1612ElementParameterDocumentationMustMatchElementParameters</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1612</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The documentation describing the parameters to a C# method, constructor, delegate or indexer element does not match the actual parameters on the element.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if the documentation for an element's parameters does not match the actual parameters on the element, or if the parameter documentation is not listed in the same order as the element's parameters.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, correct the parameter documentation so that the <code>&lt;param&gt;</code> tags in the documentation appear in the same order as the element's parameters, and so that there is one <code>&lt;param&gt;</code> tag for each parameter on the element.</p>
<p>The following example shows a method with a valid documentation header:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Joins a first name and a last name together into a single string.
/// &lt;/summary&gt;
/// &lt;param name=&quot;firstName&quot;&gt;The first name to join.&lt;/param&gt;
/// &lt;param name=&quot;lastName&quot;&gt;The last name to join.&lt;/param&gt;
/// &lt;returns&gt;The joined names.&lt;/returns&gt;
public string JoinNames(string firstName, string lastName)
{
    return firstName + &quot; &quot; + lastName;
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1612:ElementParameterDocumentationMustMatchElementParameters&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1612 // ElementParameterDocumentationMustMatchElementParameters
#pragma warning restore SA1612 // ElementParameterDocumentationMustMatchElementParameters
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1613</rule>
    <ruleTitle><![CDATA[Element parameter documentation should declare parameter name]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1613</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1613ElementParameterDocumentationMustDeclareParameterName</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1613</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A <code>&lt;param&gt;</code> tag within a C# element's documentation header is missing a name attribute containing the name of the parameter.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if the documentation for an element contains a <code>&lt;param&gt;</code> tag which is missing a name attribute, or which contains an empty name attribute.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add or fill-in the name attribute for the <code>&lt;param&gt;</code> tag to indicate the name of the parameter that the documentation is for.</p>
<p>The following example shows a method with a valid documentation header:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Joins a first name and a last name together into a single string.
/// &lt;/summary&gt;
/// &lt;param name=&quot;firstName&quot;&gt;The first name to join.&lt;/param&gt;
/// &lt;param name=&quot;lastName&quot;&gt;The last name to join.&lt;/param&gt;
/// &lt;returns&gt;The joined names.&lt;/returns&gt;
public string JoinNames(string firstName, string lastName)
{
    return firstName + &quot; &quot; + lastName;
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1613:ElementParameterDocumentationMustDeclareParameterName&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1613 // ElementParameterDocumentationMustDeclareParameterName
#pragma warning restore SA1613 // ElementParameterDocumentationMustDeclareParameterName
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1614</rule>
    <ruleTitle><![CDATA[Element parameter documentation should have text]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1614</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1614ElementParameterDocumentationMustHaveText</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1614</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A <code>&lt;param&gt;</code> tag within a C# element's documentation header is empty.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if the documentation for an element contains a <code>&lt;param&gt;</code> tag which is empty and does not contain a description of the parameter.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, fill-in a description of the parameter within the <code>&lt;param&gt;</code> tag.</p>
<p>The following example shows a method with a valid documentation header:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Joins a first name and a last name together into a single string.
/// &lt;/summary&gt;
/// &lt;param name=&quot;firstName&quot;&gt;The first name to join.&lt;/param&gt;
/// &lt;param name=&quot;lastName&quot;&gt;The last name to join.&lt;/param&gt;
/// &lt;returns&gt;The joined names.&lt;/returns&gt;
public string JoinNames(string firstName, string lastName)
{
    return firstName + &quot; &quot; + lastName;
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1614:ElementParameterDocumentationMustHaveText&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1614 // ElementParameterDocumentationMustHaveText
#pragma warning restore SA1614 // ElementParameterDocumentationMustHaveText
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1615</rule>
    <ruleTitle><![CDATA[Element return value should be documented]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1615</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1615ElementReturnValueMustBeDocumented</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1615</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# element is missing documentation for its return value.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if an element containing a return value is missing a <code>&lt;returns&gt;</code> tag.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add and fill-in documentation text within a <code>&lt;returns&gt;</code> tag describing the value returned from the element.</p>
<p>The following example shows a method with a valid documentation header:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Joins a first name and a last name together into a single string.
/// &lt;/summary&gt;
/// &lt;param name=&quot;firstName&quot;&gt;The first name to join.&lt;/param&gt;
/// &lt;param name=&quot;lastName&quot;&gt;The last name to join.&lt;/param&gt;
/// &lt;returns&gt;The joined names.&lt;/returns&gt;
public string JoinNames(string firstName, string lastName)
{
    return firstName + &quot; &quot; + lastName;
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1615:ElementReturnValueMustBeDocumented&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1615 // ElementReturnValueMustBeDocumented
#pragma warning restore SA1615 // ElementReturnValueMustBeDocumented
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1616</rule>
    <ruleTitle><![CDATA[Element return value documentation should have text]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1616</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1616ElementReturnValueDocumentationMustHaveText</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1616</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The <code>&lt;returns&gt;</code> tag within a C# element's documentation header is empty.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if an element contains an empty <code>&lt;returns&gt;</code> tag.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, fill-in documentation text within the <code>&lt;returns&gt;</code> tag describing the value returned from the element.</p>
<p>The following example shows a method with a valid documentation header:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Joins a first name and a last name together into a single string.
/// &lt;/summary&gt;
/// &lt;param name=&quot;firstName&quot;&gt;The first name to join.&lt;/param&gt;
/// &lt;param name=&quot;lastName&quot;&gt;The last name to join.&lt;/param&gt;
/// &lt;returns&gt;The joined names.&lt;/returns&gt;
public string JoinNames(string firstName, string lastName)
{
    return firstName + &quot; &quot; + lastName;
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1616:ElementReturnValueDocumentationMustHaveText&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1616 // ElementReturnValueDocumentationMustHaveText
#pragma warning restore SA1616 // ElementReturnValueDocumentationMustHaveText
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1617</rule>
    <ruleTitle><![CDATA[Void return value should not be documented]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1617</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1617VoidReturnValueMustNotBeDocumented</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1617</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# code element does not contain a return value, or returns void, but the documentation header for the element contains a <code>&lt;returns&gt;</code> tag.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if an element which returns void contains a <code>&lt;returns&gt;</code> tag within its documentation header.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the <code>&lt;returns&gt;</code> tag from the element.</p>
<p>The following example shows a method with a valid documentation header:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Prints the given name.
/// &lt;/summary&gt;
/// &lt;param name=&quot;firstName&quot;&gt;The first name.&lt;/param&gt;
/// &lt;param name=&quot;lastName&quot;&gt;The last name.&lt;/param&gt;
public void PrintNames(string firstName, string lastName)
{
    Console.WriteLine(firstName + &quot; &quot; + lastName);
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1617:VoidReturnValueMustNotBeDocumented&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1617 // VoidReturnValueMustNotBeDocumented
#pragma warning restore SA1617 // VoidReturnValueMustNotBeDocumented
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1618</rule>
    <ruleTitle><![CDATA[Generic type parameters should be documented]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1618</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1618GenericTypeParametersMustBeDocumented</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1618</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A generic C# element is missing documentation for one or more of its generic type parameters.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if an element containing generic type parameters is missing documentation for one or more of its generic type parameters.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add or fill-in documentation text within a <typeparam> tag for each generic type parameter on the element.</p>
<p>The following example shows a method with a valid documentation header:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// A sample generic class.
/// &lt;/summary&gt;
/// &lt;typeparam name=&quot;S&quot;&gt;The first generic type parameter.&lt;/typeparam&gt;
/// &lt;typeparam name=&quot;T&quot;&gt;The second generic type parameter.&lt;/typeparam&gt;
public class Class1&lt;S, T&gt;
{ 
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1618:GenericTypeParametersMustBeDocumented&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1618 // GenericTypeParametersMustBeDocumented
#pragma warning restore SA1618 // GenericTypeParametersMustBeDocumented
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1619</rule>
    <ruleTitle><![CDATA[Generic type parameters should be documented partial class]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1619</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1619GenericTypeParametersMustBeDocumentedPartialClass</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1619</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A generic, partial C# element is missing documentation for one or more of its generic type parameters, and the documentation for the element contains a <code>&lt;summary&gt;</code> tag.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs when a generic, partial element is missing documentation for one or more of its generic type parameters, and the documentation for the element contains a <code>&lt;summary&gt;</code> tag rather than a <code>&lt;content&gt;</code> tag.</p>
<p>When documentation is provided on more than one part of the partial class, the documentation for the two classes may be merged together to form a single source of documentation. For example, consider the following two parts of a partial class:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Documentation for the first part of Class1.
/// &lt;/summary&gt;
public partial class Class1
{
}

/// &lt;summary&gt;
/// Documentation for the second part of Class1.
/// &lt;/summary&gt;
public partial class Class1
{
}
</code></pre>
<p>These two different parts of the same partial class each provide different documentation for the class. When the documentation for this class is built into an SDK, the tool building the documentation will either choose to use only one part of the documentation for the class and ignore the other parts, or, in some cases, it may merge the two sources of documentation together, to form a string like: &quot;Documentation for the first part of Class1. Documentation for the second part of Class1.&quot;</p>
<p>For these reasons, it can be problematic to provide SDK documentation on more than one part of the partial class. However, it is still advisable to document each part of the class, to increase the readability and maintainability of the code, and StyleCop will require that each part of the class contain header documentation.</p>
<p>This problem is solved through the use of the <code>&lt;content&gt;</code> tag, which can replace the <code>&lt;summary&gt;</code> tag for partial classes. The recommended practice for documenting partial classes is to provide the official SDK documentation for the class on the main part of the partial class. This documentation should be written using the standard <code>&lt;summary&gt;</code> tag. All other parts of the partial class should omit the <code>&lt;summary&gt;</code> tag completely, and replace it with a <code>&lt;content&gt;</code> tag. This allows the developer to document all parts of the partial class while still centralizing all of the official SDK documentation for the class onto one part of the class. The <code>&lt;content&gt;</code> tags will be ignored by the SDK documentation tools.</p>
<p>When a generic element contains a <code>&lt;summary&gt;</code> tag within its documentation header, StyleCop assumes that this is the main part of the class, and requires the header to contain <code>&lt;typeparam&gt;</code> tags for each of the generic type parameters on the class. However, if the documentation header for the class contains a <code>&lt;content&gt;</code> tag rather than a <code>&lt;summary&gt;</code> tag, StyleCop will assume that the generic type parameters are defined on another part of the class, and will not require <code>&lt;typeparam&gt;</code> tags on this part of the class.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add or fill-in documentation text within a <code>&lt;typeparam&gt;</code> tag for each generic type parameter on the element, or change the <code>&lt;summary&gt;</code> tag to a <code>&lt;content&gt;</code> tag if this is not the main part of the partial class.</p>
<p>The following example shows a method with a valid documentation header:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// A sample generic class.
/// &lt;/summary&gt;
/// &lt;typeparam name=&quot;S&quot;&gt;The first generic type parameter.&lt;/typeparam&gt;
/// &lt;typeparam name=&quot;T&quot;&gt;The second generic type parameter.&lt;/typeparam&gt;
public class Class1&lt;S, T&gt;
{ 
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1619:GenericTypeParametersMustBeDocumentedPartialClass&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1619 // GenericTypeParametersMustBeDocumentedPartialClass
#pragma warning restore SA1619 // GenericTypeParametersMustBeDocumentedPartialClass
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1620</rule>
    <ruleTitle><![CDATA[Generic type parameter documentation should match type parameters]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1620</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1620GenericTypeParameterDocumentationMustMatchTypeParameters</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1620</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The <code>&lt;typeparam&gt;</code> tags within the Xml header documentation for a generic C# element do not match the generic type parameters on the element.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if the <code>&lt;typeparam&gt;</code> tags within the element's header documentation do not match the generic type parameters on the element, or do not appear in the same order as the element's type parameters.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add and fill-in one <code>&lt;typeparam&gt;</code> tag for each generic type parameter on the element, and make sure that the <code>&lt;typeparam&gt;</code> tags appear in the same order as the element's type parameters.</p>
<p>The following example shows a method with a valid documentation header:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// A sample generic class.
/// &lt;/summary&gt;
/// &lt;typeparam name=&quot;S&quot;&gt;The first generic type parameter.&lt;/typeparam&gt;
/// &lt;typeparam name=&quot;T&quot;&gt;The second generic type parameter.&lt;/typeparam&gt;
public class Class1&lt;S, T&gt;
{ 
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1620:GenericTypeParameterDocumentationMustMatchTypeParameters&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1620 // GenericTypeParameterDocumentationMustMatchTypeParameters
#pragma warning restore SA1620 // GenericTypeParameterDocumentationMustMatchTypeParameters
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1621</rule>
    <ruleTitle><![CDATA[Generic type parameter documentation should declare parameter name]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1621</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1621GenericTypeParameterDocumentationMustDeclareParameterName</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1621</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A <code>&lt;typeparam&gt;</code> tag within the Xml header documentation for a generic C# element is missing a name attribute, or contains an empty name attribute.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if the element contains a <code>&lt;typeparam&gt;</code> tag within its Xml header documentation which does not declare the name of the type parameter.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add or fill-in the name attribute for each <code>&lt;typeparam&gt;</code> tag, indicating the name of the type parameter that the documentation is for.</p>
<p>The following example shows a method with a valid documentation header:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// A sample generic class.
/// &lt;/summary&gt;
/// &lt;typeparam name=&quot;S&quot;&gt;The first generic type parameter.&lt;/typeparam&gt;
/// &lt;typeparam name=&quot;T&quot;&gt;The second generic type parameter.&lt;/typeparam&gt;
public class Class1&lt;S, T&gt;
{ 
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1621:GenericTypeParameterDocumentationMustDeclareParameterName&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1621 // GenericTypeParameterDocumentationMustDeclareParameterName
#pragma warning restore SA1621 // GenericTypeParameterDocumentationMustDeclareParameterName
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1622</rule>
    <ruleTitle><![CDATA[Generic type parameter documentation should have text]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1622</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1622GenericTypeParameterDocumentationMustHaveText</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1622</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A <code>&lt;typeparam&gt;</code> tag within the Xml header documentation for a generic C# element is empty.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if the element contains an empty <code>&lt;typeparam&gt;</code> tag within its Xml header documentation.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, fill-in each <code>&lt;typeparam&gt;</code> tag within a description of the generic type parameter.</p>
<p>The following example shows a method with a valid documentation header:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// A sample generic class.
/// &lt;/summary&gt;
/// &lt;typeparam name=&quot;S&quot;&gt;The first generic type parameter.&lt;/typeparam&gt;
/// &lt;typeparam name=&quot;T&quot;&gt;The second generic type parameter.&lt;/typeparam&gt;
public class Class1&lt;S, T&gt;
{ 
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1622:GenericTypeParameterDocumentationMustHaveText&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1622 // GenericTypeParameterDocumentationMustHaveText
#pragma warning restore SA1622 // GenericTypeParameterDocumentationMustHaveText
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1623</rule>
    <ruleTitle><![CDATA[Property summary documentation should match accessors]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1623</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1623PropertySummaryDocumentationMustMatchAccessors</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1623</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The documentation text within a C# property's <code>&lt;summary&gt;</code> tag does not match the accessors within the property.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article:<a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs if a property's summary documentation does not match the accessors within the property.</p>
<p>The property's summary text should begin with wording describing the types of accessors exposed within the property. If the property contains only a get accessor, the summary should begin with the word &quot;Gets&quot;. If the property contains only a set accessor, the summary should begin with the word &quot;Sets&quot;. If the property exposes both a get and set accessor, the summary text should begin with &quot;Gets or sets&quot;.</p>
<p>For example, consider the following property, which exposes both a get and set accessor. The summary text begins with the words &quot;Gets or sets&quot;.</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Gets or sets the name of the customer. 
/// &lt;/summary&gt;
public string Name
{
    get { return this.name; }
    set { this.name = value; }
}
</code></pre>
<p>If the property returns a Boolean value, an additional rule is applied. The summary text for Boolean properties should contain the words &quot;Gets a value indicating whether&quot;, &quot;Sets a value indicating whether&quot;, or &quot;Gets or sets a value indicating whether&quot;. For example, consider the following Boolean property, which only exposes a get accessor:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Gets a value indicating whether the item is enabled.
/// &lt;/summary&gt;
public bool Enabled
{
    get { return this.enabled; }
}
</code></pre>
<p>In some situations, the set accessor for a property can have more restricted access than the get accessor. For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Gets the name of the customer. 
/// &lt;/summary&gt;
public string Name
{
    get { return this.name; }
    private set { this.name = value; }
}
</code></pre>
<p>In this example, the set accessor has been given private access, meaning that it can only be accessed by local members of the class in which it is contained. The get accessor, however, inherits its access from the parent property, thus it can be accessed by any caller, since the property has public access.</p>
<p>In this case, the documentation summary text should avoid referring to the set accessor, since it is not visible to external callers.</p>
<p>StyleCop applies a series of rules to determine when the set accessor should be referenced in the property's summary documentation. In general, these rules require the set accessor to be referenced whenever it is visible to the same set of callers as the get accessor, or whenever it is visible to external classes or inheriting classes.</p>
<p>The specific rules for determining whether to include the set accessor in the property's summary documentation are:</p>
<ol>
<li>
<p>The set accessor has the same access level as the get accessor. For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Gets or sets the name of the customer. 
/// &lt;/summary&gt;
protected string Name
{
    get { return this.name; }
    set { this.name = value; }
}
</code></pre>
</li>
<li>
<p>The property is only internally accessible within the assembly, and the set accessor also has internal access. For example:</p>
<pre><code class="language-csharp">internal class Class1
{
    /// &lt;summary&gt;
    /// Gets or sets the name of the customer. 
    /// &lt;/summary&gt;
    protected string Name
    {
        get { return this.name; }
        internal set { this.name = value; }
    }
}

internal class Class1
{
    public class Class2
    {
        /// &lt;summary&gt;
        /// Gets or sets the name of the customer. 
        /// &lt;/summary&gt;
        public string Name
        {
            get { return this.name; }
            internal set { this.name = value; }
        }
    }
}
</code></pre>
</li>
<li>
<p>The property is private or is contained beneath a private class, and the set accessor has any access modifier other than private. In the example below, the access modifier declared on the set accessor has no meaning, since the set accessor is contained within a private class and thus cannot be seen by other classes outside of Class1. This effectively gives the set accessor the same access level as the get accessor.</p>
<pre><code class="language-csharp">public class Class1
{
    private class Class2
    {
        public class Class3
        {
            /// &lt;summary&gt;
            /// Gets or sets the name of the customer. 
            /// &lt;/summary&gt;
            public string Name
            {
                get { return this.name; }
                internal set { this.name = value; }
            }
        }
    }
}
</code></pre>
</li>
<li>
<p>Whenever the set accessor has protected or protected internal access, it should be referenced in the documentation. A protected or protected internal set accessor can always been seen by a class inheriting from the class containing the property.</p>
<pre><code class="language-csharp">internal class Class1
{
    public class Class2
    {
        /// &lt;summary&gt;
        /// Gets or sets the name of the customer. 
        /// &lt;/summary&gt;
        internal string Name
        {
            get { return this.name; }
            protected set { this.name = value; }
        }
    }

    private class Class3 : Class2
    {
        public Class3(string name) { this.Name = name; }
    }
}
</code></pre>
</li>
</ol>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, update the property's summary text so that the description begins with the proper wording, depending upon the type of the property and the types of accessors within the property.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1623:PropertySummaryDocumentationMustMatchAccessors&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1623 // PropertySummaryDocumentationMustMatchAccessors
#pragma warning restore SA1623 // PropertySummaryDocumentationMustMatchAccessors
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1624</rule>
    <ruleTitle><![CDATA[Property summary documentation should omit accessor with restricted access]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1624</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1624PropertySummaryDocumentationMustOmitSetAccessorWithRestrictedAccess</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1624</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The documentation text within a C# property's <code>&lt;summary&gt;</code> tag takes into account all of the accessors within the property, but one of the accessors has limited access.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs when one of the accessors within the property has limited access (usually the set accessor), but the summary documentation text for the property still refers to both accessors.</p>
<p>Normally, a property's summary text should begin with wording describing the types of accessors exposed within the property. If the property contains only a get accessor, the summary should begin with the word &quot;Gets&quot;. If the property contains only a set accessor, the summary should begin with the word &quot;Sets&quot;. If the property exposes both a get and set accessor, the summary text should begin with &quot;Gets or sets&quot;.</p>
<p>However, when an accessor within the property is given an access level which is more limited than the access level of the property, this accessor should be omitted from the summary documentation.</p>
<p>It can sometimes be non-obvious whether the set accessor within a property is actually less accessible than the get accessor. For example, consider the case where a public property is contained within an internal class, and the set accessor is given internal accessor. In effect, both the get and set accessors have the same access level. In this case, the summary documentation should refer to both the get and set accessors, since they effectively have the same access level.</p>
<p>In some situations, the set accessor for a property can have more restricted access than the get accessor. For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Gets the name of the customer. 
/// &lt;/summary&gt;
public string Name
{
    get { return this.name; }
    private set { this.name = value; }
}
</code></pre>
<p>In this example, the set accessor has been given private access, meaning that it can only be accessed by local members of the class in which it is contained. The get accessor, however, inherits its access from the parent property, thus it can be accessed by any caller, since the property has public access.</p>
<p>In this case, the documentation summary text should avoid referring to the set accessor, since it is not visible to external callers.</p>
<p>StyleCop applies a series of rules to determine when the set accessor should be referenced in the property's summary documentation. In general, these rules require the set accessor to be referenced whenever it is visible to the same set of callers as the get accessor, or whenever it is visible to external classes or inheriting classes.</p>
<p>The specific rules for determining whether to include the set accessor in the property's summary documentation are:</p>
<ol>
<li>
<p>The set accessor has the same access level as the get accessor. For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Gets or sets the name of the customer. 
/// &lt;/summary&gt;
protected string Name
{
    get { return this.name; }
    set { this.name = value; }
}
</code></pre>
</li>
<li>
<p>The property is only internally accessible within the assembly, and the set accessor also has internal access. For example:</p>
<pre><code class="language-csharp">internal class Class1
{
    /// &lt;summary&gt;
    /// Gets or sets the name of the customer. 
    /// &lt;/summary&gt;
    protected string Name
    {
        get { return this.name; }
        internal set { this.name = value; }
    }
}

internal class Class1
{
    public class Class2
    {
        /// &lt;summary&gt;
        /// Gets or sets the name of the customer. 
        /// &lt;/summary&gt;
        public string Name
        {
            get { return this.name; }
            internal set { this.name = value; }
        }
    }
}
</code></pre>
</li>
<li>
<p>The property is private or is contained beneath a private class, and the set accessor has any access modifier other than private. In the example below, the access modifier declared on the set accessor has no meaning, since the set accessor is contained within a private class and thus cannot be seen by other classes outside of Class1. This effectively gives the set accessor the same access level as the get accessor.</p>
<pre><code class="language-csharp">public class Class1
{
    private class Class2
    {
        public class Class3
        {
            /// &lt;summary&gt;
            /// Gets or sets the name of the customer. 
            /// &lt;/summary&gt;
            public string Name
            {
                get { return this.name; }
                internal set { this.name = value; }
            }
        }
    }
}
</code></pre>
</li>
<li>
<p>Whenever the set accessor has protected or protected internal access, it should be referenced in the documentation. A protected or protected internal set accessor can always been seen by a class inheriting from the class containing the property.</p>
<pre><code class="language-csharp">internal class Class1
{
    public class Class2
    {
        /// &lt;summary&gt;
        /// Gets or sets the name of the customer. 
        /// &lt;/summary&gt;
        internal string Name
        {
            get { return this.name; }
            protected set { this.name = value; }
        }
    }

    private class Class3 : Class2
    {
        public Class3(string name) { this.Name = name; }
    }
}
</code></pre>
</li>
</ol>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, update the property's summary text and remove wording which refers to the limited access accessor.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1624:PropertySummaryDocumentationMustOmitSetAccessorWithRestrictedAccess&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1624 // PropertySummaryDocumentationMustOmitSetAccessorWithRestrictedAccess
#pragma warning restore SA1624 // PropertySummaryDocumentationMustOmitSetAccessorWithRestrictedAccess
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1625</rule>
    <ruleTitle><![CDATA[Element documentation should not be copied and pasted]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1625</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1625ElementDocumentationMustNotBeCopiedAndPasted</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1625</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The Xml documentation for a C# element contains two or more identical entries, indicating that the documentation has been copied and pasted. This can sometimes indicate invalid or poorly written documentation.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs when an element contains two or more identical documentation texts. For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Joins a first name and a last name together into a single string.
/// &lt;/summary&gt;
/// &lt;param name=&quot;firstName&quot;&gt;Part of the name.&lt;/param&gt;
/// &lt;param name=&quot;lastName&quot;&gt;Part of the name.&lt;/param&gt;
/// &lt;returns&gt;The joined names.&lt;/returns&gt;
public string JoinNames(string firstName, string lastName)
{
    return firstName + &quot; &quot; + lastName;
}
</code></pre>
<p>In some cases, a method may contain one or more parameters which are not used within the body of the method. In this case, the documentation for the parameter can be set to &quot;The parameter is not used.&quot; StyleCop will allow multiple parameters to contain identical documentation as long as the documentation string is &quot;The parameter is not used.&quot;</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, edit the documentation for the element and ensure that each of the individual documentation texts are unique. For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Joins a first name and a last name together into a single string.
/// &lt;/summary&gt;
/// &lt;param name=&quot;firstName&quot;&gt;The first name to join.&lt;/param&gt;
/// &lt;param name=&quot;lastName&quot;&gt;The last name to join.&lt;/param&gt;
/// &lt;returns&gt;The joined names.&lt;/returns&gt;
public string JoinNames(string firstName, string lastName)
{
    return firstName + &quot; &quot; + lastName;
}
</code></pre>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1625:ElementDocumentationMustNotBeCopiedAndPasted&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1625 // ElementDocumentationMustNotBeCopiedAndPasted
#pragma warning restore SA1625 // ElementDocumentationMustNotBeCopiedAndPasted
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1626</rule>
    <ruleTitle><![CDATA[Single-line comments should not use documentation style slashes]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1626</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1626SingleLineCommentsMustNotUseDocumentationStyleSlashes</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1626</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The C# code contains a single-line comment which begins with three forward slashes in a row.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the code contains a single-line comment which begins with three slashes. Comments beginning with three slashes are reserved for Xml documentation headers. Single-line comments should begin with only two slashes. When commenting out lines of code, it is advisable to begin the comment with four slashes to differentiate it from normal comments. For example:</p>
<pre><code class="language-csharp">    /// &lt;summary&gt;
    /// Joins a first name and a last name together into a single string.
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;firstName&quot;&gt;Part of the name.&lt;/param&gt;
    /// &lt;param name=&quot;lastName&quot;&gt;Part of the name.&lt;/param&gt;
    /// &lt;returns&gt;The joined names.&lt;/returns&gt;
    public string JoinNames(string firstName, string lastName)
    {
*A legal comment beginning with two slashes:*
        // Join the names together.
        string fullName = firstName + &quot; &quot; + lastName;

*An illegal comment beginning with three slashes:*
        /// Trim the name.
        fullName = fullName.Trim();

*A line of commented-out code beginning with four slashes:*
        ////fullName = asfd; 

        return fullName;
    }
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove a slash from the beginning of the comment so that it begins with only two slashes.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1626:SingleLineCommentsMustNotUseDocumentationStyleSlashes&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1626 // SingleLineCommentsMustNotUseDocumentationStyleSlashes
#pragma warning restore SA1626 // SingleLineCommentsMustNotUseDocumentationStyleSlashes
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1627</rule>
    <ruleTitle><![CDATA[Documentation text should not be empty]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1627</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1627DocumentationTextMustNotBeEmpty</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1627</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The Xml header documentation for a C# code element contains an empty tag.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs when the documentation header for an element contains an empty tag. For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Joins a first name and a last name together into a single string.
/// &lt;/summary&gt;
/// &lt;remarks&gt;&lt;/remarks&gt;
/// &lt;param name=&quot;firstName&quot;&gt;Other part of name.&lt;/param&gt;
/// &lt;param name=&quot;lastName&quot;&gt;Part of the name.&lt;/param&gt;
/// &lt;returns&gt;The joined names.&lt;/returns&gt;
public string JoinNames(string firstName, string lastName)
{
    ...
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add documentation text within the empty tag.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1627:DocumentationTextMustNotBeEmpty&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1627 // DocumentationTextMustNotBeEmpty
#pragma warning restore SA1627 // DocumentationTextMustNotBeEmpty
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1629</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1629DocumentationTextMustEndWithAPeriod</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1629</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A section of the Xml header documentation for a C# element does not end with a period (also known as a full stop).</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs when part of the documentation does not end with a period. For example, the summary text in the documentation below does not end with a period:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Joins a first name and a last name together into a single string
/// &lt;/summary&gt;
/// &lt;param name=&quot;firstName&quot;&gt;The first name.&lt;/param&gt;
/// &lt;param name=&quot;lastName&quot;&gt;The last name.&lt;/param&gt;
/// &lt;returns&gt;The joined names.&lt;/returns&gt;
public string JoinNames(string firstName, string lastName)
{
    ...
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, ensure that all sections of the documentation end with a period.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1629:DocumentationTextMustEndWithAPeriod&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1629 // DocumentationTextMustEndWithAPeriod
#pragma warning restore SA1629 // DocumentationTextMustEndWithAPeriod
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1633</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1633FileMustHaveHeader</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1633</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A C# code file is missing a standard file header.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a C# source file is missing a file header.</p>
<p>The file header should begin at the start of the file, and it may only be preceded by whitespace.</p>
<p>The file header should be formatted as a block of comments containing either Xml or preconfigured text, as follows:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;NameOfFile.cs&quot; company=&quot;CompanyName&quot;&gt;
//     Company copyright tag.
// &lt;/copyright&gt;
//-----------------------------------------------------------------------
</code></pre>
<p>or</p>
<pre><code class="language-csharp">// Copyright (c) Tunnel Vision Laboratories, LLC. All Rights Reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.
</code></pre>
<p>The type of header to use depends on the setting of the <code>xmlHeader</code> property. See the <a href="https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/Configuration.md">configuration</a> section for details on how to set this up.</p>
<h3>Examples</h3>
<p>For example, a file called Widget.cs from a fictional company called Sprocket Enterprises should contain a file header similar to the following:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;Widget.cs&quot; company=&quot;Sprocket Enterprises&quot;&gt;
//     Copyright (c) Sprocket Enterprises. All rights reserved.
// &lt;/copyright&gt;
//-----------------------------------------------------------------------
</code></pre>
<p>The dashed lines at the top and bottom of the header are not strictly necessary, so the header could be written as:</p>
<pre><code class="language-csharp">// &lt;copyright file=&quot;Widget.cs&quot; company=&quot;Sprocket Enterprises&quot;&gt;
//     Copyright (c) Sprocket Enterprises. All rights reserved.
// &lt;/copyright&gt;
</code></pre>
<p>It is possible to add additional tags, although they will not be checked or enforced by StyleCop:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;Widget.cs&quot; company=&quot;Sprocket Enterprises&quot;&gt;
//     Copyright (c) Sprocket Enterprises. All rights reserved.
// &lt;/copyright&gt;
// &lt;author&gt;John Doe&lt;/author&gt;
//-----------------------------------------------------------------------
</code></pre>
<p>A file that is completely auto-generated by a tool, and which should not be checked or enforced by StyleCop, can include an &quot;auto-generated&quot; header rather than the standard file header. This will cause StyleCop to ignore the file. This type of header should never be placed on top of a manually written code file.</p>
<pre><code class="language-csharp">// &lt;auto-generated /&gt;
namespace Sample.Something
{
    // The contents of this file are completely auto-generated by a tool.
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add a standard file header at the top of the file.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1633:FileMustHaveHeader&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1633 // FileMustHaveHeader
#pragma warning restore SA1633 // FileMustHaveHeader
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1634</rule>
    <ruleTitle><![CDATA[File header should show copyright]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1634</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1634FileHeaderMustShowCopyright</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1634</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The file header at the top of a C# code file is missing a copyright tag.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the file header at the top of a C# file is missing a copyright tag. For example:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
//&lt;Tag&gt;A fileheader which does not contain a copyright tag&lt;/Tag&gt;
//-----------------------------------------------------------------------
</code></pre>
<p>A file header should include a copyright tag, as follows:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;Widget.cs&quot; company=&quot;My Company&quot;&gt;
//     Custom company copyright tag.
// &lt;/copyright&gt;
//-----------------------------------------------------------------------
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add a standard copyright tag to the file header.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1634:FileHeaderMustShowCopyright&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1634 // FileHeaderMustShowCopyright
#pragma warning restore SA1634 // FileHeaderMustShowCopyright
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1635</rule>
    <ruleTitle><![CDATA[File header should have copyright text]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1635</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1635FileHeaderMustHaveCopyrightText</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1635</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The file header at the top of a C# code file is missing copyright text.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the file header at the top of a C# file does not contain text within its copyright tag. For example:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;Widget.cs&quot; company=&quot;Sprocket Enterprises&quot;&gt;
// &lt;/copyright&gt;
//-----------------------------------------------------------------------
</code></pre>
<p>A file header should include copyright text, as follows:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;Widget.cs&quot; company=&quot;Sprocket Enterprises&quot;&gt;
//     Copyright (c) Sprocket Enterprises. All rights reserved.
// &lt;/copyright&gt;
//-----------------------------------------------------------------------
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add your company's standard copyright text to the copyright tag.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1635:FileHeaderMustHaveCopyrightText&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1635 // FileHeaderMustHaveCopyrightText
#pragma warning restore SA1635 // FileHeaderMustHaveCopyrightText
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1636</rule>
    <ruleTitle><![CDATA[File header copyright text should match]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1636</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1636FileHeaderCopyrightTextMustMatch</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1636</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The file header at the top of a C# code file does not contain the appropriate copyright text.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the file header at the top of a C# file does not contain the copyright text that has been specified for the project.</p>
<p>In order to enable this rule, the <code>copyrightText</code> property must have been specified. See the <a href="https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/Configuration.md">configuration</a> section for details on how to set this up.</p>
<p>The value of the <code>xmlHeader</code> property will influence the behavior of this rule. When the <code>xmlHeader</code> property is <strong>true</strong> (the default), StyleCop Analyzers expects file headers to conform to the following standard StyleCop format.</p>
<pre><code class="language-csharp">// &lt;copyright file=&quot;{fileName}&quot; company=&quot;{companyName}&quot;&gt;
// {copyrightText}
// &lt;/copyright&gt;
</code></pre>
<p>When the <code>xmlHeader</code> property is explicitly set to <strong>false</strong>, StyleCop Analyzers expects file headers to conform to the following customizable format.</p>
<pre><code class="language-csharp">// {copyrightText}
</code></pre>
<p>With these settings in place, every file within the project should contain the required copyright text in the format described above.</p>
<h3>Comment styles</h3>
<p>This rule will accept several comment styles. The examples below give an overview of accepted styles.</p>
<p>Examples with the <code>xmlHeader</code> property set to <strong>true</strong></p>
<pre><code class="language-csharp">// &lt;copyright file=&quot;{fileName}&quot; company=&quot;{companyName}&quot;&gt;
// {copyrightText}
// &lt;/copyright&gt;
</code></pre>
<pre><code class="language-csharp">// ----------------------------------------------------------------------
// &lt;copyright file=&quot;{fileName}&quot; company=&quot;{companyName}&quot;&gt;
// {copyrightText}
// &lt;/copyright&gt;
// ----------------------------------------------------------------------
</code></pre>
<pre><code class="language-csharp">/* &lt;copyright file=&quot;{fileName}&quot; company=&quot;{companyName}&quot;&gt;
 * {copyrightText}
 * &lt;/copyright&gt;
 */
</code></pre>
<pre><code class="language-csharp">/*
  &lt;copyright file=&quot;{fileName}&quot; company=&quot;{companyName}&quot;&gt;
  {copyrightText}
  &lt;/copyright&gt;
*/
</code></pre>
<p>Examples with the <code>xmlHeader</code> property set to <strong>false</strong></p>
<pre><code class="language-csharp">// {copyrightText}
</code></pre>
<pre><code class="language-csharp">/* {copyrightText} */
</code></pre>
<pre><code class="language-csharp">/*
 * {copyrightText}
 */
</code></pre>
<pre><code class="language-csharp">/*
  {copyrightText}
*/
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add your company's standard copyright text to the file header copyright tag.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1636:FileHeaderCopyrightTextMustMatch&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1636 // FileHeaderCopyrightTextMustMatch
#pragma warning restore SA1636 // FileHeaderCopyrightTextMustMatch
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1637</rule>
    <ruleTitle><![CDATA[File header should contain file name]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1637</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1637FileHeaderMustContainFileName</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1637</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The file header at the top of a C# code file is missing the file name.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the file header at the top of a C# file does not contain a valid file name tag. For example:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright company=&quot;My Company&quot;&gt;
//     Custom company copyright tag.
// &lt;/copyright&gt;
//-----------------------------------------------------------------------
</code></pre>
<p>A file header should include a file tag containing the name of the file, as follows:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;Widget.cs&quot; company=&quot;My Company&quot;&gt;
//     Custom company copyright tag.
// &lt;/copyright&gt;
//-----------------------------------------------------------------------
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add a file tag containing the name of the file.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1637:FileHeaderMustContainFileName&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1637 // FileHeaderMustContainFileName
#pragma warning restore SA1637 // FileHeaderMustContainFileName
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1638</rule>
    <ruleTitle><![CDATA[File header file name documentation should match file name]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1638</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1638FileHeaderFileNameDocumentationMustMatchFileName</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1638</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The file tag within the file header at the top of a C# code file does not contain the name of the file.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the file tag within the file header at the top of a C# file does not contain the name of the file. For example, consider a C# source file named File1.cs, with the following header:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;File2.cs&quot; company=&quot;My Company&quot;&gt;
//     Custom company copyright tag.
// &lt;/copyright&gt;
//-----------------------------------------------------------------------
</code></pre>
<p>A violation of this rule would occur, since the file tag does not contain the correct name of the file. The header should be written as:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;File1.cs&quot; company=&quot;My Company&quot;&gt;
//     Custom company copyright tag.
// &lt;/copyright&gt;
//-----------------------------------------------------------------------
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add the name of the file to the file tag.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1638:FileHeaderFileNameDocumentationMustMatchFileName&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1638 // FileHeaderFileNameDocumentationMustMatchFileName
#pragma warning restore SA1638 // FileHeaderFileNameDocumentationMustMatchFileName
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1639</rule>
    <ruleTitle><![CDATA[File header should have summary]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1639</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1639FileHeaderMustHaveSummary</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1639</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<p>:bulb: This rule is disabled by default.</p>
<h2>Cause</h2>
<p>The file header at the top of a C# code file does not contain a filled-in summary tag.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the file header at the top of a C# file does not contain a valid summary tag.</p>
<p>For example:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;Widget.cs&quot; company=&quot;My Company&quot;&gt;
//     Custom company copyright tag.
// &lt;/copyright&gt;
//-----------------------------------------------------------------------
</code></pre>
<p>If this rule is enabled, the file header should contain a summary tag. For example:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;Widget.cs&quot; company=&quot;My Company&quot;&gt;
//     Custom company copyright tag.
// &lt;/copyright&gt;
// &lt;summary&gt;This is the Widget class.&lt;/summary&gt;
//-----------------------------------------------------------------------
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add and fill-in a summary tag describing the contents of the file.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1639:FileHeaderMustHaveSummary&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1639 // FileHeaderMustHaveSummary
#pragma warning restore SA1639 // FileHeaderMustHaveSummary
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1640</rule>
    <ruleTitle><![CDATA[File header should have valid company text]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1640</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1640FileHeaderMustHaveValidCompanyText</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1640</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The file header at the top of a C# code file does not contain company name text.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the file header at the top of a C# file does not contain a company tag with company name text. For example:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;Widget.cs&quot; company=&quot;&quot;&gt;
//     Custom company copyright tag.
// &lt;/copyright&gt;
//-----------------------------------------------------------------------
</code></pre>
<p>The company attribute should have text in it. For example:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;Widget.cs&quot; company=&quot;My Company&quot;&gt;
//     Custom company copyright tag.
// &lt;/copyright&gt;
//-----------------------------------------------------------------------
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add and fill-in a company attribute containing the name of the company.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1640:FileHeaderMustHaveValidCompanyText&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1640 // FileHeaderMustHaveValidCompanyText
#pragma warning restore SA1640 // FileHeaderMustHaveValidCompanyText
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1641</rule>
    <ruleTitle><![CDATA[File header company name text should match]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1641</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1641FileHeaderCompanyNameTextMustMatch</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1641</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The file header at the top of a C# code file does not contain the appropriate company name text.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the file header at the top of a C# file does not contain the company name text that has been specified for the project.</p>
<p>In order to enable this rule, the <code>companyName</code> property must have been specified. In addition to that, the <code>xmlHeader</code> property must be either omitted or have a value of <strong>true</strong>.
See the <a href="https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/Configuration.md">configuration</a> section for details on how to set this up.</p>
<p>With these settings in place, every file within the project should contain the required company name text within its file header copyright tag, as shown in the example below:</p>
<pre><code class="language-csharp">//-----------------------------------------------------------------------
// &lt;copyright file=&quot;Widget.cs&quot; company=&quot;My Company&quot;&gt;
//     Custom company copyright tag.
// &lt;/copyright&gt;
//-----------------------------------------------------------------------
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, add your company's standard company name text to the file header copyright tag.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1641:FileHeaderCompanyNameTextMustMatch&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1641 // FileHeaderCompanyNameTextMustMatch
#pragma warning restore SA1641 // FileHeaderCompanyNameTextMustMatch
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1642</rule>
    <ruleTitle><![CDATA[Constructor summary documentation should begin with standard text]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1642</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1642ConstructorSummaryDocumentationMustBeginWithStandardText</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1642</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The XML documentation header for a C# constructor does not contain the appropriate summary text.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the
use of XML documentation headers. For an introduction to these headers and a description of the header syntax, see the
following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs when the summary tag within the documentation header for a constructor does not begin
with the proper text.</p>
<p>The rule is intended to standardize the summary text for a constructor based on the access level of the constructor. The
summary for an instance constructor should begin with &quot;Initializes a new instance of the {class name} class.&quot; For example,
the following shows the constructor for the <code>Customer</code> class.</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Initializes a new instance of the &lt;see cref=&quot;Customer&quot;/&gt; class.
/// &lt;/summary&gt;
public Customer()
{
}
</code></pre>
<p>If documenting a struct, the summary should contain the word 'struct' instead of 'class'. For example, the following shows the constructor for the <code>MyStruct</code> struct.</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Initializes a new instance of the &lt;see cref=&quot;MyStruct&quot;/&gt; struct.
/// &lt;/summary&gt;
public MyStruct()
{
}
</code></pre>
<p>If the class contains generic parameters, these can be annotated within the <code>cref</code> link using either of the following
two formats:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Initializes a new instance of the &lt;see cref=&quot;Customer`1&quot;/&gt; class.
/// &lt;/summary&gt;
public Customer()
{
}

/// &lt;summary&gt;
/// Initializes a new instance of the &lt;see cref=&quot;Customer{T}&quot;/&gt; class.
/// &lt;/summary&gt;
public Customer()
{
}
</code></pre>
<p>If the constructor is static, the summary text should begin with &quot;Initializes static members of the {class name} class.&quot;
For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Initializes static members of the &lt;see cref=&quot;Customer&quot;/&gt; class.
/// &lt;/summary&gt;
public static Customer()
{
}
</code></pre>
<p>For compatibility with StyleCop Classic, private instance constructors are allowed to use the summary text &quot;Prevents a
default instance of the {class name} class from being created.&quot; New code is encouraged to use the form above instead for
all instance constructors.</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Prevents a default instance of the &lt;see cref=&quot;Customer&quot;/&gt; class from being created.
/// &lt;/summary&gt;
private Customer()
{
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, edit the summary text for the constructor as described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1642:ConstructorSummaryDocumentationMustBeginWithStandardText&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1642 // ConstructorSummaryDocumentationMustBeginWithStandardText
#pragma warning restore SA1642 // ConstructorSummaryDocumentationMustBeginWithStandardText
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1643</rule>
    <ruleTitle><![CDATA[Destructor summary documentation should begin with standard text]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1643</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1643DestructorSummaryDocumentationMustBeginWithStandardText</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1643</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The Xml documentation header for a C# finalizer does not contain the appropriate summary text.</p>
<h2>Rule description</h2>
<p>C# syntax provides a mechanism for inserting documentation for classes and elements directly into the code, through the use of Xml documentation headers. For an introduction to these headers and a description of the header syntax, see the following article: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments">https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/xml-documentation-comments</a>.</p>
<p>A violation of this rule occurs when the summary tag within the documentation header for a finalizer does not begin with the proper text.</p>
<p>The rule is intended to standardize the summary text for a finalizer. The summary for a finalizer should begin with &quot;Finalizes an instance of the {class name} class.&quot; For example, the following shows the finalizer for the Customer class.</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Finalizes an instance of the Customer class.
/// &lt;/summary&gt;
~Customer()
{
}
</code></pre>
<p>It is possible to embed other tags into the summary text. For example:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// Finalizes an instance of the &lt;see cref=&quot;Customer&quot;/&gt; class.
/// &lt;/summary&gt;
~Customer()
{
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, edit the summary text for the finalizer as described above.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1643:DestructorSummaryDocumentationMustBeginWithStandardText&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1643 // DestructorSummaryDocumentationMustBeginWithStandardText
#pragma warning restore SA1643 // DestructorSummaryDocumentationMustBeginWithStandardText
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1648</rule>
    <ruleTitle><![CDATA[inheritdoc should be used with inheriting class]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1648</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1648InheritDocMustBeUsedWithInheritingClass</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1648</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p><code>&lt;inheritdoc&gt;</code> has been used on an element that doesn't inherit from a base class or implement an interface.</p>
<h2>Rule description</h2>
<p>Verifies that an <code>&lt;inheritdoc&gt;</code> element is not used when the class or interface does not inherit from a base class or
interface. A violation of this rule occurs when the element having the <code>&lt;inheritdoc&gt;</code> element doesn't inherit from a
base case or implement an interface.</p>
<p><code>&lt;inheritdoc/&gt;</code> elements are always allowed when they contain a <code>cref</code> attribute, which specifies the target element
from which documentation is inherited.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the <code>&lt;inheritdoc&gt;</code> element and document the element appropriately.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">[SuppressMessage(&quot;StyleCop.CSharp.DocumentationRules&quot;, &quot;SA1648:InheritDocMustBeUsedWithInheritingClass&quot;, Justification = &quot;Reviewed.&quot;)]
</code></pre>
<pre><code class="language-csharp">#pragma warning disable SA1648 // InheritDocMustBeUsedWithInheritingClass
#pragma warning restore SA1648 // InheritDocMustBeUsedWithInheritingClass
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1649</rule>
    <ruleTitle><![CDATA[File name should match first type name]]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SA1649</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1649FileNameMustMatchTypeName</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1649</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>The file name of a C# code file does not match the first type declared in the file. For generics that are defined as
<code>Class1&lt;T&gt;</code> the name of the file needs to be <code>Class1{T}.cs</code> or <code>Class1`1.cs</code> depending on the <code>fileNamingConvention</code>
setting. See <a href="Configuration.md">Configuration.md</a> for more information.</p>
<p>Partial classes are ignored.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the file name of a C# file does not contain the name of the first type in the file.
For example, consider a C# source file named Class1.cs, with the following code:</p>
<pre><code class="language-csharp">public class Class2
{
}
</code></pre>
<p>A violation of this rule would occur, since the file name is not contain the correct name of the first type in the file.
The file should be written as:</p>
<pre><code class="language-csharp">public class Class1
{
}
</code></pre>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, rename the file to  match the name of the first type from the file.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SA1649 // SA1649FileNameMustMatchTypeName
#pragma warning restore SA1649 // SA1649FileNameMustMatchTypeName
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SA1651</rule>
    <ruleTitle><![CDATA[Do not use placeholder elements]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SA1651</h1>
<table>
<tr>
  <td>TypeName</td>
  <td>SA1651DoNotUsePlaceholderElements</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SA1651</td>
</tr>
<tr>
  <td>Category</td>
  <td>Documentation Rules</td>
</tr>
</table>
<p>:memo: This rule is new for StyleCop Analyzers, and was not present in StyleCop Classic.</p>
<h2>Cause</h2>
<p>The documentation for the element contains one or more <code>&lt;placeholder&gt;</code> elements.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when the element documentation contains <code>&lt;placeholder&gt;</code> elements:</p>
<pre><code class="language-csharp">/// &lt;summary&gt;
/// This method &lt;placeholder&gt;performs some operation&lt;/placeholder&gt;.
/// &lt;/summary&gt;
public void SomeOperation()
{
}
</code></pre>
<p>Placeholder elements should be reviewed and removed from documentation.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, review the placeholder documentation for accuracy and remove the <code>&lt;placeholder&gt;</code> tags.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SA1651 // Do not use placeholder elements
/// &lt;summary&gt;
/// This method &lt;placeholder&gt;performs some operation&lt;/placeholder&gt;.
/// &lt;/summary&gt;
public void SomeOperation()
#pragma warning restore SA1651 // Do not use placeholder elements
{
}
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SX1101</rule>
    <ruleTitle><![CDATA[Do not prefix local calls with 'this.']]></ruleTitle>
    <ruleDesc><![CDATA[<h2>SX1101</h2>
<table>
<tr>
  <td>TypeName</td>
  <td>SX1101DoNotPrefixLocalMembersWithThis</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SX1101</td>
</tr>
<tr>
  <td>Category</td>
  <td>Readability Rules</td>
</tr>
</table>
<h2>Cause</h2>
<p>A call to an instance member of the local class or a base class is prefixed with <code>this.</code>.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs whenever the code contains a call to an instance member of the local class or a base class which is prefixed with <code>this.</code>. An exception is made when the name of a method parameter conflicts with identifier after the <code>this.</code> prefix, in that case no violation is reported.
This rule is disabled by default. When enabling this rule, the <a href="SA1101.md">SA1101</a> rule should be disabled.</p>
<h2>How to fix violations</h2>
<p>To fix a violation of this rule, remove the 'this.' prefix before the call to the class member.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SX1101 // DoNotPrefixLocalMembersWithThis
#pragma warning restore SX1101 // DoNotPrefixLocalMembersWithThis
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SX1309</rule>
    <ruleTitle><![CDATA[Field names should begin with underscore]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SX1309</h1>
<table>
<tr>
  <td>TypeName</td>
  <td>SX1309FieldNamesMustBeginWithUnderscore</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SX1309</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules (Alternative)</td>
</tr>
</table>
<h2>Alternative rule</h2>
<p>This rule is a non-standard extension to the default StyleCop behavior, and represents an alternative style which is
adopted by some projects. Alternative rules are known to directly conflict with standard StyleCop rules.</p>
<h2>Cause</h2>
<p>A field name does not begin with an underscore.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a field name does not begin with an underscore.</p>
<h3>Detailed Behavior</h3>
<p>This rule only checks the name of private instance fields.</p>
<h2>How to fix violations</h2>
<p>The fix an instance of this violation, add an underscore (<code>_</code>) prefix to the name of the field.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SX1309 // Field names should begin with underscore
int bar;
#pragma warning restore SX1309 // Field names should begin with underscore
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <ruleInfo>
    <ruleSetName>StyleCop</ruleSetName>
    <ruleSetDesc><![CDATA[StyleCop.Analyzers provides warnings that indicate style and consistency rule violations in C# code. The warnings are organized into rule areas such as documentation, layout, naming, ordering, readability, spacing, and so forth. Each warning signifies a violation of a style or consistency rule.]]></ruleSetDesc>
    <rule>SX1309S</rule>
    <ruleTitle><![CDATA[Static field names should begin with underscore]]></ruleTitle>
    <ruleDesc><![CDATA[<h1>SX1309S</h1>
<table>
<tr>
  <td>TypeName</td>
  <td>SX1309SStaticFieldNamesMustBeginWithUnderscore</td>
</tr>
<tr>
  <td>CheckId</td>
  <td>SX1309S</td>
</tr>
<tr>
  <td>Category</td>
  <td>Naming Rules (Alternative)</td>
</tr>
</table>
<h2>Alternative rule</h2>
<p>This rule is a non-standard extension to the default StyleCop behavior, and represents an alternative style which is
adopted by some projects. Alternative rules are known to directly conflict with standard StyleCop rules.</p>
<h2>Cause</h2>
<p>A static field name does not begin with an underscore.</p>
<h2>Rule description</h2>
<p>A violation of this rule occurs when a static field name does not begin with an underscore.</p>
<h3>Detailed Behavior</h3>
<p>This rule only checks the name of private, static, non-<code>readonly</code> fields.</p>
<h2>How to fix violations</h2>
<p>The fix an instance of this violation, add an underscore (<code>_</code>) prefix to the name of the field.</p>
<h2>How to suppress violations</h2>
<pre><code class="language-csharp">#pragma warning disable SX1309S // Static field names should begin with underscore
static int bar;
#pragma warning restore SX1309S // Static field names should begin with underscore
</code></pre>
]]></ruleDesc>
    <ruleSeverity>Minor</ruleSeverity>
    <ruleType>Others</ruleType>
    <kindScope>CODING_RULE</kindScope>
  </ruleInfo>
  <bug>
    <violationHash>-2846913358928252323</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>111</startLine>
    <endLine>111</endLine>
    <rule>CA1822</rule>
    <ruleTitle><![CDATA[Mark members as static]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['ConsoleDrawing.DrawArray(int[,], bool)'의 'this' 매개 변수(Visual Basic의 경우 'Me')는 사용되지 않습니다. 멤버를 static(Visual Basic의 경우 Shared)으로 표시하거나 메서드 본문에서 'this'/'Me'를 사용하거나, 필요한 경우 하나 이상의 속성 접근자를 사용하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2188871782490656442</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>111</startLine>
    <endLine>111</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['arr'은(는) 다차원 배열입니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7923385527925100942</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>87</startLine>
    <endLine>87</endLine>
    <rule>CA1822</rule>
    <ruleTitle><![CDATA[Mark members as static]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['ConsoleDrawing.ShowGameOver(Game)'의 'this' 매개 변수(Visual Basic의 경우 'Me')는 사용되지 않습니다. 멤버를 static(Visual Basic의 경우 Shared)으로 표시하거나 메서드 본문에서 'this'/'Me'를 사용하거나, 필요한 경우 하나 이상의 속성 접근자를 사용하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>550569745505101263</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>20</startLine>
    <endLine>20</endLine>
    <rule>SA1001</rule>
    <ruleTitle><![CDATA[Commas should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Commas should be followed by whitespace.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5351250411763237343</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>21</startLine>
    <endLine>21</endLine>
    <rule>SA1001</rule>
    <ruleTitle><![CDATA[Commas should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Commas should be followed by whitespace.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5654674689127381247</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>22</startLine>
    <endLine>22</endLine>
    <rule>SA1001</rule>
    <ruleTitle><![CDATA[Commas should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Commas should be followed by whitespace.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4740181834603731933</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>23</startLine>
    <endLine>23</endLine>
    <rule>SA1001</rule>
    <ruleTitle><![CDATA[Commas should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Commas should be followed by whitespace.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-534111311425608777</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>30</startLine>
    <endLine>30</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7121586697823764207</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>34</startLine>
    <endLine>34</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6754141862604171865</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>37</startLine>
    <endLine>37</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1281473215432559881</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>40</startLine>
    <endLine>40</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6092186479922913135</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>44</startLine>
    <endLine>44</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-231680386589717755</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>55</startLine>
    <endLine>55</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1592179677384729789</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>62</startLine>
    <endLine>62</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7146504598501047463</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>121</startLine>
    <endLine>121</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>429149293551933928</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>20</startLine>
    <endLine>20</endLine>
    <rule>SA1012</rule>
    <ruleTitle><![CDATA[Opening braces should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening brace should be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4829080943371599062</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>21</startLine>
    <endLine>21</endLine>
    <rule>SA1012</rule>
    <ruleTitle><![CDATA[Opening braces should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening brace should be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4159862509719573176</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>22</startLine>
    <endLine>22</endLine>
    <rule>SA1012</rule>
    <ruleTitle><![CDATA[Opening braces should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening brace should be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6778045695840279826</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>23</startLine>
    <endLine>23</endLine>
    <rule>SA1012</rule>
    <ruleTitle><![CDATA[Opening braces should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening brace should be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7428835625204058494</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>20</startLine>
    <endLine>20</endLine>
    <rule>SA1013</rule>
    <ruleTitle><![CDATA[Closing braces should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6735049289510162036</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>21</startLine>
    <endLine>21</endLine>
    <rule>SA1013</rule>
    <ruleTitle><![CDATA[Closing braces should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2669072312378072498</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>22</startLine>
    <endLine>22</endLine>
    <rule>SA1013</rule>
    <ruleTitle><![CDATA[Closing braces should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5502870263612352292</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>23</startLine>
    <endLine>23</endLine>
    <rule>SA1013</rule>
    <ruleTitle><![CDATA[Closing braces should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8765829348522386644</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>42</startLine>
    <endLine>42</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5879749762874115242</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>47</startLine>
    <endLine>47</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4069455349381883202</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>52</startLine>
    <endLine>52</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4072339086371681713</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>92</startLine>
    <endLine>92</endLine>
    <rule>SA1106</rule>
    <ruleTitle><![CDATA[Code should not contain empty statements]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain empty statements]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1635088053759976967</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>10</startLine>
    <endLine>10</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1814972214061480627</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>60</startLine>
    <endLine>60</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3992677101838466766</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5080135802860359030</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1920171732621858074</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>3</startLine>
    <endLine>3</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8136375790222005658</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>4</startLine>
    <endLine>4</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2305675392227249053</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>63</startLine>
    <endLine>63</endLine>
    <rule>SA1204</rule>
    <ruleTitle><![CDATA[Static elements should appear before instance elements]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Static members should appear before non-static members]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4281630521922625447</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>178</startLine>
    <endLine>178</endLine>
    <rule>SA1204</rule>
    <ruleTitle><![CDATA[Static elements should appear before instance elements]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Static members should appear before non-static members]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7363676896181207937</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1210</rule>
    <ruleTitle><![CDATA[Using directives should be ordered alphabetically by namespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directives should be ordered alphabetically by the namespaces.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3922249147433925773</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>3</startLine>
    <endLine>3</endLine>
    <rule>SA1210</rule>
    <ruleTitle><![CDATA[Using directives should be ordered alphabetically by namespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directives should be ordered alphabetically by the namespaces.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8190867505585274575</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>19</startLine>
    <endLine>19</endLine>
    <rule>SA1311</rule>
    <ruleTitle><![CDATA[Static readonly fields should begin with upper-case letter]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Static readonly fields should begin with upper-case letter]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6067258314229261622</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>8</startLine>
    <endLine>8</endLine>
    <rule>SA1400</rule>
    <ruleTitle><![CDATA[Access modifier should be declared]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Element 'ConsoleDrawing' should declare an access modifier]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6207062783560338830</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>23</startLine>
    <endLine>23</endLine>
    <rule>SA1413</rule>
    <ruleTitle><![CDATA[Use trailing comma in multi-line initializers]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Use trailing comma in multi-line initializers]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5029795772071572553</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>19</startLine>
    <endLine>19</endLine>
    <rule>SA1500</rule>
    <ruleTitle><![CDATA[Braces for multi-line statements should not share line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Braces for multi-line statements should not share line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5639248350843169881</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>84</startLine>
    <endLine>84</endLine>
    <rule>SA1508</rule>
    <ruleTitle><![CDATA[Closing braces should not be preceded by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[A closing brace should not be preceded by a blank line.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3121067797507552267</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>118</startLine>
    <endLine>119</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3599035564381355139</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>152</startLine>
    <endLine>153</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1204637736058437659</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>160</startLine>
    <endLine>161</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2436435488280475719</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>162</startLine>
    <endLine>163</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7409136083390242837</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>8</startLine>
    <endLine>8</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8762657589759951267</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>26</startLine>
    <endLine>26</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4054239867101644683</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>63</startLine>
    <endLine>63</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3642129906299104373</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>86</startLine>
    <endLine>86</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1518038936512484996</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>17</startLine>
    <endLine>17</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6547283145656824582</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>174</startLine>
    <endLine>174</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2224241368806199306</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>176</startLine>
    <endLine>176</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4117660257578304822</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>177</startLine>
    <endLine>177</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1396975180308287303</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4807222069523529415</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>23</startLine>
    <endLine>23</endLine>
    <rule>CA1804</rule>
    <ruleTitle><![CDATA[Remove unused locals]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['BoardTest.TestConstructor_Wrong_Size()'에서 'Board' 형식의 변수 'board'을(를) 선언하는데 이 변수는 사용되지 않거나 단지 할당만 되어 있습니다. 이 변수를 사용하거나 제거하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3462007446335077155</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>30</startLine>
    <endLine>30</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['BoardTest.TestFixPiece()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3430787252427819325</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>173</startLine>
    <endLine>173</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['BoardTest.TestFixShadowPiece()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6383655534269654239</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>208</startLine>
    <endLine>208</endLine>
    <rule>CA1804</rule>
    <ruleTitle><![CDATA[Remove unused locals]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['BoardTest.TestGetItem_Wrong_Index_0()'에서 'int' 형식의 변수 'try_get_val'을(를) 선언하는데 이 변수는 사용되지 않거나 단지 할당만 되어 있습니다. 이 변수를 사용하거나 제거하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5436871832357056078</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>216</startLine>
    <endLine>216</endLine>
    <rule>CA1804</rule>
    <ruleTitle><![CDATA[Remove unused locals]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['BoardTest.TestGetItem_Wrong_Index_1()'에서 'int' 형식의 변수 'try_get_val'을(를) 선언하는데 이 변수는 사용되지 않거나 단지 할당만 되어 있습니다. 이 변수를 사용하거나 제거하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8436829581650774137</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>32</startLine>
    <endLine>32</endLine>
    <rule>SA1000</rule>
    <ruleTitle><![CDATA[Keywords should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The keyword 'for' should be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>942732433672819654</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7614410063098340222</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4748952471265368758</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>3</startLine>
    <endLine>3</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1161897382267758379</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1210</rule>
    <ruleTitle><![CDATA[Using directives should be ordered alphabetically by namespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directives should be ordered alphabetically by the namespaces.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3823398109300240617</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>35</startLine>
    <endLine>36</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>687469620821698365</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>43</startLine>
    <endLine>44</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6081511492398069239</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>58</startLine>
    <endLine>59</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8901405603308532125</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>66</startLine>
    <endLine>67</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2207934110845746767</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>8</startLine>
    <endLine>8</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6286929872950069857</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>11</startLine>
    <endLine>11</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4320727618179398297</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>21</startLine>
    <endLine>21</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8237534845675814887</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>27</startLine>
    <endLine>27</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3062776461883291609</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>50</startLine>
    <endLine>50</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3334878558736592147</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>73</startLine>
    <endLine>73</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6302935663903791043</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>88</startLine>
    <endLine>88</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8259802109912210139</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>103</startLine>
    <endLine>103</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8338395091574256119</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>111</startLine>
    <endLine>111</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8561437764458365033</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>120</startLine>
    <endLine>120</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6295605251545197593</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>128</startLine>
    <endLine>128</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7367764195768709611</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>136</startLine>
    <endLine>136</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5316126900851192187</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>148</startLine>
    <endLine>148</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5888835977754164111</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>160</startLine>
    <endLine>160</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1111569969214924139</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>170</startLine>
    <endLine>170</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3416528720973381819</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>183</startLine>
    <endLine>183</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6076520878677344433</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>190</startLine>
    <endLine>190</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3709182672709255313</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>197</startLine>
    <endLine>197</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>28891162490357121</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>205</startLine>
    <endLine>205</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1375775573062410825</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>213</startLine>
    <endLine>213</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7535314873254351387</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>220</startLine>
    <endLine>220</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3888289538559729549</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6499755606960218649</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\Resources.Designer.cs</fileName>
    <function/>
    <startLine>62</startLine>
    <endLine>62</endLine>
    <rule>CA1811</rule>
    <ruleTitle><![CDATA[Avoid uncalled private code]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['Resources.Culture.get()'에 업스트림 공용 호출자 또는 보호된 호출자가 없습니다.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1904622177535307441</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\Resources.Designer.cs</fileName>
    <function/>
    <startLine>66</startLine>
    <endLine>66</endLine>
    <rule>CA1811</rule>
    <ruleTitle><![CDATA[Avoid uncalled private code]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['Resources.Culture.set(CultureInfo)'에 업스트림 공용 호출자 또는 보호된 호출자가 없습니다.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8169248430895962780</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\Resources.Designer.cs</fileName>
    <function/>
    <startLine>44</startLine>
    <endLine>44</endLine>
    <rule>CA1811</rule>
    <ruleTitle><![CDATA[Avoid uncalled private code]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['Resources.ResourceManager.get()'에 업스트림 공용 호출자 또는 보호된 호출자가 없습니다.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>881992189547941307</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>85</startLine>
    <endLine>85</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-9118186855133029017</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>221</startLine>
    <endLine>221</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3489495057220278547</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>223</startLine>
    <endLine>223</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8592739143994886859</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>85</startLine>
    <endLine>85</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2375862254336438025</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>85</startLine>
    <endLine>85</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4541169873409639751</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>221</startLine>
    <endLine>221</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3681121439608256533</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>223</startLine>
    <endLine>223</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8784437928271888129</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>6</startLine>
    <endLine>6</endLine>
    <rule>SA1024</rule>
    <ruleTitle><![CDATA[Colons Should Be Spaced Correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Colon should be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7687533494223632438</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>41</startLine>
    <endLine>41</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7906520865554918200</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>77</startLine>
    <endLine>77</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7989670691853303338</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>98</startLine>
    <endLine>98</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8511219157132423782</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>122</startLine>
    <endLine>122</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6425248161136815902</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>135</startLine>
    <endLine>135</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>115187134044565962</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>136</startLine>
    <endLine>136</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1206448829389938026</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>137</startLine>
    <endLine>137</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1372339474648223778</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>151</startLine>
    <endLine>151</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1341633608184115910</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>153</startLine>
    <endLine>153</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7381254162938133234</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>159</startLine>
    <endLine>159</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3581213761659242178</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>160</startLine>
    <endLine>160</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1803345311058478790</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>161</startLine>
    <endLine>161</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4746789300937930342</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>167</startLine>
    <endLine>167</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1187349471927773982</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>168</startLine>
    <endLine>168</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-953499896559944746</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>169</startLine>
    <endLine>169</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8730057557363068668</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>40</startLine>
    <endLine>40</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4235585035439594976</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>42</startLine>
    <endLine>42</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3929370106264748574</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>43</startLine>
    <endLine>43</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4881444663067462612</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>44</startLine>
    <endLine>44</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8649941725841331098</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>45</startLine>
    <endLine>45</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4353585874069779936</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>46</startLine>
    <endLine>46</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8874867791240090138</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>47</startLine>
    <endLine>47</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6834085374230375572</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>48</startLine>
    <endLine>48</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6671555096681693186</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>49</startLine>
    <endLine>49</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1391855360490482082</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>50</startLine>
    <endLine>50</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6465774825441934164</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>64</startLine>
    <endLine>64</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8596285373688496238</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>89</startLine>
    <endLine>89</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4338817449118512530</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>120</startLine>
    <endLine>120</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5303169581251383130</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>121</startLine>
    <endLine>121</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8975025721490125398</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>123</startLine>
    <endLine>123</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1179702978014949562</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>125</startLine>
    <endLine>125</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4822858070990855914</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>126</startLine>
    <endLine>126</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1425113554216832622</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>128</startLine>
    <endLine>128</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8438515125478869266</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>137</startLine>
    <endLine>137</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1797979166325365606</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>145</startLine>
    <endLine>145</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4510242507388394142</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>161</startLine>
    <endLine>161</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-9165197036322934066</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>169</startLine>
    <endLine>169</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5138650009015833118</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>181</startLine>
    <endLine>181</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1951948307350027998</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>183</startLine>
    <endLine>183</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1645850937215650262</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>187</startLine>
    <endLine>187</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8613448611370752994</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>188</startLine>
    <endLine>188</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4852476879253711634</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>189</startLine>
    <endLine>189</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7137000173667835922</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>193</startLine>
    <endLine>193</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7725332493856083266</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>196</startLine>
    <endLine>196</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8888807808981991570</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>199</startLine>
    <endLine>199</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5786217968551116802</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>202</startLine>
    <endLine>202</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2397271941316159810</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>206</startLine>
    <endLine>206</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8060740651592182286</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>208</startLine>
    <endLine>208</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1572218315968989358</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>212</startLine>
    <endLine>212</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3706975846629606414</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>220</startLine>
    <endLine>220</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1021439144736426970</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>221</startLine>
    <endLine>221</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4869862663981995306</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>222</startLine>
    <endLine>222</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3944171481965892914</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>223</startLine>
    <endLine>223</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-521386851515448270</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>224</startLine>
    <endLine>224</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5736070240286376466</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>233</startLine>
    <endLine>233</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5896830424826710806</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>235</startLine>
    <endLine>235</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8084574748331213006</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>241</startLine>
    <endLine>241</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6814317307703455054</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>243</startLine>
    <endLine>243</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1228241055500829166</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>249</startLine>
    <endLine>249</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5287304819669030678</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>254</startLine>
    <endLine>254</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1500309032399036814</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>256</startLine>
    <endLine>256</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2805816669334207042</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>258</startLine>
    <endLine>258</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3170894848276500278</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>263</startLine>
    <endLine>263</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2802624201463141858</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>264</startLine>
    <endLine>264</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1132080038902920758</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>266</startLine>
    <endLine>266</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8871960695361162743</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>19</startLine>
    <endLine>19</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-47075654773234131</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>36</startLine>
    <endLine>36</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1801868797496315343</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>55</startLine>
    <endLine>55</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4961102115730628357</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>94</startLine>
    <endLine>94</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2333052944850346083</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>175</startLine>
    <endLine>175</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2285670055927734817</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>229</startLine>
    <endLine>229</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-118774104326013435</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>272</startLine>
    <endLine>272</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-9131838718014986466</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>267373167678964822</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4232693969180900889</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>24</startLine>
    <endLine>24</endLine>
    <rule>SA1201</rule>
    <ruleTitle><![CDATA[Elements should appear in the correct order]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[A field should not follow a enum]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-775331671214889012</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>96</startLine>
    <endLine>96</endLine>
    <rule>SA1201</rule>
    <ruleTitle><![CDATA[Elements should appear in the correct order]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[A property should not follow a method]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1426023377417780108</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>274</startLine>
    <endLine>274</endLine>
    <rule>SA1201</rule>
    <ruleTitle><![CDATA[Elements should appear in the correct order]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[A property should not follow a method]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6007787605040970728</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>231</startLine>
    <endLine>231</endLine>
    <rule>SA1202</rule>
    <ruleTitle><![CDATA[Elements should be ordered by access]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA['public' members should come before 'private' members]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5062664132427731822</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>8</startLine>
    <endLine>8</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_default_board_width' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7762135572544197123</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>9</startLine>
    <endLine>9</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_default_board_height' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3398297921990212891</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>24</startLine>
    <endLine>24</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_gameBoard' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7256864004033342157</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>25</startLine>
    <endLine>25</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_status' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2555596532910631119</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>26</startLine>
    <endLine>26</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_currPiece' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2399594625004917022</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>27</startLine>
    <endLine>27</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_nextPiece' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4318115436592272539</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>28</startLine>
    <endLine>28</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_rnd' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1049978141798055215</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>29</startLine>
    <endLine>29</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_posX' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7911398157010311214</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>30</startLine>
    <endLine>30</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_posY' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>55338340079416922</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>31</startLine>
    <endLine>31</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_lines' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>9103645696892345651</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>32</startLine>
    <endLine>32</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_score' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3031145889353517682</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>16</startLine>
    <endLine>16</endLine>
    <rule>SA1413</rule>
    <ruleTitle><![CDATA[Use trailing comma in multi-line initializers]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Use trailing comma in multi-line initializers]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5849935215164777099</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>62</startLine>
    <endLine>63</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7574401966764589679</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>88</startLine>
    <endLine>89</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-390862228989874186</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>119</startLine>
    <endLine>120</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6185497987726390499</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>127</startLine>
    <endLine>128</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>9138464089468940369</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>257</startLine>
    <endLine>258</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4590383180680990811</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>6</startLine>
    <endLine>6</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7465154832166790617</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>11</startLine>
    <endLine>11</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1883164466546485149</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>38</startLine>
    <endLine>38</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8643892841663807047</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>57</startLine>
    <endLine>57</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5400506144374360855</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>67</startLine>
    <endLine>67</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5488099277734762983</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>83</startLine>
    <endLine>83</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6015573087114534565</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>96</startLine>
    <endLine>96</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7092920441058141485</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>104</startLine>
    <endLine>104</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6464962320937051825</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>112</startLine>
    <endLine>112</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4020108138612455247</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>133</startLine>
    <endLine>133</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7382925995805387257</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>141</startLine>
    <endLine>141</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4178913218602950023</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>149</startLine>
    <endLine>149</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4180521071946437495</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>157</startLine>
    <endLine>157</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5172567686384782697</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>165</startLine>
    <endLine>165</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7792431085632342739</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>231</startLine>
    <endLine>231</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8327363169662766115</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>239</startLine>
    <endLine>239</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2441501931157291243</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>247</startLine>
    <endLine>247</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1170427370589611367</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>252</startLine>
    <endLine>252</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3715477652697866475</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>261</startLine>
    <endLine>261</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5010950525372084399</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>274</startLine>
    <endLine>274</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7354809660959583251</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>279</startLine>
    <endLine>279</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1732607161674834919</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>13</startLine>
    <endLine>13</endLine>
    <rule>SA1602</rule>
    <ruleTitle><![CDATA[Enumeration items should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Enumeration items should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6095275375810238359</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>14</startLine>
    <endLine>14</endLine>
    <rule>SA1602</rule>
    <ruleTitle><![CDATA[Enumeration items should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Enumeration items should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3831618690910512153</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>15</startLine>
    <endLine>15</endLine>
    <rule>SA1602</rule>
    <ruleTitle><![CDATA[Enumeration items should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Enumeration items should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-959516105781897395</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>16</startLine>
    <endLine>16</endLine>
    <rule>SA1602</rule>
    <ruleTitle><![CDATA[Enumeration items should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Enumeration items should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3324847366163385276</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>22</startLine>
    <endLine>22</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5311702983981384677</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4341198989646583295</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>187</startLine>
    <endLine>187</endLine>
    <rule>CA1023</rule>
    <ruleTitle><![CDATA[Indexers should not be multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA[인덱서 'Board.this[int, int]'을(를) 다시 디자인하여 단일 문자열이나 정수 값을 인덱스로 사용하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6438504496162160146</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>190</startLine>
    <endLine>190</endLine>
    <rule>CA2201</rule>
    <ruleTitle><![CDATA[Do not raise reserved exception types]]></ruleTitle>
    <level>Major</level>
    <content><![CDATA['Board.this.get(int, int)'이(가) 런타임에서 예약되고 관리 코드에서 발생하면 안 되는 'IndexOutOfRangeException' 형식의 예외를 만듭니다. 이러한 예외 인스턴스가 throw되면 다른 예외 형식을 사용하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3066323506711079299</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>112</startLine>
    <endLine>112</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['Board.ToArray()'에서 'int[,]'의 다차원 배열을 반환합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5528565148775417035</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>103</startLine>
    <endLine>103</endLine>
    <rule>SA1003</rule>
    <ruleTitle><![CDATA[Symbols should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Operator '!' should not be preceded by whitespace.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1234261895859837457</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>46</startLine>
    <endLine>46</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7905433210913197163</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>47</startLine>
    <endLine>47</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2947352906606921877</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>83</startLine>
    <endLine>83</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5709426886312420313</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>84</startLine>
    <endLine>84</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4942713135305512959</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>165</startLine>
    <endLine>165</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>37055664126540887</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>173</startLine>
    <endLine>173</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8363223831312319053</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>17</startLine>
    <endLine>17</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-9042705640460447287</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>40</startLine>
    <endLine>40</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1924865072458488375</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>48</startLine>
    <endLine>48</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7047465014754810945</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>64</startLine>
    <endLine>64</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6012270598600067967</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>77</startLine>
    <endLine>77</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>876294910546527463</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>85</startLine>
    <endLine>85</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2394867967345742789</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>103</startLine>
    <endLine>103</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3867037957783240769</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>156</startLine>
    <endLine>156</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-993737815667382837</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>188</startLine>
    <endLine>188</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2791439621701388923</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>17</startLine>
    <endLine>17</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2169138662578217453</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>17</startLine>
    <endLine>17</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-778672494949014165</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>40</startLine>
    <endLine>40</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>347055765106624189</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>40</startLine>
    <endLine>40</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5158774621751916557</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>48</startLine>
    <endLine>48</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-236913682053245541</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>48</startLine>
    <endLine>48</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5857221901275642575</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>64</startLine>
    <endLine>64</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5740535208528740003</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>77</startLine>
    <endLine>77</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5483852057901114133</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>77</startLine>
    <endLine>77</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2426812680493841359</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>85</startLine>
    <endLine>85</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2196120390475324821</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>85</startLine>
    <endLine>85</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-747155290824531851</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>103</startLine>
    <endLine>103</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6520303959612715575</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>103</startLine>
    <endLine>103</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5899276789344081297</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>156</startLine>
    <endLine>156</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8508126250094883513</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>188</startLine>
    <endLine>188</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2762339786379612773</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>188</startLine>
    <endLine>188</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1615452013519662957</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>5</startLine>
    <endLine>5</endLine>
    <rule>SA1024</rule>
    <ruleTitle><![CDATA[Colons Should Be Spaced Correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Colon should be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6016583639153254230</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>186</startLine>
    <endLine>186</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1713317513503264564</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>19</startLine>
    <endLine>19</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1745984441698563384</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>20</startLine>
    <endLine>20</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5289786883668597292</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>22</startLine>
    <endLine>22</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3488966184060546424</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>24</startLine>
    <endLine>24</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6041249141068038210</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>50</startLine>
    <endLine>50</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5328251536439719728</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>64</startLine>
    <endLine>64</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7155281534012057138</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>113</startLine>
    <endLine>113</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-846685941425361634</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>138</startLine>
    <endLine>138</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-81731281827610286</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>146</startLine>
    <endLine>146</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-752350308031229258</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>170</startLine>
    <endLine>170</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>9017143856338986694</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>176</startLine>
    <endLine>176</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2855503663048569018</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>192</startLine>
    <endLine>192</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3090701649587787862</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>203</startLine>
    <endLine>203</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3411358187043781769</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>64</startLine>
    <endLine>64</endLine>
    <rule>SA1119</rule>
    <ruleTitle><![CDATA[Statement should not use unnecessary parenthesis]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Statement should not use unnecessary parenthesis]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5124906185166392231</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>7</startLine>
    <endLine>7</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4807665299337560823</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>13</startLine>
    <endLine>13</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1252596835721905345</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>36</startLine>
    <endLine>36</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>443226013809482909</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>132</startLine>
    <endLine>132</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8480231986030585185</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>152</startLine>
    <endLine>152</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4100143628589326089</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>182</startLine>
    <endLine>182</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8722614963171986081</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>198</startLine>
    <endLine>198</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1386564905363231362</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2833916468965678540</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>134</startLine>
    <endLine>134</endLine>
    <rule>SA1201</rule>
    <ruleTitle><![CDATA[Elements should appear in the correct order]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[A property should not follow a method]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3654083555439165358</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>184</startLine>
    <endLine>184</endLine>
    <rule>SA1201</rule>
    <ruleTitle><![CDATA[Elements should appear in the correct order]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[A indexer should not follow a method]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>618590847012160214</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>9</startLine>
    <endLine>9</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_mBoard' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7848916204262383861</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>65</startLine>
    <endLine>66</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1812392873158588651</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>71</startLine>
    <endLine>72</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>563659926486866227</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>93</startLine>
    <endLine>94</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1538812979225617077</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>95</startLine>
    <endLine>96</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-567488398287281871</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>107</startLine>
    <endLine>108</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3111598085904336345</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>123</startLine>
    <endLine>124</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6544313722041083538</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>159</startLine>
    <endLine>160</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6361899482194157887</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>172</startLine>
    <endLine>173</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4067559850302720993</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>191</startLine>
    <endLine>192</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-383838140578321610</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>173</startLine>
    <endLine>173</endLine>
    <rule>SA1515</rule>
    <ruleTitle><![CDATA[Single-line comment should be preceded by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single-line comment should be preceded by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1153792358247975751</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>5</startLine>
    <endLine>5</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2223124644944811939</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>15</startLine>
    <endLine>15</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1383695342485410903</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>38</startLine>
    <endLine>38</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1795871787931834285</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>57</startLine>
    <endLine>57</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>396968770254891375</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>75</startLine>
    <endLine>75</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4321812029346686915</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>99</startLine>
    <endLine>99</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8378815964990296915</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>111</startLine>
    <endLine>111</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6545126621031482613</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>116</startLine>
    <endLine>116</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1106854246213185327</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>134</startLine>
    <endLine>134</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6156234788594245637</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>142</startLine>
    <endLine>142</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3035589388082199799</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>184</startLine>
    <endLine>184</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5036829509129288505</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>200</startLine>
    <endLine>200</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6055949538731330665</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1438340768345893713</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1279681093106322856</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function/>
    <startLine>8</startLine>
    <endLine>8</endLine>
    <rule>SA1516</rule>
    <ruleTitle><![CDATA[Elements should be separated by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be separated by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7960002269480271852</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function/>
    <startLine>9</startLine>
    <endLine>9</endLine>
    <rule>SA1516</rule>
    <ruleTitle><![CDATA[Elements should be separated by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be separated by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7148768121161945136</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function/>
    <startLine>10</startLine>
    <endLine>10</endLine>
    <rule>SA1516</rule>
    <ruleTitle><![CDATA[Elements should be separated by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be separated by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>9107825108365227358</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function/>
    <startLine>11</startLine>
    <endLine>11</endLine>
    <rule>SA1516</rule>
    <ruleTitle><![CDATA[Elements should be separated by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be separated by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1753632654208168534</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function/>
    <startLine>5</startLine>
    <endLine>5</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5977701462557937346</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function/>
    <startLine>7</startLine>
    <endLine>7</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>111127566356959990</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function/>
    <startLine>8</startLine>
    <endLine>8</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4144869419759984850</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function/>
    <startLine>9</startLine>
    <endLine>9</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3534311494374728242</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function/>
    <startLine>10</startLine>
    <endLine>10</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6681535110164182328</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function/>
    <startLine>11</startLine>
    <endLine>11</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-609669180410028972</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7851811764065658172</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>5</startLine>
    <endLine>5</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8280087094645686754</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>17</startLine>
    <endLine>17</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4364124254153632480</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>18</startLine>
    <endLine>18</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8729568873898079990</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>28</startLine>
    <endLine>28</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1686620514480350736</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>32</startLine>
    <endLine>32</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5417323174557072541</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3333338112149423269</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>5</startLine>
    <endLine>5</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-533237779041977105</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>17</startLine>
    <endLine>17</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4448943754750745937</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>18</startLine>
    <endLine>18</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4756343260559599341</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>28</startLine>
    <endLine>28</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-692592409969624735</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>32</startLine>
    <endLine>32</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6497060487622838132</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7363119010278188365</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>5</startLine>
    <endLine>5</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6005514896009570135</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>17</startLine>
    <endLine>17</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7863241808337010695</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>18</startLine>
    <endLine>18</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6203915249858169819</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>28</startLine>
    <endLine>28</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3452741120284750199</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>32</startLine>
    <endLine>32</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8253263578898265732</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1538132770865527755</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>5</startLine>
    <endLine>5</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3093623738764417409</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>17</startLine>
    <endLine>17</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2676385978252941087</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>18</startLine>
    <endLine>18</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6215791300614845155</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>28</startLine>
    <endLine>28</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1012512485199124657</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>32</startLine>
    <endLine>32</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4621509138727542428</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Properties\AssemblyInfo.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1357130527286472178</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function/>
    <startLine>22</startLine>
    <endLine>22</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceFactoryTest.TestGetPieceById()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8383302066708215572</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4794765044794590316</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7131177637968903248</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function/>
    <startLine>3</startLine>
    <endLine>3</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7796163569040953343</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1210</rule>
    <ruleTitle><![CDATA[Using directives should be ordered alphabetically by namespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directives should be ordered alphabetically by the namespaces.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5758317941276918013</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function/>
    <startLine>8</startLine>
    <endLine>8</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5528782441835223311</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function/>
    <startLine>11</startLine>
    <endLine>11</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6954630661271629763</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function/>
    <startLine>18</startLine>
    <endLine>18</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4580481602080236709</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function/>
    <startLine>27</startLine>
    <endLine>27</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1657175764087308923</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function/>
    <startLine>36</startLine>
    <endLine>36</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4817437851937436205</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function/>
    <startLine>45</startLine>
    <endLine>45</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3603878616520351501</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8354140397283837703</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>68</startLine>
    <endLine>68</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3971356567249924601</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>68</startLine>
    <endLine>68</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2851941158962284915</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>9</startLine>
    <endLine>9</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>248270254850360410</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3048239614894063246</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6400154369981594237</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>197</startLine>
    <endLine>198</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-277402852181145443</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>7</startLine>
    <endLine>7</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4880893117485399035</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>11</startLine>
    <endLine>11</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6918019151024761451</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>25</startLine>
    <endLine>25</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2553391808060164585</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>35</startLine>
    <endLine>35</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5784401638727333619</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>45</startLine>
    <endLine>45</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6556970337543199641</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>52</startLine>
    <endLine>52</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1736240561796580811</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>65</startLine>
    <endLine>65</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4344882652101055307</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>72</startLine>
    <endLine>72</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1813662449248085169</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>80</startLine>
    <endLine>80</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5958867728051246645</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>87</startLine>
    <endLine>87</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8621875348744763749</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>95</startLine>
    <endLine>95</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4354075562109935951</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>103</startLine>
    <endLine>103</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2179888278334988363</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>111</startLine>
    <endLine>111</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2417905536335614379</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>120</startLine>
    <endLine>120</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4618961502236416643</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>129</startLine>
    <endLine>129</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>870179232261848557</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>139</startLine>
    <endLine>139</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4591685131640800459</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>150</startLine>
    <endLine>150</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5157776495469064987</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>161</startLine>
    <endLine>161</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1713802994072380293</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>171</startLine>
    <endLine>171</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1252730632501107035</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>181</startLine>
    <endLine>181</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3192177376069958893</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>190</startLine>
    <endLine>190</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-902134006221535777</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7386134113991566495</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function/>
    <startLine>17</startLine>
    <endLine>17</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1339790181982554063</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5691737609615480185</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5360926160417898091</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function/>
    <startLine>3</startLine>
    <endLine>3</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>249826882390599941</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function/>
    <startLine>4</startLine>
    <endLine>4</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8653037776011764881</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function/>
    <startLine>5</startLine>
    <endLine>5</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7612908707616513031</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function/>
    <startLine>6</startLine>
    <endLine>6</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8040050744924740349</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function/>
    <startLine>7</startLine>
    <endLine>7</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3328035318234234451</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function/>
    <startLine>8</startLine>
    <endLine>8</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1276755498130867201</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function/>
    <startLine>9</startLine>
    <endLine>9</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3351545653258742958</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function/>
    <startLine>15</startLine>
    <endLine>15</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5539364305998902136</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function/>
    <startLine>13</startLine>
    <endLine>13</endLine>
    <rule>SA1601</rule>
    <ruleTitle><![CDATA[Partial elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Partial elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8670595033438905050</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8070068974302154163</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>21</startLine>
    <endLine>21</endLine>
    <rule>CA2208</rule>
    <ruleTitle><![CDATA[Instantiate argument exceptions correctly]]></ruleTitle>
    <level>Critical</level>
    <content><![CDATA[메시지 및/또는 paramName 매개 변수가 있는 'ArgumentNullException' 생성자를 호출하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3878105904446843189</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>111</startLine>
    <endLine>111</endLine>
    <rule>CA1023</rule>
    <ruleTitle><![CDATA[Indexers should not be multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA[인덱서 'Piece.this[int, int]'을(를) 다시 디자인하여 단일 문자열이나 정수 값을 인덱스로 사용하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5920817706451234960</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>114</startLine>
    <endLine>114</endLine>
    <rule>CA2201</rule>
    <ruleTitle><![CDATA[Do not raise reserved exception types]]></ruleTitle>
    <level>Major</level>
    <content><![CDATA['Piece.this.get(int, int)'이(가) 런타임에서 예약되고 관리 코드에서 발생하면 안 되는 'IndexOutOfRangeException' 형식의 예외를 만듭니다. 이러한 예외 인스턴스가 throw되면 다른 예외 형식을 사용하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2461154752490985861</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>74</startLine>
    <endLine>74</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['Piece.RotateRight()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1402095117044723491</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>100</startLine>
    <endLine>100</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['Piece.ToArray()'에서 'int[,]'의 다차원 배열을 반환합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7666482652984487393</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>82</startLine>
    <endLine>82</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7588614952912393015</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>112</startLine>
    <endLine>112</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1565608021032398311</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>82</startLine>
    <endLine>82</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5971129242936478889</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>112</startLine>
    <endLine>112</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6507183316376930001</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>112</startLine>
    <endLine>112</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5228028343032908383</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>5</startLine>
    <endLine>5</endLine>
    <rule>SA1024</rule>
    <ruleTitle><![CDATA[Colons Should Be Spaced Correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Colon should be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3358098018013360096</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>50</startLine>
    <endLine>50</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4441048750798606266</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>51</startLine>
    <endLine>51</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3263354578724663356</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>52</startLine>
    <endLine>52</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7640800145956504416</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>58</startLine>
    <endLine>58</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>9184667101406407030</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>59</startLine>
    <endLine>59</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2822483841274056390</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>60</startLine>
    <endLine>60</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3924404007142303472</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>110</startLine>
    <endLine>110</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1521824993856830968</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>23</startLine>
    <endLine>23</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6820070852048997626</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>24</startLine>
    <endLine>24</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2983604079815194504</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>25</startLine>
    <endLine>25</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4491618827616630408</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>36</startLine>
    <endLine>36</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4841920535883976766</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>44</startLine>
    <endLine>44</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3278395501155618260</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>52</startLine>
    <endLine>52</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1472141757586224906</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>60</startLine>
    <endLine>60</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4286276345340173026</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>75</startLine>
    <endLine>75</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8161969585793710366</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>77</startLine>
    <endLine>77</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5828210382281571846</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>79</startLine>
    <endLine>79</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1865612826757162050</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>93</startLine>
    <endLine>93</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8135050197514481480</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>101</startLine>
    <endLine>101</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>112925039319481552</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>116</startLine>
    <endLine>116</endLine>
    <rule>SA1101</rule>
    <ruleTitle><![CDATA[Prefix local calls with this]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Prefix local calls with this]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5586754914029717319</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>7</startLine>
    <endLine>7</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4344143142764469425</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>15</startLine>
    <endLine>15</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6004213841814150473</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>30</startLine>
    <endLine>30</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8661980822593385929</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>66</startLine>
    <endLine>66</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-784223748185870233</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>106</startLine>
    <endLine>106</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7717144925048559979</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>122</startLine>
    <endLine>122</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1061909471034133876</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2271127777539869164</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>108</startLine>
    <endLine>108</endLine>
    <rule>SA1201</rule>
    <ruleTitle><![CDATA[Elements should appear in the correct order]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[A indexer should not follow a method]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5959129641126684595</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>9</startLine>
    <endLine>9</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_piece' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1845504176116808887</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>10</startLine>
    <endLine>10</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_initPosX' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8100697522139374432</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>11</startLine>
    <endLine>11</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_initPosY' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>9216668730464572075</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>22</startLine>
    <endLine>23</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>954667502647925135</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>81</startLine>
    <endLine>82</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8559329182211557233</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>115</startLine>
    <endLine>116</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3626138842638037743</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>5</startLine>
    <endLine>5</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1529457948205557927</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>17</startLine>
    <endLine>17</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8259797102079380171</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>32</startLine>
    <endLine>32</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7112492813763041213</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>40</startLine>
    <endLine>40</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6975378275601941485</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>48</startLine>
    <endLine>48</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4687931420606367825</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>56</startLine>
    <endLine>56</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2952409593723265381</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>85</startLine>
    <endLine>85</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5782407345160968679</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>99</startLine>
    <endLine>99</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6665925496621664135</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>108</startLine>
    <endLine>108</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-944054877532100237</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>124</startLine>
    <endLine>124</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7959365255110578340</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>69</startLine>
    <endLine>69</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7894608913105178870</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>71</startLine>
    <endLine>71</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7531093536786091275</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8350034409280048096</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\Settings.Designer.cs</fileName>
    <function/>
    <startLine>25</startLine>
    <endLine>25</endLine>
    <rule>CA1811</rule>
    <ruleTitle><![CDATA[Avoid uncalled private code]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['Settings.Default.get()'에 업스트림 공용 호출자 또는 보호된 호출자가 없습니다.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1311716109353534198</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Program.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8245620571645161054</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Program.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4217121255109838914</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Program.cs</fileName>
    <function/>
    <startLine>3</startLine>
    <endLine>3</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4866193253481771102</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Program.cs</fileName>
    <function/>
    <startLine>4</startLine>
    <endLine>4</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3818253168846770762</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Program.cs</fileName>
    <function/>
    <startLine>5</startLine>
    <endLine>5</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5369635531856711489</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Program.cs</fileName>
    <function/>
    <startLine>9</startLine>
    <endLine>9</endLine>
    <rule>SA1400</rule>
    <ruleTitle><![CDATA[Access modifier should be declared]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Element 'Program' should declare an access modifier]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-281684915397038800</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Program.cs</fileName>
    <function/>
    <startLine>15</startLine>
    <endLine>15</endLine>
    <rule>SA1400</rule>
    <ruleTitle><![CDATA[Access modifier should be declared]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Element 'Main' should declare an access modifier]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1080163236704408207</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Program.cs</fileName>
    <function/>
    <startLine>9</startLine>
    <endLine>9</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7634159283645971279</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Program.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5370964492667820590</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>17</startLine>
    <endLine>17</endLine>
    <rule>CA1801</rule>
    <ruleTitle><![CDATA[Review unused parameters]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['TetrisConsoleUI.Main(string[])'의 'args' 매개 변수가 사용되지 않습니다. 매개 변수를 제거하거나 메서드 본문에서 사용하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7583477964571528808</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>18</startLine>
    <endLine>18</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-540302108526070516</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>41</startLine>
    <endLine>41</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3880324539507222220</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>113</startLine>
    <endLine>113</endLine>
    <rule>SA1008</rule>
    <ruleTitle><![CDATA[Opening parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Opening parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4964955768089984354</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>41</startLine>
    <endLine>41</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1611735240109515592</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>41</startLine>
    <endLine>41</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6482124376642740152</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>113</startLine>
    <endLine>113</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be followed by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8728472729379501902</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>113</startLine>
    <endLine>113</endLine>
    <rule>SA1009</rule>
    <ruleTitle><![CDATA[Closing parenthesis should be spaced correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing parenthesis should not be preceded by a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4138902281466083360</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>11</startLine>
    <endLine>11</endLine>
    <rule>SA1025</rule>
    <ruleTitle><![CDATA[Code should not contain multiple whitespace in a row]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain multiple whitespace characters in a row.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6939499873094820790</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>12</startLine>
    <endLine>12</endLine>
    <rule>SA1025</rule>
    <ruleTitle><![CDATA[Code should not contain multiple whitespace in a row]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain multiple whitespace characters in a row.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3733739334524362285</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8961243114489465749</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6769102507386258049</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>3</startLine>
    <endLine>3</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2397815442663132001</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>4</startLine>
    <endLine>4</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7600788843956843370</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>4</startLine>
    <endLine>4</endLine>
    <rule>SA1208</rule>
    <ruleTitle><![CDATA[System using directives should be placed before other using directives]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive for 'System.Timers' should appear before directive for 'Tetris.GameEngine']]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4246624531547560685</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>14</startLine>
    <endLine>14</endLine>
    <rule>SA1214</rule>
    <ruleTitle><![CDATA[Readonly fields should appear before non-readonly fields]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Readonly fields should appear before non-readonly fields]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6088479440000362038</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>10</startLine>
    <endLine>10</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_game' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5178386948015985889</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>11</startLine>
    <endLine>11</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_drawer' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8323730790090749453</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>12</startLine>
    <endLine>12</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_gameTimer' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8701401775937109485</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>13</startLine>
    <endLine>13</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_timerCounter' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1859389811611390833</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>14</startLine>
    <endLine>14</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_timerStep' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>330011089455843102</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>8</startLine>
    <endLine>8</endLine>
    <rule>SA1400</rule>
    <ruleTitle><![CDATA[Access modifier should be declared]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Element 'TetrisConsoleUI' should declare an access modifier]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8068972220349825073</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>16</startLine>
    <endLine>16</endLine>
    <rule>SA1400</rule>
    <ruleTitle><![CDATA[Access modifier should be declared]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Element 'Main' should declare an access modifier]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8008067214829872406</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>60</startLine>
    <endLine>60</endLine>
    <rule>SA1503</rule>
    <ruleTitle><![CDATA[Braces should not be omitted]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Braces should not be omitted]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1896984919458993686</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>64</startLine>
    <endLine>64</endLine>
    <rule>SA1503</rule>
    <ruleTitle><![CDATA[Braces should not be omitted]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Braces should not be omitted]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1097166062755971478</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>68</startLine>
    <endLine>68</endLine>
    <rule>SA1503</rule>
    <ruleTitle><![CDATA[Braces should not be omitted]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Braces should not be omitted]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>554218157573406470</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>79</startLine>
    <endLine>79</endLine>
    <rule>SA1503</rule>
    <ruleTitle><![CDATA[Braces should not be omitted]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Braces should not be omitted]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1911099382065674694</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>45</startLine>
    <endLine>46</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3963227563400887500</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>75</startLine>
    <endLine>76</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6968936835665880200</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>8</startLine>
    <endLine>8</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8000080582505250990</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8073386135854114202</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function/>
    <startLine>8</startLine>
    <endLine>8</endLine>
    <rule>SA1649</rule>
    <ruleTitle><![CDATA[File name should match first type name]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[File name should match first type name.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>773724162620921136</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>74</startLine>
    <endLine>74</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceFactory.Initialize()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2837400505354956472</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>78</startLine>
    <endLine>78</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceFactory.Initialize()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5524217751632463962</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>82</startLine>
    <endLine>82</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceFactory.Initialize()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2836654219943892862</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>86</startLine>
    <endLine>86</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceFactory.Initialize()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7694978125372602568</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>90</startLine>
    <endLine>90</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceFactory.Initialize()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3694156825101898968</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>94</startLine>
    <endLine>94</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceFactory.Initialize()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4875050905465081272</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>98</startLine>
    <endLine>98</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceFactory.Initialize()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1629455054726173799</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>73</startLine>
    <endLine>73</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4317177766063547547</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>76</startLine>
    <endLine>76</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4511386500813577441</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>77</startLine>
    <endLine>77</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1665683644849717913</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>80</startLine>
    <endLine>80</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3922570229691193557</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>81</startLine>
    <endLine>81</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8054630246652004623</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>84</startLine>
    <endLine>84</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4844508926883347731</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>85</startLine>
    <endLine>85</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4681145180664808923</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>89</startLine>
    <endLine>89</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>7055744053768023021</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>92</startLine>
    <endLine>92</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5363034813059594627</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>96</startLine>
    <endLine>96</endLine>
    <rule>SA1005</rule>
    <ruleTitle><![CDATA[Single line comments should begin with single space]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Single line comment should begin with a space.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5067114626358466350</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>60</startLine>
    <endLine>60</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3247949596817640424</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>61</startLine>
    <endLine>61</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6563699501566607266</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>62</startLine>
    <endLine>62</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>643138193621425967</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>8</startLine>
    <endLine>8</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8853775195547031333</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>17</startLine>
    <endLine>17</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8161267632428089733</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>29</startLine>
    <endLine>29</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3597887595027586611</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>57</startLine>
    <endLine>57</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4988549128609026711</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>68</startLine>
    <endLine>68</endLine>
    <rule>SA1124</rule>
    <ruleTitle><![CDATA[Do not use regions]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Do not use regions]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3390831441661261260</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1098787354421852148</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5138568881127363334</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>58</startLine>
    <endLine>58</endLine>
    <rule>SA1201</rule>
    <ruleTitle><![CDATA[Elements should appear in the correct order]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[A property should not follow a method]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4176493658352427824</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>13</startLine>
    <endLine>13</endLine>
    <rule>SA1309</rule>
    <ruleTitle><![CDATA[Field names should not begin with underscore]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Field '_pieces' should not begin with an underscore]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6666462432022752303</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>78</startLine>
    <endLine>78</endLine>
    <rule>SA1500</rule>
    <ruleTitle><![CDATA[Braces for multi-line statements should not share line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Braces for multi-line statements should not share line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4526651500102151715</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>82</startLine>
    <endLine>82</endLine>
    <rule>SA1500</rule>
    <ruleTitle><![CDATA[Braces for multi-line statements should not share line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Braces for multi-line statements should not share line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4187643595122826891</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>86</startLine>
    <endLine>86</endLine>
    <rule>SA1500</rule>
    <ruleTitle><![CDATA[Braces for multi-line statements should not share line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Braces for multi-line statements should not share line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6465517460963992449</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>90</startLine>
    <endLine>90</endLine>
    <rule>SA1500</rule>
    <ruleTitle><![CDATA[Braces for multi-line statements should not share line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Braces for multi-line statements should not share line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2504009656085233183</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>94</startLine>
    <endLine>94</endLine>
    <rule>SA1500</rule>
    <ruleTitle><![CDATA[Braces for multi-line statements should not share line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Braces for multi-line statements should not share line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5950720905643910721</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>98</startLine>
    <endLine>98</endLine>
    <rule>SA1500</rule>
    <ruleTitle><![CDATA[Braces for multi-line statements should not share line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Braces for multi-line statements should not share line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8330310941156683217</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>41</startLine>
    <endLine>42</endLine>
    <rule>SA1513</rule>
    <ruleTitle><![CDATA[Closing brace should be followed by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Closing brace should be followed by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6140113854745654307</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>103</startLine>
    <endLine>105</endLine>
    <rule>SA1518</rule>
    <ruleTitle><![CDATA[Use line endings correctly at end of file]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain blank lines at the end of the file]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6017774178411918673</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>6</startLine>
    <endLine>6</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1193314585906917461</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>58</startLine>
    <endLine>58</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8634759980852085179</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>69</startLine>
    <endLine>69</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7883116948642940489</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>49</startLine>
    <endLine>49</endLine>
    <rule>SA1611</rule>
    <ruleTitle><![CDATA[Element parameters should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The documentation for parameter 'r' is missing]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-732344924840818514</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>11</startLine>
    <endLine>11</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-9204116647111597858</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>20</startLine>
    <endLine>20</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6413143583155303896</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>32</startLine>
    <endLine>32</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8230219014081985944</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>34</startLine>
    <endLine>34</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1891985885866956738</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>35</startLine>
    <endLine>35</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-520157953670967942</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>46</startLine>
    <endLine>46</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1343736323165101410</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>48</startLine>
    <endLine>48</endLine>
    <rule>SA1629</rule>
    <ruleTitle><![CDATA[Documentation text should end with a period]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Documentation text should end with a period]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3621782623139521837</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2320683703570928191</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function/>
    <startLine>19</startLine>
    <endLine>21</endLine>
    <rule>SA1642</rule>
    <ruleTitle><![CDATA[Constructor summary documentation should begin with standard text]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Constructor summary documentation should begin with standard text]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4958482736765553311</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>109</startLine>
    <endLine>109</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestClone()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6433224169716166670</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>13</startLine>
    <endLine>13</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestConstructor()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2376809142241923828</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>24</startLine>
    <endLine>24</endLine>
    <rule>CA1804</rule>
    <ruleTitle><![CDATA[Remove unused locals]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestConstructor_Wrong_Parameter()'에서 'Piece' 형식의 변수 'target'을(를) 선언하는데 이 변수는 사용되지 않거나 단지 할당만 되어 있습니다. 이 변수를 사용하거나 제거하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3727017769599592093</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>92</startLine>
    <endLine>92</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestGetItem()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2536010104216973963</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>102</startLine>
    <endLine>102</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestGetItem_Wrong()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-286753040216632883</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>103</startLine>
    <endLine>103</endLine>
    <rule>CA1804</rule>
    <ruleTitle><![CDATA[Remove unused locals]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestGetItem_Wrong()'에서 'int' 형식의 변수 'actual'을(를) 선언하는데 이 변수는 사용되지 않거나 단지 할당만 되어 있습니다. 이 변수를 사용하거나 제거하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>320825956559318163</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>65</startLine>
    <endLine>65</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestHeight()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3777040056055744388</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>56</startLine>
    <endLine>56</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestInitPosX()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3341996465180784705</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>74</startLine>
    <endLine>74</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestInitPosY()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1277767317493639679</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>39</startLine>
    <endLine>39</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestMakeItShadow()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>546492949229951447</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>41</startLine>
    <endLine>41</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestMakeItShadow()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3097290810690661623</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>30</startLine>
    <endLine>30</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestRotateRight()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7657108634115863393</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>32</startLine>
    <endLine>32</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestRotateRight()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8443927685622211386</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>48</startLine>
    <endLine>48</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestToAray()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>299673369721633836</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>49</startLine>
    <endLine>49</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestToAray()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5603461180259328944</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>83</startLine>
    <endLine>83</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['PieceTest.TestWidth()'에서 'int[,]'의 다차원 배열을 사용합니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-1188903523002763660</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>56</startLine>
    <endLine>56</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>470632729354570304</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>65</startLine>
    <endLine>65</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6900438083671908024</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>83</startLine>
    <endLine>83</endLine>
    <rule>SA1028</rule>
    <ruleTitle><![CDATA[Code should not contain trailing whitespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain trailing whitespace]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5643558755452557259</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>48</startLine>
    <endLine>48</endLine>
    <rule>SA1106</rule>
    <ruleTitle><![CDATA[Code should not contain empty statements]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain empty statements]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6268222231801833692</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>48</startLine>
    <endLine>48</endLine>
    <rule>SA1107</rule>
    <ruleTitle><![CDATA[Code should not contain multiple statements on one line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Code should not contain multiple statements on one line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>9154308547339236188</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8157435793715312788</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-294529466780720648</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>3</startLine>
    <endLine>3</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7267262303973806361</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1210</rule>
    <ruleTitle><![CDATA[Using directives should be ordered alphabetically by namespace]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directives should be ordered alphabetically by the namespaces.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5956740251114558649</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>32</startLine>
    <endLine>32</endLine>
    <rule>SA1500</rule>
    <ruleTitle><![CDATA[Braces for multi-line statements should not share line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Braces for multi-line statements should not share line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8075157533246409115</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>8</startLine>
    <endLine>8</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6808669262521865207</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>11</startLine>
    <endLine>11</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3039622701060203059</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>21</startLine>
    <endLine>21</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7485958718093260499</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>28</startLine>
    <endLine>28</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6319258818090304251</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>37</startLine>
    <endLine>37</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5639003149498060007</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>46</startLine>
    <endLine>46</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3668261971836163339</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>54</startLine>
    <endLine>54</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-7990551718948638837</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>63</startLine>
    <endLine>63</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3398920290137184349</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>72</startLine>
    <endLine>72</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8805108722282325315</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>81</startLine>
    <endLine>81</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1739007177544331403</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>90</startLine>
    <endLine>90</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1590988917898396375</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>100</startLine>
    <endLine>100</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>4272589016268487215</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>107</startLine>
    <endLine>107</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6398272178651805445</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3927201357700768968</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMode.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2291793844395240448</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMode.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2506651340536731668</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMode.cs</fileName>
    <function/>
    <startLine>3</startLine>
    <endLine>3</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-841052158632533556</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMode.cs</fileName>
    <function/>
    <startLine>4</startLine>
    <endLine>4</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-2929188145226288848</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMode.cs</fileName>
    <function/>
    <startLine>5</startLine>
    <endLine>5</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6171571499745448605</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMode.cs</fileName>
    <function/>
    <startLine>12</startLine>
    <endLine>12</endLine>
    <rule>SA1516</rule>
    <ruleTitle><![CDATA[Elements should be separated by blank line]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be separated by blank line]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4453222601651709877</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMode.cs</fileName>
    <function/>
    <startLine>9</startLine>
    <endLine>9</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8357736606624091779</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMode.cs</fileName>
    <function/>
    <startLine>11</startLine>
    <endLine>11</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>1862150128519607283</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMode.cs</fileName>
    <function/>
    <startLine>12</startLine>
    <endLine>12</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5726289869474209751</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMode.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6282474224460877944</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Interfaces\IDrawing.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6770120450768157872</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Interfaces\IDrawing.cs</fileName>
    <function/>
    <startLine>2</startLine>
    <endLine>2</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6323895115392394748</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Interfaces\IDrawing.cs</fileName>
    <function/>
    <startLine>3</startLine>
    <endLine>3</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>5905332734103133948</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Interfaces\IDrawing.cs</fileName>
    <function/>
    <startLine>4</startLine>
    <endLine>4</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>395310378308049888</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Interfaces\IDrawing.cs</fileName>
    <function/>
    <startLine>5</startLine>
    <endLine>5</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>66270166860730360</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Interfaces\IDrawing.cs</fileName>
    <function/>
    <startLine>6</startLine>
    <endLine>6</endLine>
    <rule>SA1200</rule>
    <ruleTitle><![CDATA[Using directives should be placed correctly]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Using directive should appear within a namespace declaration]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-3048695696019181922</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Interfaces\IDrawing.cs</fileName>
    <function/>
    <startLine>10</startLine>
    <endLine>10</endLine>
    <rule>SA1400</rule>
    <ruleTitle><![CDATA[Access modifier should be declared]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Element 'IDrawing' should declare an access modifier]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6537262492956407681</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Interfaces\IDrawing.cs</fileName>
    <function/>
    <startLine>10</startLine>
    <endLine>10</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>9196259618475163139</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Interfaces\IDrawing.cs</fileName>
    <function/>
    <startLine>12</startLine>
    <endLine>12</endLine>
    <rule>SA1600</rule>
    <ruleTitle><![CDATA[Elements should be documented]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[Elements should be documented]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>3424119958977996313</violationHash>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Interfaces\IDrawing.cs</fileName>
    <function/>
    <startLine>1</startLine>
    <endLine>1</endLine>
    <rule>SA1633</rule>
    <ruleTitle><![CDATA[File should have header]]></ruleTitle>
    <level>Minor</level>
    <content><![CDATA[The file header is missing or not located at the top of the file.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-6206433436067022430</violationHash>
    <fileName>-</fileName>
    <function/>
    <startLine>-1</startLine>
    <endLine>-1</endLine>
    <rule>CA2210</rule>
    <ruleTitle><![CDATA[Assemblies should have valid strong names]]></ruleTitle>
    <level>Critical</level>
    <content><![CDATA[강력한 이름의 키로 'Tetris.GameEngine.dll'을(를) 서명하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4218266940229016610</violationHash>
    <fileName>-</fileName>
    <function/>
    <startLine>-1</startLine>
    <endLine>-1</endLine>
    <rule>CA1014</rule>
    <ruleTitle><![CDATA[Mark assemblies with CLSCompliantAttribute]]></ruleTitle>
    <level>Major</level>
    <content><![CDATA['Tetris.GameEngine.dll'은(는) 외부에 표시되는 형식을 노출하므로 CLSCompliant(true)로 표시하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2151826344428933060</violationHash>
    <fileName>-</fileName>
    <function/>
    <startLine>-1</startLine>
    <endLine>-1</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['Board._mBoard'은(는) 다차원 배열입니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6263205392783516291</violationHash>
    <fileName>-</fileName>
    <function/>
    <startLine>-1</startLine>
    <endLine>-1</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['Piece._piece'은(는) 다차원 배열입니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-4375790125350015193</violationHash>
    <fileName>-</fileName>
    <function/>
    <startLine>-1</startLine>
    <endLine>-1</endLine>
    <rule>CA2210</rule>
    <ruleTitle><![CDATA[Assemblies should have valid strong names]]></ruleTitle>
    <level>Critical</level>
    <content><![CDATA[강력한 이름의 키로 'Tetris.ConsoleUI.exe'을(를) 서명하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-478047114468340627</violationHash>
    <fileName>-</fileName>
    <function/>
    <startLine>-1</startLine>
    <endLine>-1</endLine>
    <rule>CA1814</rule>
    <ruleTitle><![CDATA[Prefer jagged arrays over multidimensional]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['ConsoleDrawing.clearBlock'은(는) 다차원 배열입니다. 가능하면 이 배열을 가변 배열로 바꾸세요.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-5520083495765823720</violationHash>
    <fileName>-</fileName>
    <function/>
    <startLine>-1</startLine>
    <endLine>-1</endLine>
    <rule>CA2210</rule>
    <ruleTitle><![CDATA[Assemblies should have valid strong names]]></ruleTitle>
    <level>Critical</level>
    <content><![CDATA[강력한 이름의 키로 'Tetris.DesktopUI.exe'을(를) 서명하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>6203030923466170002</violationHash>
    <fileName>-</fileName>
    <function/>
    <startLine>-1</startLine>
    <endLine>-1</endLine>
    <rule>CA1014</rule>
    <ruleTitle><![CDATA[Mark assemblies with CLSCompliantAttribute]]></ruleTitle>
    <level>Major</level>
    <content><![CDATA['Tetris.DesktopUI.exe'은(는) 외부에 표시되는 형식을 노출하므로 CLSCompliant(true)로 표시하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>8586059936782338455</violationHash>
    <fileName>-</fileName>
    <function/>
    <startLine>-1</startLine>
    <endLine>-1</endLine>
    <rule>CA1812</rule>
    <ruleTitle><![CDATA[Avoid uninstantiated internal classes]]></ruleTitle>
    <level>Trivial</level>
    <content><![CDATA['Resources'은(는) 인스턴스화되지 않은 내부 클래스입니다. 어셈블리에서 해당 코드를 제거하십시오. 이 클래스가 정적 메서드만 포함하도록 의도된 경우에는 private 생성자를 추가하여 컴파일러에서 기본 생성자가 생성되지 않도록 하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>-8560774449403458068</violationHash>
    <fileName>-</fileName>
    <function/>
    <startLine>-1</startLine>
    <endLine>-1</endLine>
    <rule>CA2210</rule>
    <ruleTitle><![CDATA[Assemblies should have valid strong names]]></ruleTitle>
    <level>Critical</level>
    <content><![CDATA[강력한 이름의 키로 'Tetris.GameEngine.Test.dll'을(를) 서명하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <bug>
    <violationHash>2982352353127433906</violationHash>
    <fileName>-</fileName>
    <function/>
    <startLine>-1</startLine>
    <endLine>-1</endLine>
    <rule>CA1014</rule>
    <ruleTitle><![CDATA[Mark assemblies with CLSCompliantAttribute]]></ruleTitle>
    <level>Major</level>
    <content><![CDATA['Tetris.GameEngine.Test.dll'은(는) 외부에 표시되는 형식을 노출하므로 CLSCompliant(true)로 표시하십시오.]]></content>
    <suppression>false</suppression>
    <suppressionDesc/>
    <confidence/>
    <status>Open</status>
    <templateId/>
  </bug>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Board.Board(int, int)]]></function>
    <FUNST>6.0</FUNST>
    <FUCYC>5.0</FUCYC>
    <FUMNC>3.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>2.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function><![CDATA[bool Tetris.GameEngine.Board.CanPosAt(Tetris.GameEngine.Piece, int, int)]]></function>
    <FUNST>8.0</FUNST>
    <FUCYC>6.0</FUCYC>
    <FUMNC>5.0</FUMNC>
    <FUNCR>11.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>3.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function><![CDATA[int Tetris.GameEngine.Board.CheckLines()]]></function>
    <FUNST>8.0</FUNST>
    <FUCYC>4.0</FUCYC>
    <FUMNC>2.0</FUMNC>
    <FUNCR>3.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function><![CDATA[object Tetris.GameEngine.Board.Clone()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>2.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Board.FixPiece(Tetris.GameEngine.Piece, int, int)]]></function>
    <FUNST>5.0</FUNST>
    <FUCYC>5.0</FUCYC>
    <FUMNC>4.0</FUMNC>
    <FUNCR>19.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>3.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Board.FixShadowPiece(Tetris.GameEngine.Piece, int, int)]]></function>
    <FUNST>6.0</FUNST>
    <FUCYC>3.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>2.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>3.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function><![CDATA[bool Tetris.GameEngine.Board.IsFreePos(int, int)]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>2.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>2.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function><![CDATA[bool Tetris.GameEngine.Board.IsTopReached()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>3.0</FUCYC>
    <FUMNC>2.0</FUMNC>
    <FUNCR>4.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Board.RemoveLine(int)]]></function>
    <FUNST>5.0</FUNST>
    <FUCYC>4.0</FUCYC>
    <FUMNC>2.0</FUMNC>
    <FUNCR>1.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>1.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <function><![CDATA[int[*,*] Tetris.GameEngine.Board.ToArray()]]></function>
    <FUNST>1.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>7.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestCanPosAt()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestCanPosAt_Init_Piece_Pos()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestCanPosAt_Wrong_Pos()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>4.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestCanPosAt_Wrong_X_Pos()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestCheckLines()]]></function>
    <FUNST>10.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>4.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestClone()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>4.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestConstructor()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestConstructor_Wrong_Size()]]></function>
    <FUNST>1.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestFixPiece()]]></function>
    <FUNST>10.0</FUNST>
    <FUCYC>5.0</FUCYC>
    <FUMNC>3.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestFixPiece_Init_Pos_Fix()]]></function>
    <FUNST>10.0</FUNST>
    <FUCYC>5.0</FUCYC>
    <FUMNC>3.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestFixPiece_Wrong_X_Pos()]]></function>
    <FUNST>6.0</FUNST>
    <FUCYC>3.0</FUCYC>
    <FUMNC>2.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestFixShadowPiece()]]></function>
    <FUNST>5.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestGetHeightProp()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestGetItem()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestGetItem_Wrong_Index_0()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestGetItem_Wrong_Index_1()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestGetWidthtProp()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestIsTopReached()]]></function>
    <FUNST>7.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>4.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestIsTopReached_Not_Reached()]]></function>
    <FUNST>7.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>4.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.BoardTest.TestToArray()]]></function>
    <FUNST>5.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>4.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function><![CDATA[void TetrisConsoleUI.ConsoleDrawing.DrawArray(int[*,*], bool)]]></function>
    <FUNST>31.0</FUNST>
    <FUCYC>17.0</FUCYC>
    <FUMNC>3.0</FUMNC>
    <FUNCR>3.0</FUNCR>
    <FUNDC>5.0</FUNDC>
    <FUNPA>2.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function><![CDATA[void TetrisConsoleUI.ConsoleDrawing.DrawColor(string, System.ConsoleColor)]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>8.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>2.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function><![CDATA[void TetrisConsoleUI.ConsoleDrawing.DrawScene(Tetris.GameEngine.Game)]]></function>
    <FUNST>15.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>3.0</FUNCR>
    <FUNDC>6.0</FUNDC>
    <FUNPA>1.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function><![CDATA[void TetrisConsoleUI.ConsoleDrawing.ShowControls()]]></function>
    <FUNST>1.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>1.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function><![CDATA[void TetrisConsoleUI.ConsoleDrawing.ShowGameOver(Tetris.GameEngine.Game)]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>1.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>1.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function><![CDATA[void TetrisConsoleUI.ConsoleDrawing.ShowLines(Tetris.GameEngine.Game)]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>1.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>1.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <function><![CDATA[void TetrisConsoleUI.ConsoleDrawing.ShowScore(Tetris.GameEngine.Game)]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>1.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>1.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <function><![CDATA[void Tetris.DesktopUI.Form1.Form1()]]></function>
    <FUNST>1.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.Designer.cs</fileName>
    <function><![CDATA[void Tetris.DesktopUI.Form1.Dispose(bool)]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>1.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.Designer.cs</fileName>
    <function><![CDATA[void Tetris.DesktopUI.Form1.InitializeComponent()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>1.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Game.Game()]]></function>
    <FUNST>10.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Game.DropNewPiece()]]></function>
    <FUNST>5.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>2.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Game.GameOver()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>6.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Game.MoveDown()]]></function>
    <FUNST>1.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>6.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Game.MoveLeft()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>2.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Game.MoveRight()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>2.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Game.Pause()]]></function>
    <FUNST>5.0</FUNST>
    <FUCYC>4.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>4.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Game.Rotate()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>2.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Game.SmashDown()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>3.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Game.Start()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>15.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Game.Step()]]></function>
    <FUNST>18.0</FUNST>
    <FUCYC>10.0</FUCYC>
    <FUMNC>3.0</FUMNC>
    <FUNCR>2.0</FUNCR>
    <FUNDC>6.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestBoardCreation()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestBoardSize()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestGetActualBoard()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestGetLinesProp()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestGetNextPieceProp()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestGetScoreProp()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestLinesUpdate()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestMoveDown()]]></function>
    <FUNST>5.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestMoveDown_Top_Is_Reached()]]></function>
    <FUNST>5.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>4.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestMoveLeft()]]></function>
    <FUNST>6.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>4.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestMoveRight()]]></function>
    <FUNST>6.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>4.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestNextPieceModeProp()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestPause()]]></function>
    <FUNST>6.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestRotate()]]></function>
    <FUNST>5.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>5.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestShadowPieceModeProp()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestSmashDown()]]></function>
    <FUNST>5.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestStart_Wrong_Status_0()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestStart_Wrong_Status_1()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestStart_Wrong_Status_2()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.GameTest.TestUsualLifecycle()]]></function>
    <FUNST>8.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>4.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Interfaces\IDrawing.cs</fileName>
    <function><![CDATA[Interface void Tetris.ConsoleUI.Interfaces.IDrawing.DrawScene(Tetris.GameEngine.Game)]]></function>
    <FUNST>0.0</FUNST>
    <FUCYC>0.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>1.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function><![CDATA[Interface void Tetris.GameEngine.Interfaces.IMovable.MoveDown()]]></function>
    <FUNST>0.0</FUNST>
    <FUCYC>0.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function><![CDATA[Interface void Tetris.GameEngine.Interfaces.IMovable.MoveLeft()]]></function>
    <FUNST>0.0</FUNST>
    <FUCYC>0.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function><![CDATA[Interface void Tetris.GameEngine.Interfaces.IMovable.MoveRight()]]></function>
    <FUNST>0.0</FUNST>
    <FUCYC>0.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function><![CDATA[Interface void Tetris.GameEngine.Interfaces.IMovable.Rotate()]]></function>
    <FUNST>0.0</FUNST>
    <FUCYC>0.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <function><![CDATA[Interface void Tetris.GameEngine.Interfaces.IMovable.SmashDown()]]></function>
    <FUNST>0.0</FUNST>
    <FUCYC>0.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Piece.Piece(int[*,*])]]></function>
    <FUNST>5.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>1.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function><![CDATA[object Tetris.GameEngine.Piece.Clone()]]></function>
    <FUNST>1.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>3.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Piece.MakeItShadow()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>4.0</FUCYC>
    <FUMNC>3.0</FUMNC>
    <FUNCR>2.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function><![CDATA[Tetris.GameEngine.Piece Tetris.GameEngine.Piece.RotateRight()]]></function>
    <FUNST>5.0</FUNST>
    <FUCYC>3.0</FUCYC>
    <FUMNC>2.0</FUMNC>
    <FUNCR>3.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <function><![CDATA[int[*,*] Tetris.GameEngine.Piece.ToArray()]]></function>
    <FUNST>1.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>11.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.PieceFactory.PieceFactory()]]></function>
    <FUNST>1.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function><![CDATA[Tetris.GameEngine.Piece Tetris.GameEngine.PieceFactory.GetPiecebyId(int)]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>2.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>15.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>1.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function><![CDATA[Tetris.GameEngine.Piece Tetris.GameEngine.PieceFactory.GetRandomPiece(System.Random)]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>3.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>1.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.PieceFactory.Initialize()]]></function>
    <FUNST>8.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>6.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceFactoryTest.TestGetCount()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceFactoryTest.TestGetPieceById()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>4.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceFactoryTest.TestGetPieceById_WrongId()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceFactoryTest.TestGetRandomPiece()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceFactoryTest.TestInitialization()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceTest.TestClone()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>4.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceTest.TestConstructor()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceTest.TestConstructor_Wrong_Parameter()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceTest.TestGetItem()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceTest.TestGetItem_Wrong()]]></function>
    <FUNST>2.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceTest.TestHeight()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceTest.TestInitPosX()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceTest.TestInitPosY()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceTest.TestMakeItShadow()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceTest.TestRotateRight()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceTest.TestToAray()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>2.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <function><![CDATA[void Tetris.GameEngine.Test.PieceTest.TestWidth()]]></function>
    <FUNST>4.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>1.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Program.cs</fileName>
    <function><![CDATA[void Tetris.DesktopUI.Program.Main()]]></function>
    <FUNST>3.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\Resources.Designer.cs</fileName>
    <function><![CDATA[void Tetris.DesktopUI.Properties.Resources.Resources()]]></function>
    <FUNST>0.0</FUNST>
    <FUCYC>1.0</FUCYC>
    <FUMNC>0.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>0.0</FUNDC>
    <FUNPA>0.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function><![CDATA[void TetrisConsoleUI.TetrisConsoleUI.KeyPressedHandler(System.ConsoleKeyInfo)]]></function>
    <FUNST>26.0</FUNST>
    <FUCYC>16.0</FUCYC>
    <FUMNC>1.0</FUMNC>
    <FUNCR>1.0</FUNCR>
    <FUNDC>7.0</FUNDC>
    <FUNPA>1.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function><![CDATA[int TetrisConsoleUI.TetrisConsoleUI.Main(string[])]]></function>
    <FUNST>22.0</FUNST>
    <FUCYC>3.0</FUCYC>
    <FUMNC>2.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>10.0</FUNDC>
    <FUNPA>1.0</FUNPA>
  </functionMetric>
  <functionMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <function><![CDATA[void TetrisConsoleUI.TetrisConsoleUI.OnTimedEvent(object, System.Timers.ElapsedEventArgs)]]></function>
    <FUNST>10.0</FUNST>
    <FUCYC>6.0</FUCYC>
    <FUMNC>4.0</FUMNC>
    <FUNCR>0.0</FUNCR>
    <FUNDC>3.0</FUNDC>
    <FUNPA>2.0</FUNPA>
  </functionMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\ConsoleDrawing.cs</fileName>
    <LOC>134.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>7.0</FINFUS>
    <FIST>60.0</FIST>
    <FICYC>25.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Interfaces\IDrawing.cs</fileName>
    <LOC>13.0</LOC>
    <FINCLS>0.0</FINCLS>
    <FINFUS>1.0</FINFUS>
    <FIST>0.0</FIST>
    <FICYC>1.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Program.cs</fileName>
    <LOC>111.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>3.0</FINFUS>
    <FIST>58.0</FIST>
    <FICYC>25.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.ConsoleUI\Properties\AssemblyInfo.cs</fileName>
    <LOC>15.0</LOC>
    <FINCLS>0.0</FINCLS>
    <FINFUS>0.0</FINFUS>
    <FIST>0.0</FIST>
    <FICYC>0.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.Designer.cs</fileName>
    <LOC>21.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>2.0</FINFUS>
    <FIST>6.0</FIST>
    <FICYC>3.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Form1.cs</fileName>
    <LOC>19.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>1.0</FINFUS>
    <FIST>1.0</FIST>
    <FICYC>1.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Program.cs</fileName>
    <LOC>18.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>1.0</FINFUS>
    <FIST>3.0</FIST>
    <FICYC>1.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\AssemblyInfo.cs</fileName>
    <LOC>15.0</LOC>
    <FINCLS>0.0</FINCLS>
    <FINFUS>0.0</FINFUS>
    <FIST>0.0</FIST>
    <FICYC>0.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\Resources.Designer.cs</fileName>
    <LOC>40.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>1.0</FINFUS>
    <FIST>6.0</FIST>
    <FICYC>1.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.DesktopUI\Properties\Settings.Designer.cs</fileName>
    <LOC>16.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>0.0</FINFUS>
    <FIST>1.0</FIST>
    <FICYC>0.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\BoardTest.cs</fileName>
    <LOC>207.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>20.0</FINFUS>
    <FIST>92.0</FIST>
    <FICYC>31.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\GameTest.cs</fileName>
    <LOC>178.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>20.0</FINFUS>
    <FIST>84.0</FIST>
    <FICYC>21.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceFactoryTest.cs</fileName>
    <LOC>46.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>5.0</FINFUS>
    <FIST>16.0</FIST>
    <FICYC>5.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\PieceTest.cs</fileName>
    <LOC>103.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>12.0</FINFUS>
    <FIST>43.0</FIST>
    <FICYC>12.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine.Test\Properties\AssemblyInfo.cs</fileName>
    <LOC>15.0</LOC>
    <FINCLS>0.0</FINCLS>
    <FINFUS>0.0</FINFUS>
    <FIST>0.0</FIST>
    <FICYC>0.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Board.cs</fileName>
    <LOC>161.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>10.0</FINFUS>
    <FIST>54.0</FIST>
    <FICYC>34.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Game.cs</fileName>
    <LOC>228.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>11.0</FINFUS>
    <FIST>72.0</FIST>
    <FICYC>29.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMode.cs</fileName>
    <LOC>13.0</LOC>
    <FINCLS>0.0</FINCLS>
    <FINFUS>0.0</FINFUS>
    <FIST>0.0</FIST>
    <FICYC>0.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Interfaces\IMovable.cs</fileName>
    <LOC>12.0</LOC>
    <FINCLS>0.0</FINCLS>
    <FINFUS>5.0</FINFUS>
    <FIST>0.0</FIST>
    <FICYC>5.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Piece.cs</fileName>
    <LOC>92.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>5.0</FINFUS>
    <FIST>23.0</FIST>
    <FICYC>11.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\PieceFactory.cs</fileName>
    <LOC>44.0</LOC>
    <FINCLS>1.0</FINCLS>
    <FINFUS>4.0</FINFUS>
    <FIST>15.0</FIST>
    <FICYC>5.0</FICYC>
  </fileMetric>
  <fileMetric>
    <fileName>D:\VPES\COVEREE\Tetris\Tetris.GameEngine\Properties\AssemblyInfo.cs</fileName>
    <LOC>15.0</LOC>
    <FINCLS>0.0</FINCLS>
    <FINFUS>0.0</FINFUS>
    <FIST>0.0</FIST>
    <FICYC>0.0</FICYC>
  </fileMetric>
  <moduleMetric>
    <moduleName>Tetris.ConsoleUI</moduleName>
    <MONFI>4.0</MONFI>
    <MONFU>11.0</MONFU>
  </moduleMetric>
  <moduleMetric>
    <moduleName>Tetris.DesktopUI</moduleName>
    <MONFI>6.0</MONFI>
    <MONFU>5.0</MONFU>
  </moduleMetric>
  <moduleMetric>
    <moduleName>Tetris.GameEngine</moduleName>
    <MONFI>7.0</MONFI>
    <MONFU>35.0</MONFU>
  </moduleMetric>
  <moduleMetric>
    <moduleName>Tetris.GameEngine.Test</moduleName>
    <MONFI>5.0</MONFI>
    <MONFU>57.0</MONFU>
  </moduleMetric>
</static.StaticResult>
